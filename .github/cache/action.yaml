name: "Local cache wrapper (restore/save split)"
description: "Wrapper around actions/cache to restore or save paths deterministically."
inputs:
  mode:
    description: "restore | save | auto"
    required: false
    default: "restore"
  key:
    description: "Primary cache key"
    required: true
  paths:
    description: "Newline-separated paths to cache (required)"
    required: true
  restore-keys:
    description: "Restore keys (optional, newline-separated)"
    required: false
    default: ""
outputs:
  cache-hit:
    description: "Cache hit from restore step"
    value: ${{ steps.restore.outputs.cache-hit }}
runs:
  using: "composite"
  steps:
    - name: Diagnostics
      shell: bash
      run: |
        set -euo pipefail
        echo "mode=${{ inputs.mode }}"
        echo "key=${{ inputs.key }}"
        echo "paths:"
        printf '%s
' "${{ inputs.paths }}"
        if [ -n "${{ inputs['restore-keys'] }}" ]; then
          echo "restore-keys:"
          printf '%s
' "${{ inputs['restore-keys'] }}"
        fi

    - name: Guard non-empty paths
      shell: bash
      run: |
        set -euo pipefail
        if [ -z "${{ inputs.paths }}" ]; then
          echo "::error::No cache paths provided"; exit 2
        fi

    - name: Cache • restore
      id: restore
      if: ${{ inputs.mode == 'restore' || inputs.mode == 'auto' }}
      uses: actions/cache/restore@v4
      with:
        path: ${{ inputs.paths }}
        key: ${{ inputs.key }}
        restore-keys: ${{ inputs['restore-keys'] }}

    - name: Cache • save
      if: ${{ inputs.mode == 'save' }}
      uses: actions/cache/save@v4
      with:
        path: ${{ inputs.paths }}
        key: ${{ inputs.key }}
