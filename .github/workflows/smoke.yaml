# .github/workflows/smoke.yaml
name: CI • Smoke (toolchains • depends • android)

on:
  push:
    branches: ["v100.11.5-android"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: smoke-${{ github.ref }}
  cancel-in-progress: true

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
  ANDROID_HOME: ${{ github.workspace }}/.android-sdk
  ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  ANDROID_NDK_VERSION: "23.1.7779620"

jobs:
  # =============================
  # Native toolchains (fast smoke)
  # =============================
  smoke_native:
    name: smoke • native • ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-13, windows-2022]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize shebangs (non-Windows)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r -d '' f; do
            head -n1 "$f" | grep -q '^#!' || continue
            if head -n1 "$f" | grep -qE "[‘’“”]"; then
              awk 'NR==1{gsub(/‘|’/, '\''\'''); gsub(/“|”/, "\"")} {print}' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              echo "::warning file=$f,line=1::Fixed curly quotes in shebang (use ASCII quotes)."
            fi
          done < <(git ls-files -z)

      - name: Toolchain smoke (POSIX)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t
          ./t || true
          echo ok > .smoke_pass

      - name: Setup MSVC env
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Toolchain smoke (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          'int main(){return 0;}' | Set-Content -NoNewline -Path .\t.cpp
          cl /nologo .\t.cpp /Fe:t.exe
          .\t.exe
          'ok' | Set-Content -NoNewline -Path .smoke_pass

      - name: Inventory
        shell: bash
        if: ${{ runner.os != 'Windows' }}
        run: |
          set -euo pipefail
          echo "### Smoke native ${{ matrix.os }}" >> "$GITHUB_STEP_SUMMARY"
          echo "| component | version | path | sha256 | homepage |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---|---|---|---|---|" >> "$GITHUB_STEP_SUMMARY"
          bin="$(command -v c++ || true)"; ver="$(c++ --version | head -1 || true)"; if command -v sha256sum >/dev/null 2>&1; then sha="$( [ -n "$bin" ] && sha256sum "$bin" | awk '{print $1}' || echo )"; else sha="$( [ -n "$bin" ] && shasum -a 256 "$bin" | awk '{print $1}' || echo )"; fi
          echo "| c++ | ${ver:-n/a} | ${bin:-n/a} | ${sha:-} | https://gcc.gnu.org/ |" >> "$GITHUB_STEP_SUMMARY"

      - name: Inventory (Windows)
        shell: pwsh
        if: ${{ runner.os == 'Windows' }}
        run: |
          $bin = (Get-Command cl).Source
          $ver = (cl 2>&1 | Select-String -Pattern 'Version' | Select-Object -First 1).ToString()
          $sha = (Get-FileHash $bin -Algorithm SHA256).Hash
          Add-Content $env:GITHUB_STEP_SUMMARY "### Smoke native ${{ matrix.os }}"
          Add-Content $env:GITHUB_STEP_SUMMARY "| component | version | path | sha256 | homepage |"
          Add-Content $env:GITHUB_STEP_SUMMARY "|---|---|---|---|---|"
          Add-Content $env:GITHUB_STEP_SUMMARY "| cl | $ver | $bin | $sha | https://learn.microsoft.com/cpp/ |"
      - name: Project quick build (native vkax-d + vkax-cli) — Linux only
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        shell: bash
        run: |
          set -euo pipefail
          J=$(nproc 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
          mkdir -p smoke_build_logs dist
          if [ -f Makefile ]; then
            echo "::notice::Attempting top-level Makefile build for vkax-d vkax-cli (V=1)"
            make -n vkax-d vkax-cli || true
            make -j"$J" vkax-d vkax-cli V=1 2>&1 | tee smoke_build_logs/make.out || true
            make print-vars 2>&1 | tee smoke_build_logs/vars.out || true
          elif [ -f CMakeLists.txt ]; then
            echo "::notice::Attempting CMake build for vkax-d vkax-cli"
            cmake -S . -B build-smoke -DCMAKE_BUILD_TYPE=Release
            cmake --build build-smoke --target vkax-d vkax-cli -- -j"$J" 2>&1 | tee smoke_build_logs/cmake.out || true
          else
            echo "::notice::No Makefile/CMakeLists.txt; skipping project native build"
          fi
          find . -type f \( -name 'vkax-d*' -o -name 'vkax-cli*' \) -exec cp -a {} dist/ \; || true
          if [ -n "$(ls -A dist 2>/dev/null || true)" ]; then (cd dist && sha256sum * > sha256sums.txt) || true; fi
          echo ok > .smoke_pass

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-native-${{ matrix.os }}
          path: |
            .smoke_pass
            t
            t.exe
            smoke_build_logs/**
            dist/**
          if-no-files-found: warn

  # =============================
  # depends (only OSes that use it)
  # =============================
  smoke_depends:
    name: smoke • depends • ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            os: ubuntu-22.04
            host: x86_64-pc-linux-gnu
          - name: ubuntu-24-amd64
            os: ubuntu-24.04
            host: x86_64-pc-linux-gnu
          - name: macos-13
            os: macos-13
            host: x86_64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync submodules
        shell: bash
        run: |
          set -euo pipefail
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Tooling (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3

      - name: Tooling (macOS)
        if: ${{ startsWith(matrix.os, 'macos-') }}
        shell: bash
        run: |
          set -euo pipefail
          brew update
          brew install automake libtool pkg-config ninja
          brew list --versions cmake >/dev/null 2>&1 || brew install cmake

      - name: depends full smoke
        shell: bash
        run: |
          set -euo pipefail
          [ -d depends ] || { echo "::error::depends/ directory missing; required for ${{ matrix.name }}."; exit 2; }
          J=$( (command -v nproc >/dev/null && nproc) || (sysctl -n hw.ncpu) || echo 2 ); [ "$J" -gt 4 ] && J=4
          make -C depends -j"$J" HOST='${{ matrix.host }}'
          echo ok > .smoke_depends_pass
          {
            echo "### depends packages built on ${{ matrix.name }}";
            pkgs=$(find depends/work -type f -name .stamp_built 2>/dev/null | while read -r f; do d=$(dirname "$f"); bn=$(basename "$d"); echo "$bn"; done | sed -E 's/-[0-9].*$//' | sort -u || true);
            if [ -z "$pkgs" ]; then echo "_no .stamp_built files found_"; else printf '%s
' "$pkgs" | sed 's/^/- /'; fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-depends-${{ matrix.name }}
          path: .smoke_depends_pass
          if-no-files-found: warn

  # =============================
  # Android toolchain (Ubuntu 24)
  # =============================
  smoke_android:
    name: smoke • android • ubuntu-24.04 • api ${{ matrix.api }}
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        api: ["34"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Prepare Android SDK
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          tmp=$(mktemp -d)
          curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${ANDROID_NDK_VERSION}"
      - name: Android NDK smoke compile
        shell: bash
        run: |
          set -euo pipefail
          pre="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          a32="$pre/armv7a-linux-androideabi21-clang++"
          a64="$pre/aarch64-linux-android21-clang++"
          [ -x "$a32" ] || { echo "::error::Missing $a32"; exit 127; }
          [ -x "$a64" ] || { echo "::error::Missing $a64"; exit 127; }
          mkdir -p smoke && cd smoke
          cat > t.cpp <<'CPP'
          #include <atomic>
          int main(){ std::atomic<int> v{0}; v++; return (int)v.load(); }
          CPP
          "$a32" -latomic -O2 t.cpp -o a32
          "$a64" -O2 t.cpp -o a64
          echo ok > ../.smoke_pass
          {
            echo "### Android toolchain sources";
            tmp=$(mktemp) && curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp" || true
            zsha=$( [ -s "$tmp" ] && sha256sum "$tmp" | awk '{print $1}' || echo )
            ndk_prop="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}/source.properties"
            ndk_sha=$( [ -f "$ndk_prop" ] && sha256sum "$ndk_prop" | awk '{print $1}' || echo )
            plat_prop="$ANDROID_SDK_ROOT/platforms/android-${{ matrix.api }}/source.properties"
            plat_sha=$( [ -f "$plat_prop" ] && sha256sum "$plat_prop" | awk '{print $1}' || echo )
            echo "- cmdline-tools zip: [$ANDROID_CLT_LINUX]($ANDROID_CLT_LINUX) — sha256: ${zsha:-n/a}";
            echo "- NDK ${ANDROID_NDK_VERSION}: fingerprint of source.properties — sha256: ${ndk_sha:-n/a}";
            echo "- Platform android-${{ matrix.api }}: fingerprint of source.properties — sha256: ${plat_sha:-n/a}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Attempt Qt APK build (oldest Qt from depends)
        shell: bash
        env:
          ANDROID_API: "${{ matrix.api }}"
        run: |
          set -euo pipefail
          mkdir -p dist_apk
          if [ -d depends/packages ]; then
            # find qt package candidates
            candidates=$(ls -1 depends/packages 2>/dev/null | grep -Ei 'qt' || true)
            if [ -n "$candidates" ]; then
              # pick lexicographically smallest (oldest-like) name
              pick=$(printf "%s
" $candidates | sort -V | head -n1)
              echo "::notice::Found Qt package candidate: $pick"
              J=$(nproc 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
              echo "Attempting make -C depends $pick for HOST=aarch64-linux-android"
              make -C depends -j"$J" HOST=aarch64-linux-android "$pick" || echo "::warning::depends qt build for $pick failed"
            else
              echo "::notice::No qt package files in depends/packages"
            fi
          else
            echo "::notice::depends/packages not present; skipping Qt depends build"
          fi

          # look for qmake and androiddeployqt produced by depends
          QMAKE=$(find depends -type f -name 'qmake' -o -name 'qmake-qt5' 2>/dev/null | head -n1 || true)
          ANDROIDDEPLOY=$(find depends -type f -name 'androiddeployqt' 2>/dev/null | head -n1 || true)
          if [ -n "$QMAKE" ] && [ -n "$ANDROIDDEPLOY" ] && [ -f src/qt/vkax-qt.pro ]; then
            echo "::notice::Using qmake from depends: $QMAKE"
            mkdir -p tmp_qt_build && cd tmp_qt_build
            "$QMAKE" ../src/qt/vkax-qt.pro "ANDROID_ABIS=arm64-v8a" "ANDROID_PLATFORM=android-${ANDROID_API}" || { echo "::warning::qmake configure failed"; exit 0; }
            make -j"$(nproc 2>/dev/null || echo 2)" || { echo "::warning::make failed for qt project"; exit 0; }
            JSON=$(find . -name android_deployment_settings.json -print -quit || true)
            if [ -n "$JSON" ]; then
              "$ANDROIDDEPLOY" --input "$JSON" --output ./android_deploy --android-platform "android-${ANDROID_API}" --gradle --release || true
              find ./android_deploy -type f -name '*.apk' -exec cp -a {} ../dist_apk/ \; || true
            fi
          else
            echo "::notice::qmake/androiddeployqt not found in depends; falling back to Gradle/module"
            if [ -x ./gradlew ]; then
              chmod +x ./gradlew
              ./gradlew --no-daemon --stacktrace assembleDebug || echo "::warning::Gradle assemble failed"
              find . -type f -path '*/build/outputs/**/*.apk' -exec cp -a {} dist_apk/ \; || true
            elif [ -d android ] && [ -x android/gradlew ]; then
              ( cd android && chmod +x ./gradlew && ./gradlew --no-daemon --stacktrace assembleDebug ) || echo "::warning::Gradle assemble failed"
              find android -type f -path '*/build/outputs/**/*.apk' -exec cp -a {} dist_apk/ \; || true
            else
              echo "::notice::No packaging tools found; APK not produced"
            fi
          fi
          if [ -d dist_apk ] && [ -n "$(ls -A dist_apk 2>/dev/null || true)" ]; then
            (cd dist_apk && sha256sum * > sha256sums.txt || true)
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-android-ubuntu-24.04-api${{ matrix.api }}
          path: |
            .smoke_pass
            smoke/**/*
            dist_apk/**/*
          if-no-files-found: warn
