# File: .github/workflows/build.yaml
# Purpose: Android daemon/cli/tx builds for aarch64 + armv7 on API-21 + NDK r23b, with safe SDK licenses,
#          toolchain sanity, Android mk lint, progress probe, tee'd logs, 1000-line summary tail,
#          provenance for user-config.jam (owned by boost.mk), and Boost b2 version print.
# Key vars/switches:
#   matrix.arch: aarch64 | armv7
#   matrix.api:  "21"
#   matrix.ndk_ver: "23.1.7779620" (r23b)
#   CC/CXX: set to ${clang_target}${api}-{clang,clang++} via ccache
#   ANDROID_SDK_ROOT, ANDROID_NDK_HOME: set per job
#   MAKEFLAGS: --output-sync=target -j$(nproc)
#   VERBOSE_BUILD=1: enables set -x for major steps
# External expectations:
#   boost.mk emits user-config.jam (workflow never writes it)
#   depends uses NO_QT=1 (daemon/cli/tx only)

name: VKAX Android Builds

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

permissions:
  contents: read

env:
  VERBOSE_BUILD: "1"
  MAKEFLAGS: "--output-sync=target"

jobs:
  android:
    name: Android ${{ matrix.arch }} (API ${{ matrix.api }}, NDK ${{ matrix.ndk_ver }})
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    concurrency:
      group: android-${{ github.ref }}-${{ matrix.arch }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            api: "21"
            host: aarch64-linux-android
            clang_target: aarch64-linux-android
            ndk_ver: "23.1.7779620"   # r23b
          - arch: armv7
            api: "21"
            host: arm-linux-androideabi
            clang_target: armv7a-linux-android
            ndk_ver: "23.1.7779620"   # r23b
    defaults:
      run:
        shell: bash

    steps:
      - name: [VKAX] checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: [VKAX] Init build log
        run: |
          set -Eeuo pipefail
          echo "BUILD_LOG=$RUNNER_TEMP/vkax-build.log" >> "$GITHUB_ENV"
          echo "TAIL_N=1000" >> "$GITHUB_ENV"
          : > "$RUNNER_TEMP/vkax-build.log"

      - name: [VKAX] Guard: forbid 'yes | sdkmanager --licenses'
        run: |
          set -Eeuo pipefail
          if grep -R --line-number -F 'yes | sdkmanager --licenses' .github/workflows; then
            echo "::error::forbidden pattern detected: yes | sdkmanager --licenses"; exit 1
          fi

      - name: [VKAX] Guard: workflows must not write user-config.jam
        run: |
          set -Eeuo pipefail
          if git --no-pager grep -nH --color=never -e 'user-config\.jam' .github/workflows; then
            echo "::error::user-config.jam must be owned by depends/packages/boost.mk, not CI"
            exit 1
          fi

      - name: [VKAX] Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: [VKAX] System deps
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD}" = "1" ] && set -x
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix \
            xz-utils file ccache time jq

      - name: [VKAX] Android SDK + NDK (r23b)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD}" = "1" ] && set -x
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          sdkmanager --update >/dev/null 2>&1 || true
          sdkmanager --licenses >/dev/null 2>&1 <<< $'y\ny\ny\ny\ny\ny\ny\n'
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${{ matrix.ndk_ver }}"
          {
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK=$ANDROID_SDK_ROOT"
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
          } >> "$GITHUB_ENV"
          {
            echo "$ANDROID_SDK_ROOT/platform-tools"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
            echo "$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          } >> "$GITHUB_PATH"

      - name: [VKAX] Toolchain sanity (fail fast)
        run: |
          set -Eeuo pipefail
          TOOL="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          for t in aarch64-linux-android21-clang aarch64-linux-android21-clang++ \
                   armv7a-linux-android21-clang armv7a-linux-android21-clang++ \
                   llvm-ar llvm-ranlib; do
            test -x "$TOOL/$t" || { echo "::error::missing $TOOL/$t"; exit 1; }
          done
          echo "CC=ccache ${{ matrix.clang_target }}${{ matrix.api }}-clang"   >> "$GITHUB_ENV"
          echo "CXX=ccache ${{ matrix.clang_target }}${{ matrix.api }}-clang++" >> "$GITHUB_ENV"
          echo "AR=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: [VKAX] Toolchain summary (CC/CXX/AR/RANLIB)
        if: always()
        run: |
          set -Eeuo pipefail
          {
            echo "### Toolchain summary"
            echo "- CC:     ${CC:-<unset>}     path=$(command -v ${CC%% *} || true)"
            echo "- CXX:    ${CXX:-<unset>}    path=$(command -v ${CXX%% *} || true)"
            echo "- AR:     ${AR:-<unset>}     path=$(command -v ${AR%% *} || true)"
            echo "- RANLIB: ${RANLIB:-<unset>} path=$(command -v ${RANLIB%% *} || true)"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: [VKAX] Lint Android Makefiles (ASCII / <=400 chars / tab-rule)
        run: |
          set -Eeuo pipefail
          files="depends/hosts/android.mk depends/packages/ndk.mk"
          bad=0
          for f in $files; do
            [ -f "$f" ] || continue
            LC_ALL=C grep -nP "[^\x00-\x7F]" "$f" && { echo "::error file=$f::non-ASCII"; bad=1; }
            awk 'length($0)>400{printf "::error file=%s,line=%d::%d chars\n",FILENAME,NR,length($0);b=1}END{exit b}' "$f" || bad=1
            awk '
              BEGIN{in_rule=0;in_def=0;err=0}
              /^\s*#/ {next} /^\s*$/ {in_rule=0;next}
              /^\s*define(\s|$)/ {in_def=1;next}
              in_def && /^\s*endef(\s|$)/ {in_def=0;next}
              in_def {next}
              /^[^\t #][^:]*:[^=]*/ {in_rule=1;next}
              /^[^\t #].*::/ {in_rule=1;next}
              /^\t/ { if(!in_rule){printf "::error file=%s,line=%d::TAB line without rule header\n",FILENAME,NR;err=1} ; next }
              {in_rule=0}
              END{exit err}
            ' "$f" || bad=1
          done
          exit $bad

      - name: [VKAX] Prep depends (config.guess/sub, CRLF)
        run: |
          set -Eeuo pipefail
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }

      - name: [VKAX] Build depends (NO_QT) with probe + tee
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD}" = "1" ] && set -x
          progress_probe() { while sleep 60; do
            echo ":: notice $(date -u +%Y-%m-%dT%H:%M:%SZ) :: depends/work hottest files:"
            find depends/work -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 5 \
            | awk '{ cmd = "date -u -d @" int($1) " +%Y-%m-%dT%H:%M:%SZ"; cmd | getline ts; close(cmd); $1=""; sub(/^ /,""); print "   " ts "  " $0 }' || true
          done; }
          progress_probe & PROBE_PID=$!; trap 'kill "$PROBE_PID" 2>/dev/null || true' EXIT
          export MAKEFLAGS="--output-sync=target -j$(nproc)"
          make -C depends \
            build="$(./depends/config.guess)" build_os=linux \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="${{ matrix.api }}" \
            NO_QT=1 V=1 |& tee -a "$BUILD_LOG"

      - name: [VKAX] Provenance: user-config.jam
        if: always()
        run: |
          set -Eeuo pipefail
          {
            echo "### user-config.jam provenance"
            git --no-pager grep -nH --color=never -e 'user-config\.jam' depends/packages/boost.mk || true
            for f in "$PWD/depends/user-config.jam" "$HOME/.boost-build/user-config.jam"; do
              [ -f "$f" ] || continue
              printf -- "- %s  mtime=%s  sha256=%s\n" \
                "$f" "$(date -u -r "$f" +%FT%TZ)" "$(sha256sum "$f" | cut -d' ' -f1)"
              head -n 1 "$f" | sed 's/^/    first line: /'
            done
          } >> "$GITHUB_STEP_SUMMARY"

      - name: [VKAX] Configure project (logged)
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD}" = "1" ] && set -x
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$PKG_CONFIG_PATH"
          export PKG_CONFIG_SYSROOT_DIR="$PWD/depends/${HOST}"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib $LDFLAGS"
          [ -x ./autogen.sh ] && ./autogen.sh |& tee -a "$BUILD_LOG" || true
          ./configure \
            --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR="${AR}" RANLIB="${RANLIB}" \
            CXXFLAGS="-O2 -fPIC" |& tee -a "$BUILD_LOG"
          if [ -f config.log ]; then
            echo "::group::config.log (tail -200)"; tail -n 200 config.log || true; echo "::endgroup::"
          fi

      - name: [VKAX] Build (logged) with probe
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD}" = "1" ] && set -x
          progress_probe() { while sleep 60; do
            echo ":: notice $(date -u +%Y-%m-%dT%H:%M:%SZ) :: depends/work hottest files:"
            find depends/work -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 5 \
            | awk '{ cmd = "date -u -d @" int($1) " +%Y-%m-%dT%H:%M:%SZ"; cmd | getline ts; close(cmd); $1=""; sub(/^ /,""); print "   " ts "  " $0 }' || true
          done; }
          progress_probe & PROBE_PID=$!; trap 'kill "$PROBE_PID" 2>/dev/null || true' EXIT
          export MAKEFLAGS="--output-sync=target -j$(nproc)"
          make V=1 |& tee -a "$BUILD_LOG"

      - name: [VKAX] Boost b2 version
        if: always()
        run: |
          set -Eeuo pipefail
          {
            echo "### Boost b2 version"
            B2="$(command -v b2 || true)"
            if [ -z "$B2" ]; then
              B2="$(find "$PWD/depends/work" -type f -name b2 -perm -111 -print -quit 2>/dev/null || true)"
            fi
            if [ -n "$B2" ]; then
              echo "- b2 path: $B2"
              "$B2" --version 2>&1 | head -n 5 | sed 's/^/    /'
            else
              echo "_b2 not found (Boost not built in this phase or cleaned)_"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: [VKAX] Package artifacts
        run: |
          set -Eeuo pipefail
          mkdir -p artifacts
          shopt -s nullglob
          files=(src/vkaxd src/vkax-cli src/vkax-tx)
          have_any=false; for f in "${files[@]}"; do [ -f "$f" ] && have_any=true; done
          if ! $have_any; then files=(src/vkax*); [ ${#files[@]} -gt 0 ] || { echo "No vkax binaries produced"; exit 1; }; fi
          llvm-strip -s "${files[@]}" || true
          cp -v "${files[@]}" artifacts/
          tar -C artifacts -czf "vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}-${GITHUB_SHA::7}.tar.gz" .

      - name: [VKAX] Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}
          path: vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}-*.tar.gz
          if-no-files-found: error
          retention-days: 30

      - name: [VKAX] Summarize last ${TAIL_N} build lines
        if: always()
        run: |
          set -Eeuo pipefail
          echo "### Build log tail (last ${TAIL_N:-1000} lines)" >> "$GITHUB_STEP_SUMMARY"
          if [ -s "${BUILD_LOG:-}" ]; then
            { echo '```log'; tail -n "${TAIL_N:-1000}" "$BUILD_LOG"; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No build log captured._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: [VKAX] Upload full build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vkax-build-log-${{ matrix.arch }}
          path: ${{ env.BUILD_LOG }}
          if-no-files-found: warn

# Path: .github/workflows/build.yaml | 2025-09-07 UTC
