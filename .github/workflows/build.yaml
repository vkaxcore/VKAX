# File: .github/workflows/build.yaml
# Purpose: Android aarch64 cross-build (daemon + cli + tx) without Qt
# Notes: ASCII-only, no tabs, no bidi chars. Avoid YAML-heredoc pitfalls.

name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  ANDROID_API: "25"
  HOST: aarch64-linux-android

jobs:
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Install required tools
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix \
            xz-utils file

      - name: Install Android SDK + NDK (r25c)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
            export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
            yes | sdkmanager --licenses >/dev/null
            sdkmanager \
              "platform-tools" \
              "platforms;android-${ANDROID_API}" \
              "ndk;25.2.9519653"
          fi
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_SDK=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Verify NDK toolchain and create wrappers if needed
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          WANT_CXX="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          WANT_CC="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang"
          WRAP_DIR="$RUNNER_TEMP/ndk-cc"
          mkdir -p "$WRAP_DIR"
          if [ -x "$WANT_CXX" ] && [ -x "$WANT_CC" ]; then
            echo "CC=${HOST}${ANDROID_API}-clang" >> "$GITHUB_ENV"
            echo "CXX=${HOST}${ANDROID_API}-clang++" >> "$GITHUB_ENV"
          else
            printf '%s\n' '#!/usr/bin/env bash' "exec \"$TOOLCHAIN_BIN/clang\" --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/${HOST}${ANDROID_API}-clang"
            printf '%s\n' '#!/usr/bin/env bash' "exec \"$TOOLCHAIN_BIN/clang++\" --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/${HOST}${ANDROID_API}-clang++"
            chmod +x "$WRAP_DIR/${HOST}${ANDROID_API}-clang" "$WRAP_DIR/${HOST}${ANDROID_API}-clang++"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=${HOST}${ANDROID_API}-clang" >> "$GITHUB_ENV"
            echo "CXX=${HOST}${ANDROID_API}-clang++" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Configure Boost for Android (user-config.jam)
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CANDIDATE="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          if [ -x "$CANDIDATE" ]; then
            COMPILER_PATH="$CANDIDATE"
          else
            COMPILER_PATH="$(command -v "${HOST}${ANDROID_API}-clang++" || true)"
            if [ -z "$COMPILER_PATH" ]; then COMPILER_PATH="$(command -v "$CXX")"; fi
          fi
          cat > depends/user-config.jam << 'EOF'
          using clang : aarch64 : COMPILER_PLACEHOLDER : <target-os>android <architecture>arm <address-model>64 ;
          EOF
          sed -i "s|COMPILER_PLACEHOLDER|${COMPILER_PATH}|g" depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      - name: Fix line endings & ensure config.guess/sub
        run: |
          set -eux
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ] || { cp -f /usr/share/misc/config.sub depends/config.sub && chmod +x depends/config.sub; }

      - name: Build depends (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          BUILD_TRIPLET="$(./depends/config.guess)"
          make -C depends -j"$(nproc)" \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      - name: Configure project
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -x ./autogen.sh ] && ./autogen.sh || true
          ./configure \
            --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib \
            CXXFLAGS="-O2 -fPIC"

      - name: Build
        run: |
          set -eux
          make -j"$(nproc)"

      - name: Package artifacts
        run: |
          set -eux
          mkdir -p artifacts
          cp -v src/vkax* artifacts/ || true
          tar -C artifacts -czf "vkax-android-aarch64-${GITHUB_SHA::7}.tar.gz" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-aarch64
          path: vkax-android-aarch64-*.tar.gz
          if-no-files-found: warn
