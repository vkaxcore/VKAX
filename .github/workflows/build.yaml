# File: .github/workflows/build.yaml
# Purpose: Android aarch64(API 25) + armv7(API 21) with verbose logs, safe license accept,
#          depends caching, OOM-friendly parallelism, and a 60s progress probe during long builds.

name: VKAX Android Builds

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

permissions:
  contents: read

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

env:
  ANDROID_NDK_VER: "25.2.9519653"   # r25c; if segfault persists, try r23b (23.2.8568313)
  VERBOSE_BUILD: "1"
  MAKEFLAGS: "--output-sync=target"

jobs:
  android:
    name: Android ${{ matrix.arch }} (daemon/cli/tx)
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            api: "25"
            host: aarch64-linux-android
            clang_target: aarch64-linux-android
            addr_model: 64
          - arch: armv7
            api: "21"
            host: arm-linux-androideabi
            clang_target: armv7a-linux-androideabi
            addr_model: 32
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: System deps
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix \
            xz-utils file ccache time

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-ndk${{ env.ANDROID_NDK_VER }}-${{ hashFiles('**/configure.ac', '**/Makefile.am', 'depends/**', 'src/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-ndk${{ env.ANDROID_NDK_VER }}-

      - name: Cache depends outputs
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/sources
          key: depends-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-ndk${{ env.ANDROID_NDK_VER }}-${{ hashFiles('depends/packages/*', 'depends/*.mk') }}
          restore-keys: |
            depends-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-ndk${{ env.ANDROID_NDK_VER }}-

      - name: Android SDK + NDK
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x

          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # Safe license accept (no SIGPIPE with pipefail)
          sdkmanager --update >/dev/null 2>&1 || true
          sdkmanager --licenses >/dev/null 2>&1 <<< $'y\ny\ny\ny\ny\ny\ny\n'

          # Install platform + NDK for this arch's API
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${ANDROID_NDK_VER}"

          {
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK=$ANDROID_SDK_ROOT"
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VER}"
          } >> "$GITHUB_ENV"

          {
            echo "$ANDROID_SDK_ROOT/platform-tools"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
            echo "$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VER}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          } >> "$GITHUB_PATH"

      - name: Toolchain setup
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          TARGET_PREFIX="${{ matrix.clang_target }}${{ matrix.api }}"
          WANT_CC="$TOOLCHAIN_BIN/${TARGET_PREFIX}-clang"
          WANT_CXX="$TOOLCHAIN_BIN/${TARGET_PREFIX}-clang++"
          WRAP_DIR="$RUNNER_TEMP/ndk-cc"; mkdir -p "$WRAP_DIR"

          if [ -x "$WANT_CC" ] && [ -x "$WANT_CXX" ]; then
            echo "CC=ccache ${TARGET_PREFIX}-clang"   >> "$GITHUB_ENV"
            echo "CXX=ccache ${TARGET_PREFIX}-clang++" >> "$GITHUB_ENV"
          else
            printf '%s\n' "#!/usr/bin/env bash" "exec \"$TOOLCHAIN_BIN/clang\" --target=${TARGET_PREFIX} \"\$@\""  > "$WRAP_DIR/${TARGET_PREFIX}-clang"
            printf '%s\n' "#!/usr/bin/env bash" "exec \"$TOOLCHAIN_BIN/clang++\" --target=${TARGET_PREFIX} \"\$@\"" > "$WRAP_DIR/${TARGET_PREFIX}-clang++"
            chmod +x "$WRAP_DIR/${TARGET_PREFIX}-clang" "$WRAP_DIR/${TARGET_PREFIX}-clang++"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=ccache ${TARGET_PREFIX}-clang"   >> "$GITHUB_ENV"
            echo "CXX=ccache ${TARGET_PREFIX}-clang++" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar"       >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Configure Boost (safe user-config.jam)
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x
          mkdir -p depends "$HOME/.boost-build"
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          TARGET_PREFIX="${{ matrix.clang_target }}${{ matrix.api }}"
          CANDIDATE="$TOOLCHAIN_BIN/${TARGET_PREFIX}-clang++"
          if [ -x "$CANDIDATE" ]; then COMPILER_PATH="$CANDIDATE"; else COMPILER_PATH="$(command -v "${TARGET_PREFIX}-clang++" || true)"; fi
          [ -n "$COMPILER_PATH" ] || { echo "clang++ for $TARGET_PREFIX not found"; exit 1; }
          ADDRESS_MODEL="${{ matrix.addr_model }}"
          printf 'using clang : android-%s : %s : <target-os>android <architecture>arm <address-model>%s ;\n' \
            "${{ matrix.arch }}" "${COMPILER_PATH}" "${ADDRESS_MODEL}" > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      - name: Prep depends
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }

      - name: Build depends (NO_QT) with probe and segv tracing
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x

          BUILD_TRIPLET="$(./depends/config.guess)"
          echo "Triplet: $BUILD_TRIPLET  Host: $HOST  API: ${{ matrix.api }}"

          echo "Memory before build:"
          free -h || true
          ulimit -a || true
          ulimit -c unlimited || true

          # Progress probe every 60s to show what file is hottest under depends/work
          progress_probe() {
            while sleep 60; do
              echo ":: notice $(date -u +%Y-%m-%dT%H:%M:%SZ) :: depends/work hottest files:"
              find depends/work -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 5 \
              | awk '{ cmd = "date -u -d @" int($1) " +%Y-%m-%dT%H:%M:%SZ"; cmd | getline ts; close(cmd); $1=""; sub(/^ /,""); print "   " ts "  " $0 }' || true
            done
          }
          progress_probe & PROBE_PID=$!
          trap 'kill "$PROBE_PID" 2>/dev/null || true' EXIT

          # Keep depends parallelism modest to avoid OOM â†’ segfault (139)
          export MAKEFLAGS="--output-sync=target -j2"

          # catchsegv + time give a stack-ish trace and resource stats if a tool crashes
          if command -v catchsegv >/dev/null 2>&1; then WRAP="catchsegv"; else WRAP=""; fi
          $WRAP /usr/bin/time -v \
          make -C depends \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="${{ matrix.api }}" \
            NO_QT=1 V=1

          echo "Memory after build:"
          free -h || true

      - name: Configure project
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$PKG_CONFIG_PATH"
          export PKG_CONFIG_SYSROOT_DIR="$PWD/depends/${HOST}"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -x ./autogen.sh ] && ./autogen.sh || true
          ./configure \
            --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR="${AR}" RANLIB="${RANLIB}" \
            CXXFLAGS="-O2 -fPIC"

      - name: Build (with progress probe)
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x

          progress_probe() {
            while sleep 60; do
              echo ":: notice $(date -u +%Y-%m-%dT%H:%M:%SZ) :: depends/work hottest files:"
              find depends/work -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 5 \
              | awk '{ cmd = "date -u -d @" int($1) " +%Y-%m-%dT%H:%M:%SZ"; cmd | getline ts; close(cmd); $1=""; sub(/^ /,""); print "   " ts "  " $0 }' || true
            done
          }
          progress_probe & PROBE_PID=$!
          trap 'kill "$PROBE_PID" 2>/dev/null || true' EXIT

          export MAKEFLAGS="--output-sync=target -j$(nproc)"
          make V=1

      - name: Package artifacts
        run: |
          set -Eeuo pipefail
          [ "${VERBOSE_BUILD}" = "1" ] && set -x
          mkdir -p artifacts
          shopt -s nullglob
          files=(src/vkaxd src/vkax-cli src/vkax-tx)
          have_any=false; for f in "${files[@]}"; do [ -f "$f" ] && have_any=true; done
          if ! $have_any; then files=(src/vkax*); [ ${#files[@]} -gt 0 ] || { echo "No vkax binaries produced"; exit 1; }; fi
          llvm-strip -s "${files[@]}" || true
          cp -v "${files[@]}" artifacts/
          tar -C artifacts -czf "vkax-android-${{ matrix.arch }}-${GITHUB_SHA::7}.tar.gz" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-${{ matrix.arch }}
          path: vkax-android-${{ matrix.arch }}-*.tar.gz
          if-no-files-found: error
          retention-days: 30
