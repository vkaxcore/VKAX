name: VKAX Build
on:
  push:
    branches:
      - main
      - v100.11.5*
      - develop
  pull_request:
    branches:
      - develop

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  DEPENDS_DIR: depends
  TEST_LOG_ARTIFACT_DIR: test-logs
  CACHE_VERSION: v1

jobs:
  # Step 1: Determine version
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.select-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Read version from build.properties
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      - name: Choose version
        id: select-version
        run: |
          set -e
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *v100.11.3* ]]; then
            version=${{ steps.versions.outputs.snapshot-version }}
          else
            version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "$version" > version.txt

      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  # Step 2: Setup dependencies (cached)
  setup-dependencies:
    runs-on: ubuntu-latest
    outputs:
      deps-script: ${{ steps.save-script.outputs.deps-script }}
    steps:
      - uses: actions/checkout@v4

      # Cache depends folder
      - name: Cache depends
        uses: actions/cache@v3
        with:
          path: ${{ env.DEPENDS_DIR }}
          key: ${{ runner.os }}-depends-${{ env.CACHE_VERSION }}-${{ hashFiles('build.properties') }}

      - name: Create install-deps.sh
        id: save-script
        run: |
          cat <<'EOF' > install-deps.sh
          #!/bin/bash
          set -e
          echo "Installing dependencies for $OSTYPE..."
          if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install automake libtool pkg-config miniupnpc libnatpmp zeromq python3 || true
            pip3 install setuptools || true
          else
            sudo apt-get update -y
            sudo apt-get install -y build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake curl || true
            if [[ "$1" == "windows" ]]; then
              sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
              sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
            elif [[ "$1" == "arm64" ]]; then
              sudo apt-get install -y g++-aarch64-linux-gnu
            fi
          fi
          EOF

          chmod +x install-deps.sh
          echo "deps-script=install-deps.sh" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: install-deps
          path: install-deps.sh

  # Step 3: Build all platforms using matrix
  build:
    needs: [get-version, setup-dependencies]
    strategy:
      matrix:
        os: [macos-13, ubuntu-22.04, ubuntu-22.04, ubuntu-22.04] # macOS, Ubuntu x86_64, Ubuntu ARM64, Windows
        arch: [x86_64, x86_64, arm64, windows]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: install-deps

      # Install dependencies
      - name: Install dependencies
        run: |
          chmod +x install-deps.sh
          bash install-deps.sh ${{ matrix.arch }}

      # Cache build artifacts
      - name: Cache depends
        uses: actions/cache@v3
        with:
          path: ${{ env.DEPENDS_DIR }}
          key: ${{ runner.os }}-build-${{ matrix.arch }}-${{ env.CACHE_VERSION }}-${{ hashFiles('build.properties') }}

      # Prepare build dir
      - run: |
          rm -rf $BUILD_DIR
          mkdir -p $BUILD_DIR

      # Build depends
      - run: |
          echo "Building depends..."
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            make -C depends -j$(nproc) HOST=aarch64-linux-gnu
          elif [[ "${{ matrix.arch }}" == "windows" ]]; then
            make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
            make -C depends -j$(sysctl -n hw.ncpu)
          else
            make -C depends -j$(nproc)
          fi

      # Autogen & configure
      - run: |
          echo "Configuring build..."
          if [[ "${{ matrix.arch }}" == "windows" ]]; then
            ./autogen.sh && ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            ./autogen.sh && ./configure --prefix=`pwd`/depends/aarch64-linux-gnu
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
            export CXXFLAGS="-Wno-deprecated-declarations"
            ./autogen.sh && ./configure CXXFLAGS="$CXXFLAGS" --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0
          else
            ./autogen.sh && ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
          fi

      # Compile
      - run: |
          echo "Compiling..."
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            make -j$(sysctl -n hw.ncpu) V=1
          else
            make -j$(nproc) V=1
          fi

      # Move binaries safely
      - run: |
          BINARIES=()
          if [[ "${{ matrix.arch }}" == "windows" ]]; then
            BINARIES=(src/vkax-cli.exe src/vkaxd.exe src/qt/vkax-qt.exe)
          else
            BINARIES=(src/vkax-cli src/vkaxd src/qt/vkax-qt)
          fi

          for f in "${BINARIES[@]}"; do
            if [[ -f "$f" ]]; then
              mv "$f" $BUILD_DIR/
            else
              echo "Warning: $f not found"
            fi
          done

      # Strip binaries (skip Windows)
      - run: |
          if [[ "${{ matrix.arch }}" != "windows" ]]; then
            strip $BUILD_DIR/* || true
          fi

      # Package artifacts
      - run: |
          ARTIFACT=""
          VERSION=${{ needs.get-version.outputs.version }}
          case "${{ matrix.arch }}" in
            windows)
              ARTIFACT=${COIN_NAME}-win-${VERSION}.zip
              zip -r $ARTIFACT $BUILD_DIR
              ;;
            arm64)
              ARTIFACT=${COIN_NAME}-arm64-${VERSION}.tar.gz
              tar -czf $ARTIFACT $BUILD_DIR
              ;;
            x86_64)
              if [[ "${{ matrix.os }}" == "macos-13" ]]; then
                ARTIFACT=${COIN_NAME}-macos-${VERSION}.tar.gz
              else
                ARTIFACT=${COIN_NAME}-ubuntu-${VERSION}.tar.gz
              fi
              tar -czf $ARTIFACT $BUILD_DIR
              ;;
          esac
          echo "Artifact created: $ARTIFACT"
          echo $ARTIFACT > artifact-path.txt

      # Upload artifact
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-${{ needs.get-version.outputs.version }}
          path: artifact-path.txt
