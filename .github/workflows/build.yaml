name: VKAX Build
on:
  push:
    branches:
      - main
      - v100.11.5*
      - develop
  pull_request:
    branches:
      - develop

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_LOG_ARTIFACT_DIR: test-logs

jobs:
  # Step 1: Determine version
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.select-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read version from build.properties
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      - name: Choose version
        id: select-version
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *v100.11.3* ]]; then
            version=${{ steps.versions.outputs.snapshot-version }}
          else
            version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "$version" > version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  # Step 2: Dependency install job
  setup-dependencies:
    runs-on: ubuntu-latest
    outputs:
      deps-script: ${{ steps.save-script.outputs.deps-script }}
    steps:
      - name: Create dependency script
        id: save-script
        run: |
          cat <<'EOF' > install-deps.sh
          #!/bin/bash
          set -e

          if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "Installing macOS dependencies..."
            brew install automake libtool pkg-config miniupnpc libnatpmp zeromq python3 || true
            pip3 install setuptools || true
          else
            echo "Installing Linux dependencies..."
            sudo apt-get update -y
            sudo apt-get install -y build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake curl
            if [[ "$1" == "windows" ]]; then
              sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
              sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
            elif [[ "$1" == "arm64" ]]; then
              sudo apt-get install -y g++-aarch64-linux-gnu
            fi
          fi
          EOF

          chmod +x install-deps.sh
          echo "deps-script=install-deps.sh" >> $GITHUB_OUTPUT

      - name: Upload script artifact
        uses: actions/upload-artifact@v4
        with:
          name: install-deps
          path: install-deps.sh

  # Step 3: Build macOS
  build-macos:
    runs-on: macos-13
    needs: [get-version, setup-dependencies]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: install-deps
      - run: bash install-deps.sh
      # Set CXXFLAGS to ignore deprecated warnings
      - run: export CXXFLAGS="-Wno-deprecated-declarations"
      - run: make -C depends -j$(sysctl -n hw.ncpu)
      - run: ./autogen.sh && ./configure CXXFLAGS="$CXXFLAGS" --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0
      - run: make -j$(sysctl -n hw.ncpu)
      - run: |
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - run: tar -czf ${COIN_NAME}-macos-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR
      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ needs.get-version.outputs.version }}
          path: ${COIN_NAME}-macos-${{ needs.get-version.outputs.version }}.tar.gz

  # Step 4: Build Ubuntu x86_64
  build-ubuntu:
    runs-on: ubuntu-22.04
    needs: [get-version, setup-dependencies]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: install-deps
      - run: bash install-deps.sh
      - run: make -C depends -j$(nproc)
      - run: ./autogen.sh && ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
      - run: make -j$(nproc)
      - run: |
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - run: tar -czf ${COIN_NAME}-ubuntu-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR
      - uses: actions/upload-artifact@v4
        with:
          name: ubuntu-${{ needs.get-version.outputs.version }}
          path: ${COIN_NAME}-ubuntu-${{ needs.get-version.outputs.version }}.tar.gz

  # Step 5: Build Ubuntu ARM64
  build-ubuntu-arm64:
    runs-on: ubuntu-22.04
    needs: [get-version, setup-dependencies]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: install-deps
      - run: bash install-deps.sh arm64
      - run: make -C depends -j$(nproc) HOST=aarch64-linux-gnu
      - run: ./autogen.sh && ./configure --prefix=`pwd`/depends/aarch64-linux-gnu
      - run: make -j$(nproc)
      - run: |
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
      - run: tar -czf ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR
      - uses: actions/upload-artifact@v4
        with:
          name: arm64-${{ needs.get-version.outputs.version }}
          path: ${COIN_NAME}-arm64-${{ needs.get-version.outputs.version }}.tar.gz

  # Step 6: Cross-compile Windows
  build-windows:
    runs-on: ubuntu-22.04
    needs: [get-version, setup-dependencies]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: install-deps
      - run: bash install-deps.sh windows
      - run: make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      - run: ./autogen.sh && ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
      - run: make -j$(nproc)
      - run: |
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} $BUILD_DIR/
          strip $BUILD_DIR/*
      - run: zip -r ${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip $BUILD_DIR
      - uses: actions/upload-artifact@v4
        with:
          name: win-${{ needs.get-version.outputs.version }}
          path: ${COIN_NAME}-win-${{ needs.get-version.outputs.version }}.zip
