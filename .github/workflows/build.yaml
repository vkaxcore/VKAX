# .github/workflows/build.yaml
# VKAX Android APK build — aarch64. v5: YAML-safe, fixes Boost retargeting and libc++ headers.
# Do not edit randomly; wrappers strip hostile flags and re-apply Android triple + sysroot. — Setvin

name: VKAX Android APK Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C

jobs:
  android-apk:
    name: Android aarch64 build
    runs-on: ubuntu-22.04
    env:
      HOST: aarch64-linux-android
      ANDROID_API: "21"
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Host tooling
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config \
            python3 unzip wget cmake ninja-build zip curl

      - name: Gradle 8.7
        run: |
          set -eux
          curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o /tmp/gradle.zip
          sudo mkdir -p /opt/gradle
          sudo unzip -q /tmp/gradle.zip -d /opt/gradle
          echo "/opt/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"

      - name: Android SDK and NDK r25c
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
          unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Create Android wrappers and Boost config
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          LLVM="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
          BIN="$LLVM/bin"
          SYSROOT="$LLVM/sysroot"
          ARCH="$HOST"
          API="$ANDROID_API"

          test -x "$BIN/${ARCH}${API}-clang++"
          WRAP="$GITHUB_WORKSPACE/.ccwrap"; mkdir -p "$WRAP"

          cat > "$WRAP/_strip_flags.sh" << 'SH'
          #!/usr/bin/env bash
          set -e
          out=()
          skip_next=0
          for a in "$@"; do
            if [ "$skip_next" = 1 ]; then skip_next=0; continue; fi
            case "$a" in
              --target=*|-target=*) continue ;;
              -target)   skip_next=1; continue ;;
              --sysroot=*|-isysroot=*) continue ;;
              -isysroot) skip_next=1; continue ;;
              -stdlib=*) continue ;;
            esac
            out+=("$a")
          done
          printf '%s\n' "${out[@]}"
          SH
          chmod +x "$WRAP/_strip_flags.sh"

          make_wrap() {
            local path="$1"; local driver="$2"
            cat > "$path" << 'EOF'
          #!/usr/bin/env bash
          set -e
          LLVM="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
          SYSROOT="$LLVM/sysroot"
          INC_CPP="$LLVM/include/c++/v1"
          DIR="$(cd -- "$(dirname "$0")" && pwd)"
          # shellcheck disable=SC2207
          CLEANED=($("$DIR/_strip_flags.sh" "$@"))
          exec "$LLVM/bin/DRIVER" "${CLEANED[@]}" --target=TRIPLE --sysroot="$SYSROOT" -nostdinc++ -isystem "$INC_CPP" -isystem "$SYSROOT/usr/include"
          EOF
            sed -i "s|DRIVER|$driver|g; s|TRIPLE|${ARCH}${API}|g" "$path"
            chmod +x "$path"
          }

          make_wrap "$WRAP/${ARCH}${API}-clang"   "${ARCH}${API}-clang"
          make_wrap "$WRAP/${ARCH}${API}-clang++" "${ARCH}${API}-clang++"
          ln -sf "$WRAP/${ARCH}${API}-clang"   "$WRAP/${ARCH}-clang"
          ln -sf "$WRAP/${ARCH}${API}-clang++" "$WRAP/${ARCH}-clang++"
          make_wrap "$WRAP/clang"  "clang"
          make_wrap "$WRAP/clang++" "clang++"

          echo "$WRAP" >> "$GITHUB_PATH"
          export PATH="$WRAP:$PATH"

          {
            echo "CC=clang"
            echo "CXX=clang++"
            echo "AR=llvm-ar"
            echo "RANLIB=llvm-ranlib"
          } >> "$GITHUB_ENV"

          mkdir -p depends "$HOME/.boost-build"
          cat > depends/user-config.jam <<JAM
          using clang : aarch64 : $WRAP/${ARCH}-clang++ : <target-os>android ;
          JAM
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

          which clang++
          clang++ -v || true
          which ${ARCH}${API}-clang++ || true
          ${ARCH}${API}-clang++ -v || true

      - name: Build depends (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          BOOST_BUILD_PATH: ${{ env.BOOST_BUILD_PATH }}
        run: |
          set -eux
          which clang++
          clang++ --target=${HOST}${ANDROID_API} -v || true
          make -C depends -j"$(nproc)" HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" NO_QT=1 V=1

      - name: Configure core
        env:
          HOST: ${{ env.HOST }}
          CONFIG_SITE: ${{ github.workspace }}/depends/${{ env.HOST }}/share/config.site
        run: |
          set -eux
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"
          ./autogen.sh || true
          ./configure \
            --host="${HOST}" --build="$(gcc -dumpmachine)" \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="-O2 -fPIC"

      - name: Build core
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/"

      - name: Create APK
        run: |
          set -eux
          mkdir -p android-app/app/src/main/{jniLibs/arm64-v8a,java/org/vkax/android}
          cp "$BUILD_DIR/vkaxd" "$BUILD_DIR/vkax-cli" "$BUILD_DIR/vkax-tx" android-app/app/src/main/jniLibs/arm64-v8a/

          cat > android-app/settings.gradle << 'GRADLE'
          rootProject.name = "VKAXAndroid"
          include(":app")
          GRADLE

          cat > android-app/build.gradle << 'GRADLE'
          buildscript {
            repositories { google(); mavenCentral() }
            dependencies { classpath "com.android.tools.build:gradle:8.3.2" }
          }
          allprojects { repositories { google(); mavenCentral() } }
          GRADLE

          mkdir -p android-app/app/src/main
          cat > android-app/app/build.gradle << 'GRADLE'
          plugins { id "com.android.application" }
          android {
            namespace "org.vkax.android"
            compileSdkVersion 34
            defaultConfig {
              applicationId "org.vkax.android"
              minSdkVersion 21
              targetSdkVersion 34
              versionCode 1
              versionName "1.0"
              ndk { abiFilters "arm64-v8a" }
            }
            buildTypes { release { minifyEnabled false } }
          }
          GRADLE

          cat > android-app/app/src/main/AndroidManifest.xml << 'XML'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="org.vkax.android">
            <application android:label="VKAX Daemon" android:allowBackup="false">
              <activity android:name=".MainActivity">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          XML

          cat > android-app/app/src/main/java/org/vkax/android/MainActivity.java << 'JAVA'
          package org.vkax.android;
          import android.app.Activity;
          import android.os.Bundle;
          public class MainActivity extends Activity {
            @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); }
          }
          JAVA

          cd android-app
          /opt/gradle/gradle-8.7/bin/gradle --no-daemon --warning-mode all assembleRelease
          cd ..
          mkdir -p "$COMPRESS_DIR"
          cp android-app/app/build/outputs/apk/release/app-release.apk "$COMPRESS_DIR/${COIN_NAME}-android-aarch64.apk"

      - name: Diagnostics
        if: always()
        run: |
          set -x
          find depends -maxdepth 7 -type f \( -name bootstrap.log -o -name config.log -o -name project-config.jam -o -name user-config.jam \) -print || true
          which clang++ || true
          clang++ --version || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-apk
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64.apk
