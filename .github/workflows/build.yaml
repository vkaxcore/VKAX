# .github/workflows/build.yaml
name: Android Smoke + Build (multi-OS, hash-seeded licenses)

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
  ANDROID_HOME: ${{ github.workspace }}/.android-sdk
  # cmdline-tools r9477386 is widely compatible and stable
  ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  ANDROID_CLT_MAC: https://dl.google.com/android/repository/commandlinetools-mac-9477386_latest.zip
  ANDROID_CLT_WIN: https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip

jobs:
  android:
    name: ${{ matrix.name }} | api ${{ matrix.api }} | ndk ${{ matrix.ndk }}
    # Use fromJSON so we can pass either a string or an array of labels
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        api: [24, 28, 34, 35]
        ndk: ["26.3.11579264"]
        include:
          - name: ubuntu-x64
            runs_on: '"ubuntu-22.04"'
            host_os: linux
            host_arch: x86_64
          - name: ubuntu-arm64
            # Adjust labels if your self-hosted runner uses a different scheme
            runs_on: '["self-hosted","Linux","ARM64"]'
            host_os: linux
            host_arch: arm64
          - name: macos-arm64
            runs_on: '"macos-14"'
            host_os: darwin
            host_arch: arm64
          - name: macos-intel
            runs_on: '"macos-13"'
            host_os: darwin
            host_arch: x86_64
          - name: windows-x64
            runs_on: '"windows-2022"'
            host_os: windows
            host_arch: x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (AGP-friendly)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Prepare SDK directories
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT" "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          # Silence sdkmanager repo warning
          touch "$HOME/.android/repositories.cfg"

      # Download and install commandline-tools (per-OS)
      - name: Install Android cmdline-tools (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          tmp=$(mktemp -d)
          curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Install Android cmdline-tools (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          tmp=$(mktemp -d)
          curl -fsSL "$ANDROID_CLT_MAC" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Install Android cmdline-tools (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tmp = New-Item -ItemType Directory -Force -Path (Join-Path $env:RUNNER_TEMP "clt")
          Invoke-WebRequest -UseBasicParsing -Uri $env:ANDROID_CLT_WIN -OutFile (Join-Path $tmp "cmdline.zip")
          Expand-Archive -Path (Join-Path $tmp "cmdline.zip") -DestinationPath (Join-Path $env:ANDROID_SDK_ROOT "cmdline-tools") -Force
          Move-Item -Force (Join-Path $env:ANDROID_SDK_ROOT "cmdline-tools\cmdline-tools") (Join-Path $env:ANDROID_SDK_ROOT "cmdline-tools\latest")
          echo "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Accept Android licenses (hash-seeded)
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages
        env:
          PATH: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:${{ env.PATH }}
        shell: bash
        run: |
          set -euo pipefail
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${{ matrix.ndk }}"

      - name: Verify SDK/NDK layout
        shell: bash
        run: |
          set -euo pipefail
          test -x "$ANDROID_SDK_ROOT/platform-tools/adb"
          test -d "$ANDROID_SDK_ROOT/platforms/android-${{ matrix.api }}"
          test -d "$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk }}"
          find "$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk }}/toolchains/llvm/prebuilt" -maxdepth 1 -type d -name "${{ matrix.host_os }}-*" -print

      - name: Smoke compile (NDK armv7a + arm64)
        id: smoke
        shell: bash
        run: |
          set -euo pipefail
          OS=${{ matrix.host_os }}; ARCH=${{ matrix.host_arch }}
          case "$OS" in
            linux)   HOST_OS="linux" ;;
            darwin)  HOST_OS="darwin" ;;
            windows) HOST_OS="windows" ;;
            *) echo "::error::Unsupported host OS: $OS"; exit 1;;
          esac
          case "$ARCH" in
            x86_64) HOST_ARCH="x86_64" ;;
            arm64)  HOST_ARCH="arm64" ;;
            *) echo "::error::Unsupported host arch: $ARCH"; exit 1;;
          esac
          PREBUILT="${ANDROID_SDK_ROOT}/ndk/${{ matrix.ndk }}/toolchains/llvm/prebuilt/${HOST_OS}-${HOST_ARCH}/bin"
          A32="${PREBUILT}/armv7a-linux-androideabi21-clang++"
          A64="${PREBUILT}/aarch64-linux-android21-clang++"
          if [ ! -x "$A32" ] || [ ! -x "$A64" ]; then
            echo "::error::NDK clang not found for ${HOST_OS}-${HOST_ARCH}"
            ls -la "$PREBUILT" || true
            exit 1
          fi
          mkdir -p smoke && cd smoke
          cat > t.cpp <<'CPP'
          #include <atomic>
          int main(){ std::atomic<int> v{0}; v++; return (int)v.load(); }
          CPP
          "$A32" -latomic -O2 t.cpp -o a32
          "$A64" -O2 t.cpp -o a64
          file ./a32 || true
          file ./a64 || true
          echo "ok" > ../.smoke_pass

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-${{ matrix.name }}-api${{ matrix.api }}
          path: |
            .smoke_pass
            smoke/**
          if-no-files-found: warn

      # Wire in your actual build below this line. Keep it after smoke.
      # Linux/macOS example shows CMake; Windows block reserved if needed.

      - name: Configure project (CMake example)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f CMakeLists.txt ]; then
            cmake -S . -B build -G Ninja
          else
            echo "No CMakeLists.txt; skipping CMake configure."
          fi

      - name: Build project (CMake example)
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -d build ]; then
            cmake --build build -j"$(getconf _NPROCESSORS_ONLN || echo 2)"
          else
            echo "No build dir; skipping CMake build."
          fi

      - name: Build with Gradle if present
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew --no-daemon assemble
          else
            echo "No Gradle wrapper; skipping Gradle build."
          fi

      - name: Windows project build placeholder
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path -Path ".\CMakeLists.txt") {
            cmake -S . -B build -G "Ninja"
            cmake --build build -- -j 2
          } else {
            echo "No CMakeLists.txt; skipping Windows native build."
          }

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.name }}-api${{ matrix.api }}
          path: |
            build/**
            **/build/outputs/**/*
          if-no-files-found: warn
