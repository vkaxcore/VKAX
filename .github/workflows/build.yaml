name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C

jobs:
  # ---------------- ANDROID (daemon + cli + tx, no Qt) ----------------
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04
    env:
      HOST: aarch64-linux-android
      ANDROID_API: "21"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake libtool pkg-config python3 unzip wget cmake ninja-build

      - name: Install Android SDK + NDK (r25c)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
          unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platforms;android-${{ env.ANDROID_API }}" \
            "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: NDK clang shims for Boost + user-config.jam
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -e
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          test -x "$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"

          # Provide the names Boost expects (no API suffix).
          ln -sf "${TOOLCHAIN_BIN}/${HOST}${ANDROID_API}-clang"  "${TOOLCHAIN_BIN}/${HOST}-clang"
          ln -sf "${TOOLCHAIN_BIN}/${HOST}${ANDROID_API}-clang++" "${TOOLCHAIN_BIN}/${HOST}-clang++"

          # Toolchain in PATH and classic vars for autotools.
          export PATH="$TOOLCHAIN_BIN:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "CC=${HOST}${ANDROID_API}-clang" >> $GITHUB_ENV
          echo "CXX=${HOST}${ANDROID_API}-clang++" >> $GITHUB_ENV
          echo "AR=llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=llvm-ranlib" >> $GITHUB_ENV

          # Force Boost to use Android clang via a local user-config.jam
          mkdir -p depends
          cat > depends/user-config.jam <<'EOF'
          using clang : aarch64 : aarch64-linux-android-clang++ :
              <target-os>android
              <compileflags>"-D__ANDROID_API__=21 -fPIC"
              <linkflags>"-fuse-ld=lld"
          ;
          EOF
          echo "BOOST_BUILD_PATH=$PWD/depends" >> $GITHUB_ENV

      - name: Build depends (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_API: ${{ env.ANDROID_API }}
          BOOST_BUILD_PATH: ${{ env.BOOST_BUILD_PATH }}
        run: |
          set -e
          make -C depends -j"$(nproc)" \
            HOST=$HOST \
            ANDROID_NDK=$ANDROID_NDK_HOME \
            ANDROID_API=$ANDROID_API \
            NO_QT=1 V=1

      - name: Configure (daemon + cli + tx)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_API: ${{ env.ANDROID_API }}
          CONFIG_SITE: ${{ github.workspace }}/depends/${{ env.HOST }}/share/config.site
        run: |
          set -e
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"
          ./autogen.sh || true
          ./configure \
            --host=${HOST} --build=$(gcc -dumpmachine) \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="-O2 -fPIC"

      - name: Build + Package (vkaxd, vkax-cli, vkax-tx)
        run: |
          set -e
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true
          tar -cvzf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: Boost diagnostics (if something plays dumb)
        if: always()
        run: |
          set -x
          find depends -maxdepth 6 -type f \( -name bootstrap.log -o -name config.log \) -print || true
          B2=$(find depends -maxdepth 6 -type f -name b2 -print -quit || true)
          if [ -n "$B2" ]; then "$(dirname "$B2")/b2" --debug-configuration -n --version || true; fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz
