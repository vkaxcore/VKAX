.github/workflows/build.yaml
# Android-only; HARD-LOCKED to v100.11.5-android so we don't build the wrong branch again.

name: VKAX Android Build (arm64)

on:
  push:
    branches: [ v100.11.5-android ]         # no main, no toys
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref to build (must be v100.11.5-android)"
        required: false
        default: v100.11.5-android

permissions:
  contents: read

concurrency:
  group: android-${{ github.ref_name }}
  cancel-in-progress: true

env:
  BRANCH_LOCK: v100.11.5-android
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  QT_RCC_SOURCE_DATE_OVERRIDE: "1"
  ANDROID_API: "25"
  HOST: aarch64-linux-android

jobs:
  android-aarch64:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout locked ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          ref: ${{ github.event.inputs.ref || env.BRANCH_LOCK }}

      - name: Guard: wrong branch = hard fail
        run: |
          set -euo pipefail
          REF_INPUT="${{ github.event.inputs.ref }}"
          REF_NAME="${GITHUB_REF_NAME:-$(git rev-parse --abbrev-ref HEAD || true)}"
          REF="${REF_INPUT:-$REF_NAME}"
          echo "ref_input=$REF_INPUT  ref_name=$REF_NAME  resolved=$REF"
          test "$REF" = "$BRANCH_LOCK" || { echo "Wrong ref ($REF), expected $BRANCH_LOCK"; exit 2; }
          ! git grep -n "android-ndk-r23c" || { git grep -n "android-ndk-r23c"; exit 3; }

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "11" }

      - name: Install tools
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf libtool pkg-config \
              python3 unzip wget curl cmake ninja-build dos2unix xz-utils file zip aapt

      - name: Determinism + OOM controls
        run: |
          set -eux
          ulimit -c 0
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct || echo 0)" >> "$GITHUB_ENV"
          echo "MAKEFLAGS=-j2" >> "$GITHUB_ENV"
          unset QMAKESPEC XQMAKESPEC QMAKEPATH QMAKEFEATURES

      - name: Android SDK/NDK r25.2 + build-tools
        env: { ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk }
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "build-tools;34.0.0" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Verify NDK toolchain and set CC/CXX
        env: { HOST: ${{ env.HOST }}, ANDROID_API: ${{ env.ANDROID_API }}, ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }} }
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CC_TGT="${HOST}${ANDROID_API}-clang"; CXX_TGT="${HOST}${ANDROID_API}-clang++"
          if [ -x "$TOOLCHAIN_BIN/$CC_TGT" ] && [ -x "$TOOLCHAIN_BIN/$CXX_TGT" ]; then
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"; echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          else
            WRAP_DIR="$RUNNER_TEMP/ndk-cc"; mkdir -p "$WRAP_DIR"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CC_TGT"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang++' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CXX_TGT"
            chmod +x "$WRAP_DIR/$CC_TGT" "$WRAP_DIR/$CXX_TGT"; echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"; echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar" >> "$GITHUB_ENV"; echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Sanity: ndk.mk hygiene
        run: |
          set -eux
          grep -q "VKAX_NDK_MK_INCLUDED" depends/packages/ndk.mk
          grep -q "ANDROID_API ?= 25"    depends/packages/ndk.mk
          ! grep -q "aarch64-linux-android25-clang" depends/packages/ndk.mk || { echo "Hardcoded 25-clang found"; exit 4; }
          test "$(grep -RIn "include .*packages/ndk.mk" depends | wc -l)" -eq 1

      - name: Boost toolset + config.guess/sub
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"
          TC="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${HOST}${ANDROID_API}-clang++"
          [ -x "$TC" ] || TC="$(command -v "${HOST}${ANDROID_API}-clang++" || command -v "$CXX")"
          printf '%s\n' 'using clang : aarch64' " : ${TC}" ' : android arm 64 ;' > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true

      - name: Build depends (NO Qt)
        run: |
          set -eux
          BUILD_TRIPLET="$(./depends/config.guess)"
          make -C depends -j2 build="$BUILD_TRIPLET" build_os=linux HOST="$HOST" host="$HOST" \
               ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" NO_QT=1 V=1

      - name: Configure (vkaxd/cli/tx)
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -f "./depends/${HOST}/share/config.site" ] && export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site" || true
          ./autogen.sh || true
          ./configure --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib CXXFLAGS="-O2 -fPIC"

      - name: Build
        run: |
          set -eux
          make -j2 src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR"/
          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: Diagnostics (always)
        if: always()
        run: |
          set -x
          echo "=== REF ==="; echo "${{ github.ref }} @ $GITHUB_SHA"
          echo "=== env (NDK/SDK) ==="; env | egrep 'ANDROID|^CC=|^CXX=|^AR=|^RANLIB|SOURCE_DATE_EPOCH|MAKEFLAGS' | sort || true
          echo "=== tool versions ==="; javac -version || true; python3 --version || true
          echo "=== file(1) ==="; file "$BUILD_DIR"/* || true
          echo "=== readelf -d ==="; for f in "$BUILD_DIR"/*; do readelf -d "$f" || true; done
          echo "=== config.log tails ==="; find . -name config.log -print -exec tail -200 {} \; || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/vkax-android-aarch64-daemons.tar.gz
# .github/workflows/build.yaml • Setvin • 2025-09-06
