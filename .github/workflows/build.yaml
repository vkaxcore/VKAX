name: VKAX Multi-Platform Build

# -------------------------------
# Trigger conditions
# -------------------------------
on:
  push:
    branches:
      - main
      - develop
      - v100.11.5*
  pull_request:
    branches:
      - develop
  workflow_dispatch:

# -------------------------------
# Global environment variables
# -------------------------------
env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_DIR: vkax-test
  BOOST_VERSION: 1_73_0
  BLS_VERSION: 1.1.0

# -------------------------------
# Required GitHub permissions
# -------------------------------
permissions:
  contents: read
  checks: write
  id-token: write

# -------------------------------
# Jobs
# -------------------------------

jobs:

  # -------------------------------
  # Job: Get version from build.properties
  # -------------------------------
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Read release and snapshot versions
      - uses: christian-draeger/read-properties@1.1.1
        id: versions
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      # Select version depending on branch or PR
      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]]; then
            version=${{ steps.versions.outputs.snapshot-version }}
          else
            version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      # Upload version artifact for later jobs
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  # -------------------------------
  # Job: Build Ubuntu x86_64
  # -------------------------------
  build-ubuntu-x86:
    name: Build Ubuntu x86_64
    runs-on: ubuntu-latest
    needs: get-version
    env:
      BUILD_VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      # Install essential dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git pkg-config autoconf automake libtool \
            libssl-dev libboost-all-dev libevent-dev libzmq3-dev protobuf-compiler libprotobuf-dev \
            qt5-default qttools5-dev-tools libqrencode-dev

      # Restore cached dependencies
      - name: Restore depend cache
        uses: actions/cache@v3
        with:
          path: depends/work
          key: ubuntu-x86-depends-${{ needs.get-version.outputs.version }}

      # Build dependencies
      - name: Build dependencies
        run: |
          cd depends
          make -j$(nproc)
          cd ..

      # Build VKAX
      - name: Build VKAX
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)

      # Upload build artifact
      - name: Upload x86 build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vkax-ubuntu-x86
          path: build/src/vkaxd

  # -------------------------------
  # Job: Build Ubuntu ARM (aarch64)
  # -------------------------------
  build-ubuntu-arm:
    name: Build Ubuntu ARM
    runs-on: ubuntu-latest
    needs: get-version
    env:
      BUILD_VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git pkg-config autoconf automake libtool \
            libssl-dev libboost-all-dev libevent-dev libzmq3-dev protobuf-compiler libprotobuf-dev \
            qt5-default qttools5-dev-tools libqrencode-dev

      # Restore cached dependencies
      - name: Restore depend cache
        uses: actions/cache@v3
        with:
          path: depends/work
          key: ubuntu-arm-depends-${{ needs.get-version.outputs.version }}

      # Build dependencies (cross-compile)
      - name: Build dependencies
        run: |
          cd depends
          make -j$(nproc) HOST=aarch64-linux-gnu
          cd ..

      # Build VKAX
      - name: Build VKAX
        run: |
          mkdir -p build-arm
          cd build-arm
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../depends/aarch64-toolchain.cmake ..
          make -j$(nproc)

      # Upload ARM build artifact
      - name: Upload ARM build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vkax-ubuntu-arm
          path: build-arm/src/vkaxd

  # -------------------------------
  # Job: Build macOS
  # -------------------------------
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: get-version
    env:
      BUILD_VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      # Install dependencies via Homebrew
      - name: Install dependencies
        run: |
          brew update
          brew install autoconf automake libtool pkg-config boost protobuf \
            qt@5 libevent zeromq qrencode

      # Set Qt5 environment variables
      - name: Set Qt5 environment
        run: |
          echo "export PATH=/usr/local/opt/qt@5/bin:$PATH" >> $GITHUB_ENV
          echo "export PKG_CONFIG_PATH=/usr/local/opt/qt@5/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      # Restore cached dependencies
      - name: Restore depend cache
        uses: actions/cache@v3
        with:
          path: depends/work
          key: macos-depends-${{ needs.get-version.outputs.version }}

      # Build dependencies
      - name: Build dependencies
        run: |
          cd depends
          make -j$(sysctl -n hw.ncpu)
          cd ..

      # Build VKAX
      - name: Build VKAX
        run: |
          mkdir -p build-macos
          cd build-macos
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(sysctl -n hw.ncpu)

      # Upload macOS build artifact
      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vkax-macos
          path: build-macos/src/vkaxd

  # -------------------------------
  # Job: Build Windows
  # -------------------------------
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: get-version
    env:
      BUILD_VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      # Setup vcpkg
      - name: Setup vcpkg
        uses: lukka/get-vcpkg@v15
        with:
          vcpkgRoot: C:/vcpkg
          overlayTriplets: ''

      # Install required libraries
      - name: Install dependencies
        run: |
          C:/vcpkg/vcpkg install boost:x64-windows protobuf:x64-windows \
            qt5:x64-windows libevent:x64-windows zeromq:x64-windows qrencode:x64-windows

      # Restore cached dependencies
      - name: Restore depend cache
        uses: actions/cache@v3
        with:
          path: depends/work
          key: windows-depends-${{ needs.get-version.outputs.version }}

      # Build dependencies
      - name: Build dependencies
        run: |
          cd depends
          mingw32-make -j%NUMBER_OF_PROCESSORS%
          cd ..

      # Build VKAX
      - name: Build VKAX
        run: |
          mkdir build-windows
          cd build-windows
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          mingw32-make -j%NUMBER_OF_PROCESSORS%

      # Upload Windows build artifact
      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vkax-windows
          path: build-windows/src/vkaxd.exe

  # -------------------------------
  # Job: Package and Release
  # -------------------------------
  package-release:
    name: Package and Release
    runs-on: ubuntu-latest
    needs:
      - build-ubuntu-x86
      - build-ubuntu-arm
      - build-windows
      - build-macos
    steps:
      - uses: actions/checkout@v4

      # Download artifacts
      - name: Download Linux x86 artifact
        uses: actions/download-artifact@v4
        with:
          name: vkax-ubuntu-x86
          path: artifacts/linux/x86

      - name: Download Linux ARM artifact
        uses: actions/download-artifact@v4
        with:
          name: vkax-ubuntu-arm
          path: artifacts/linux/arm

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: vkax-windows
          path: artifacts/windows

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: vkax-macos
          path: artifacts/macos

      # Package binaries into zip files
      - name: Package Linux x86
        run: |
          cd artifacts/linux/x86
          zip -r ../../../../vkax-linux-x86-${{ needs.get-version.outputs.version }}.zip *

      - name: Package Linux ARM
        run: |
          cd artifacts/linux/arm
          zip -r ../../../../vkax-linux-arm-${{ needs.get-version.outputs.version }}.zip *

      - name: Package Windows
        run: |
          cd artifacts/windows
          zip -r ../../vkax-windows-${{ needs.get-version.outputs.version }}.zip *

      - name: Package macOS
        run: |
          cd artifacts/macos
          zip -r ../../vkax-macos-${{ needs.get-version.outputs.version }}.zip *

      # Upload release artifacts to GitHub Release
      - name: Upload Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get-version.outputs.version }}
          name: Vkax Core ${{ needs.get-version.outputs.version }}
          files: |
            vkax-linux-x86-${{ needs.get-version.outputs.version }}.zip
            vkax-linux-arm-${{ needs.get-version.outputs.version }}.zip
            vkax-windows-${{ needs.get-version.outputs.version }}.zip
            vkax-macos-${{ needs.get-version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
