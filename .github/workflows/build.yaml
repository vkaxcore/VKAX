name: CI • Production builds (Android + Native)

on:
  push:
    branches: ["v100.11.5-android"]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
  ANDROID_HOME: ${{ github.workspace }}/.android-sdk
  ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  ANDROID_NDK_VERSION: "23.1.7779620"

jobs:
  # ───────────────────────── ANDROID (matrix: abis) ─────────────────────────
  android:
    name: android • build • ${{ matrix.abi }} • ubuntu-24.04 • api 34 • ndk 23.1.7779620
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a]
        include:
          - abi: arm64-v8a
            host: aarch64-linux-android
          - abi: armeabi-v7a
            host: arm-linux-androideabi
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Cache (depends sources + ccache)
        uses: ./.github/cache
        with:
          key: ${{ runner.os }}-android-${{ matrix.abi }}-23.1.7779620-${{ hashFiles('depends/packages/*.mk') }}
          paths: |
            depends/sources
            ~/.ccache
          restore_keys: ${{ runner.os }}-android-${{ matrix.abi }}-

      - name: Prepare SDK + cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            tmp="$(mktemp -d)"
            curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
            unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          {
            echo "$ANDROID_SDK_ROOT/platform-tools"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
          } >> "$GITHUB_PATH"

      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-34" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Build depends (${{ matrix.host }})
        shell: bash
        env:
          CCACHE_DIR: ~/.ccache
          CCACHE_COMPRESS: "1"
          CCACHE_MAXSIZE: 750M
        run: |
          set -euo pipefail
          test -d depends
          J="$(nproc 2>/dev/null || echo 2)"; [ "$J" -gt 8 ] && J=8
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          make -C depends -j"$J" HOST=${{ matrix.host }} ANDROID_SDK="${ANDROID_SDK}" ANDROID_NDK="${ANDROID_NDK}"

      - name: Build native Android targets
        shell: bash
        env:
          CCACHE_DIR: ~/.ccache
          CCACHE_COMPRESS: "1"
          CCACHE_MAXSIZE: 750M
        run: |
          set -euo pipefail
          ANDROID_API_LEVEL=34
          J="$(nproc 2>/dev/null || echo 2)"; [ "$J" -gt 8 ] && J=8
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          make -j"$J" V=1 HOST=${{ matrix.host }} ANDROID_API_LEVEL=${ANDROID_API_LEVEL} vkax-d vkax-cli || true

      - name: Package Qt Android (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_apk
          QMAKE=$(find depends -type f -name 'qmake' -o -name 'qmake-qt5' 2>/dev/null | head -n1 || true)
          ANDROIDDEPLOYQT=$(find depends -type f -name 'androiddeployqt' 2>/dev/null | head -n1 || true)
          if [ -n "$QMAKE" ] && [ -n "$ANDROIDDEPLOYQT" ] && [ -f src/qt/vkax-qt.pro ]; then
            mkdir -p build-qt-android && cd build-qt-android
            "$QMAKE" ../src/qt/vkax-qt.pro ANDROID_ABIS=${{ matrix.abi }} ANDROID_PLATFORM=android-34 || true
            make -j"$(nproc 2>/dev/null || echo 2)" || true
            JSON=$(find . -name android_deployment_settings.json -print -quit || true)
            if [ -n "$JSON" ]; then
              "$ANDROIDDEPLOYQT" --input "$JSON" --output ./android_deploy --android-platform android-34 --gradle --release || true
              find ./android_deploy -type f -name '*.apk' -exec cp -a {} ../dist_apk/ \; || true
            fi
          fi

      - name: Collect Android artifacts and version
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_android
          shopt -s nullglob
          for f in dist_apk/*.apk; do cp -a "$f" dist_android/; done
          # Prefer the tag name when running on a tag; fall back to run/build identifiers
          if [[ "${GITHUB_REF:-}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="build-${GITHUB_RUN_NUMBER}-${GITHUB_SHA:0:7}"
          fi
          i=0
          for f in dist_android/*.apk; do
            i=$((i+1))
            base="vkax-${VERSION}-${{ matrix.abi }}"
            [ $i -gt 1 ] && base="${base}-${i}"
            mv "$f" "dist_android/${base}.apk"
          done
          # produce checksums and ensure any .asc signatures are present next step
          if compgen -G "dist_android/*.apk" > /dev/null; then
            (cd dist_android && sha256sum *.apk > SHA256SUMS.txt)
          fi

      - name: ccache stats
        shell: bash
        run: |
          ccache -s || true
          { echo "### ccache (${{ matrix.abi }})"; ccache -s || true; } >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ matrix.abi }}
          path: |
            dist_android/**/*
            dist_android/*.apk.asc
            dist_android/SHA256SUMS.txt
          if-no-files-found: warn

      - name: ccache stats
        shell: bash
        run: |
          ccache -s || true
          { echo "### ccache (${{ matrix.abi }})"; ccache -s || true; } >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ matrix.abi }}
          path: dist_android/**/*
          if-no-files-found: warn

  # ───────────────────────── ANDROID LEGACY ─────────────────────────
  android_legacy:
    name: android • legacy • ubuntu-22.04 • api 15 • ndk 23.1.7779620
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Prepare SDK + cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          tmp="$(mktemp -d)"
          curl -fsSL "${ANDROID_CLT_LINUX}" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest" || true
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages (legacy)
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-15" "ndk;23.1.7779620"

      - name: Build depends (legacy ARMv7)
        shell: bash
        run: |
          set -euo pipefail
          test -d depends
          J=2
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/23.1.7779620"
          make -C depends -j"$J" HOST=arm-linux-androideabi ANDROID_SDK="${ANDROID_SDK}" ANDROID_NDK="${ANDROID_NDK}" || true

      - name: Upload Android legacy artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-legacy
          path: dist_android_legacy/**/*
          if-no-files-found: warn

  # ───────────────────────── WINDOWS CROSS (MINGW) ─────────────────────────
  native-windows-cross:
    name: native-windows-cross • depends • ubuntu-24.04 • x86_64-w64-mingw32
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Cache (depends sources)
        uses: ./.github/cache
        with:
          key: ${{ runner.os }}-mingw-${{ hashFiles('depends/packages/*.mk') }}
          paths: depends/sources

      - name: Build depends (x86_64-w64-mingw32)
        shell: bash
        run: |
          set -euo pipefail
          test -d depends
          ulimit -c 0
          J="$(nproc 2>/dev/null || echo 2)"; [ "$J" -gt 8 ] && J=8
          make -C depends -j"$J" HOST=x86_64-w64-mingw32 || true

      - name: Upload MinGW depends workdir
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mingw-depends-workdir
          path: |
            depends/work/**/.stamp_built
            depends/packages/*.mk
          if-no-files-found: warn

  # ───────────────────────── macOS ─────────────────────────
  macos:
    name: native • macOS • macos-13
    runs-on: macos-13
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Resolve Homebrew cmake tap conflict
        shell: bash
        run: |
          set -euo pipefail
          brew update-reset || true
          brew uninstall --ignore-dependencies cmake || true
          brew install cmake
          brew doctor || true

      - name: Build (best-effort)
        shell: bash
        run: |
          set -euo pipefail
          if [ -x contrib/ci/macos.sh ]; then
            ./contrib/ci/macos.sh || true
          elif [ -f CMakeLists.txt ]; then
            cmake -S . -B build -G Ninja
            cmake --build build -j"$(sysctl -n hw.ncpu)" || true
          else
            echo "No macOS build script or CMakeLists.txt; skipping"
          fi

  # ───────────────────────── Linux (Ubuntu) ─────────────────────────
  ubuntu:
    name: native • ubuntu • ${{ matrix.name }}
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            runs_on: ubuntu-22.04
            triple: x86_64-pc-linux-gnu
          - name: ubuntu-24-amd64
            runs_on: ubuntu-24.04
            triple: x86_64-pc-linux-gnu
          - name: ubuntu-22-arm64
            runs_on: ubuntu-22.04-arm
            triple: aarch64-linux-gnu
          - name: ubuntu-24-arm64
            runs_on: ubuntu-24.04-arm
            triple: aarch64-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Build vendored depends (Linux)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d depends ]; then
            sudo apt-get update -qq
            sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3 || true
            J="$(nproc 2>/dev/null || echo 2)"; [ "$J" -gt 8 ] && J=8
            make -C depends -j"$J" HOST=${{ matrix.triple }} || true
          else
            echo "::notice::No depends/ dir; skipping vendored deps."
          fi

      - name: CMake build (Linux)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f CMakeLists.txt ]; then
            echo "::notice::No CMakeLists.txt; skipping."; exit 0
          fi
          if [ -d "depends/${{ matrix.triple }}" ]; then
            export CMAKE_PREFIX_PATH="depends/${{ matrix.triple }}"
          else
            echo "::warning::Vendored depends prefix not found; continuing without depends."
          fi
          cmake -S . -B build -G Ninja
          cmake --build build -j"$(nproc || echo 2)" || true

  # ───────────────────────── Windows (MSVC) ─────────────────────────
  windows:
    name: native • windows • windows-2022
    runs-on: windows-2022
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup MSVC env
        uses: ilammy/msvc-dev-cmd@v1

      - name: CMake build (MSVC)
        shell: powershell
        run: |
          if (Test-Path .\CMakeLists.txt) {
            cmake -S . -B build -G "Visual Studio 17 2022" -A x64
            cmake --build build --config Release -- /m:2
          } else {
            Write-Output "::notice::No CMakeLists.txt; skipping."
          }

  # ───────────────────────── Depends audit (manual) ─────────────────────────
  depends_audit:
    name: depends • audit
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Produce depends packages summary
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ci_reports
          out=ci_reports/depends_audit.txt
          echo "Depends audit - $(date)" > "$out"
          echo "" >> "$out"
          if [ -d depends/packages ]; then
            for mk in depends/packages/*.mk; do
              [ -f "$mk" ] || continue
              echo "---- $(basename "$mk")" >> "$out"
              echo "path: $mk" >> "$out"
              echo "" >> "$out"
              echo "DEPENDS lines:" >> "$out"
              grep -E '^DEPENDS' "$mk" -n || echo "(none)" >> "$out" || true
              echo "" >> "$out"
              echo "HOST / platform hints (android,aarch64,arm,mingw,windows,darwin,apple):" >> "$out"
              grep -nE 'android|aarch64|arm|mingw|windows|darwin|apple|HOST|TARGET|CROSS' "$mk" || echo "(none)" >> "$out" || true
              echo "" >> "$out"
            done
          else
            echo "depends/packages not present" >> "$out"
          fi

          echo "Built .stamp_built packages (depends/work):" >> "$out"
          if [ -d depends/work ]; then
            find depends/work -type f -name .stamp_built -print0 | xargs -0 -n1 dirname | xargs -n1 basename | sort -u >> "$out" || true
          else
            echo "(depends/work not present)" >> "$out"
          fi

          tar -czf ci_reports.tar.gz ci_reports || true

      - name: Upload depends audit report
        uses: actions/upload-artifact@v4
        with:
          name: depends-audit
          path: ci_reports.tar.gz
          if-no-files-found: warn

  # ───────────────────────── Release (tags) ─────────────────────────
  release:
    name: release • tag publish
    if: startsWith(github.ref, 'refs/tags/')
    needs: [android, android_legacy, native-windows-cross, macos, ubuntu, windows]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets
          merge-multiple: true

      - name: Filter release files and compute checksums
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release_filtered
          shopt -s nullglob globstar
          # Binaries
          for f in release_assets/**/*.apk; do cp -a "$f" release_filtered/; done
          for f in release_assets/**/*.{zip,tar.gz,exe,dmg,AppImage,deb,rpm}; do cp -a "$f" release_filtered/ 2>/dev/null || true; done
          # Detached signatures
          for f in release_assets/**/*.asc; do cp -a "$f" release_filtered/; done
          # Checksums (exclude .asc to avoid hashing signatures)
          if compgen -G "release_filtered/*" > /dev/null; then
            find release_filtered -maxdepth 1 -type f ! -name "*.asc" -print0 | xargs -0 -r sha256sum > release_filtered/SHA256SUMS.txt || true
          else
            echo "::warning::No releasable files found in artifacts"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: VKAX ${{ github.ref_name }}
          body: |
            Automated CI release for tag ${{ github.ref_name }}.
          files: |
            release_filtered/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
