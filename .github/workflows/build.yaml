name: VKAX Multi-Platform Build

on:
  push:
    branches:
      - main
      - develop
      - v100.11.5*
  pull_request:
    branches:
      - develop
  workflow_dispatch:

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_DIR: vkax-test
  BOOST_VERSION: 1_73_0
  BLS_VERSION: 1.1.0

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: christian-draeger/read-properties@1.1.1
        id: versions
        with:
          path: build.properties
          properties: 'release-version snapshot-version'
      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]]; then
            version=${{ steps.versions.outputs.snapshot-version }}
          else
            version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  # ---------------- UBUNTU x86_64 ----------------
  build-ubuntu-x86:
    name: Ubuntu x86_64 Build
    needs: get-version
    strategy:
      matrix:
        version: [20.04,22.04]
    runs-on: ubuntu-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .
      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential g++-7 gcc-7 libtool autotools-dev automake pkg-config python3 bsdmainutils cmake \
                                  libsodium-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev qtbase5-dev libqt5svg5-dev \
                                  libdb-dev libdb++-dev g++-mingw-w64-x86-64
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 100
      - name: Cache Depends
        uses: actions/cache@v3
        with:
          path: |
            depends/build
            depends/x86_64-pc-linux-gnu
          key: vkax-depends-${{ matrix.version }}-x86_64-${{ hashFiles('depends/*') }}
          restore-keys: |
            vkax-depends-x86_64-
      - name: Build depends
        run: |
          HOST=x86_64-pc-linux-gnu
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          export CFLAGS="-fcommon -Wno-stringop-overflow"
          export CXXFLAGS="$CFLAGS"
          make -C depends -j$(nproc) HOST=$HOST BLS_VERSION=${BLS_VERSION}
      - name: Configure VKAX
        run: |
          ./autogen.sh
          HOST=x86_64-pc-linux-gnu
          ./configure --prefix=$(pwd)/depends/$HOST \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      --enable-upnp-default \
                      --with-zmq \
                      --with-gui=qt5 CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS"
      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip $TEST_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/ || true
          cp src/{vkax-cli,vkaxd,qt/vkax-qt} $TEST_DIR/ || true
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} ${BUILD_DIR}_not_strip/ || true
          strip $BUILD_DIR/* || echo "strip failed — skipping"
      - name: Generate checksum and compress
        run: |
          mkdir -p $COMPRESS_DIR
          for DIR in $BUILD_DIR ${BUILD_DIR}_not_strip; do
            cd $DIR
            sha256sum * > checksums.txt || true
            tar -czf ../$COMPRESS_DIR/$(basename $DIR)-${{ matrix.version }}-x86_64-${{ needs.get-version.outputs.version }}.tar.gz *
            cd ..
          done
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-ubuntu-${{ matrix.version }}-x86_64-${{ needs.get-version.outputs.version }}
          path: $COMPRESS_DIR

  # ---------------- UBUNTU ARM64 ----------------
  build-ubuntu-arm:
    name: Ubuntu ARM64 Build
    needs: get-version
    strategy:
      matrix:
        version: [20.04,22.04]
    runs-on: ubuntu-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .
      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential g++-7 gcc-7 libtool autotools-dev automake pkg-config python3 bsdmainutils cmake \
                                  libsodium-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev qtbase5-dev libqt5svg5-dev \
                                  libdb-dev libdb++-dev g++-aarch64-linux-gnu
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 100
      - name: Cache Depends
        uses: actions/cache@v3
        with:
          path: |
            depends/build
            depends/aarch64-linux-gnu
          key: vkax-depends-${{ matrix.version }}-arm64-${{ hashFiles('depends/*') }}
          restore-keys: |
            vkax-depends-arm64-
      - name: Build depends (ARM64)
        run: |
          HOST=aarch64-linux-gnu
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          export CFLAGS="-fcommon -Wno-stringop-overflow -march=armv8-a"
          export CXXFLAGS="$CFLAGS"
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          make -C depends -j$(nproc) HOST=$HOST BLS_VERSION=${BLS_VERSION}
      - name: Configure VKAX (ARM64)
        run: |
          ./autogen.sh
          HOST=aarch64-linux-gnu
          ./configure --prefix=$(pwd)/depends/$HOST \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      --enable-upnp-default \
                      --with-zmq \
                      --with-gui=qt5 \
                      CFLAGS="$CFLAGS" \
                      CXXFLAGS="$CXXFLAGS" \
                      CC="$CC" \
                      CXX="$CXX"
      - name: Build Binary (ARM64)
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip $TEST_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/ || true
          cp src/{vkax-cli,vkaxd,qt/vkax-qt} $TEST_DIR/ || true
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} ${BUILD_DIR}_not_strip/ || true
          strip $BUILD_DIR/* || echo "strip failed — skipping"
      - name: Generate checksum and compress (ARM64)
        run: |
          mkdir -p $COMPRESS_DIR
          for DIR in $BUILD_DIR ${BUILD_DIR}_not_strip; do
            cd $DIR
            sha256sum * > checksums.txt || true
            tar -czf ../$COMPRESS_DIR/$(basename $DIR)-${{ matrix.version }}-arm64-${{ needs.get-version.outputs.version }}.tar.gz *
            cd ..
          done
      - name: Upload Artifacts (ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: vkax-ubuntu-${{ matrix.version }}-arm64-${{ needs.get-version.outputs.version }}
          path: $COMPRESS_DIR

  # ---------------- macOS ----------------
  build-macos:
    name: macOS x86_64 Build
    needs: get-version
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .
      - name: Install Dependencies
        run: |
          brew update
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python qt@5 berkeley-db@4 immer
          export BDB_INCLUDE_DIR=$(brew --prefix berkeley-db@4)/include
          export BDB_LIB_DIR=$(brew --prefix berkeley-db@4)/lib
          export QT_PATH=$(brew --prefix qt@5)
          export BOOST_ROOT=$(pwd)/depends/boost
          export PATH=$QT_PATH/bin:$PATH
          export PKG_CONFIG_PATH=$QT_PATH/lib/pkgconfig:$PKG_CONFIG_PATH
      - name: Configure VKAX
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-apple-darwin20.6.0 \
                      --with-incompatible-bdb \
                      --enable-upnp-default \
                      --with-zmq \
                      --with-gui=qt5 \
                      CXXFLAGS="-I$BDB_INCLUDE_DIR -I$QT_PATH/include" \
                      LDFLAGS="-L$BDB_LIB_DIR -L$QT_PATH/lib" \
                      QT_SELECT=5
      - name: Build Binary
        run: |
          make -j$(sysctl -n hw.ncpu)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/ || true
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} ${BUILD_DIR}_not_strip/ || true
      - name: Generate DMG
        run: |
          make deploy || true
          mkdir -p macos-dmg
          mv vkax-Qt.dmg macos-dmg/ || true
          cd macos-dmg
          shasum -a 256 *.dmg > checksums.txt || true
          cd ..

  # ---------------- WINDOWS x64 ----------------
  build-windows:
    name: Windows x64 Build
    needs: get-version
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .
      - name: Install Dependencies
        run: |
          choco install mingw -y
          choco install nsis -y
          choco install cmake -y
      - name: Configure VKAX
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-w64-mingw32 \
                      --with-incompatible-bdb \
                      --enable-upnp-default \
                      --with-zmq \
                      --with-gui=qt5
      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip
          cp src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} $BUILD_DIR/ || true
          mv src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} ${BUILD_DIR}_not_strip/ || true
