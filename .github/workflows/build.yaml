name: Build VKAX across all runners
true:
  push:
    branches:
    - v100.11.5-android
    - '**'
  pull_request:
    branches:
    - '**'
  workflow_dispatch: null
concurrency:
  group: build-all-${{ github.ref }}
  cancel-in-progress: false
env:
  FALLBACK_DOWNLOAD_PATH: https://explorer.yerbas.org/depends/
jobs:
  linux:
    name: "linux \u2022 ${{ matrix.os }} \u2022 ${{ matrix.host }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-22.04
        - ubuntu-24.04
        host:
        - x86_64-pc-linux-gnu
        include:
        - os: ubuntu-24.04
          host: aarch64-linux-gnu
          extra_apt: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
    steps:
    - name: Checkout (pinned ref)
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
        ref: v100.11.5-android
    - name: Prep toolchain
      if: matrix.extra_apt != ''
      run: 'set -euo pipefail

        sudo apt-get update -y

        sudo apt-get install -y ${{ matrix.extra_apt }}

        '
    - name: Initialize submodules
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        git submodule sync --recursive

        git submodule update --init --recursive --force --depth 1

        '
    - name: Autotools bootstrap
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        ./autogen.sh

        '
    - name: "depends \u2022 build"
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nCORES=$(nproc || getconf\
        \ _NPROCESSORS_ONLN || echo 2)\nstdbuf -oL -eL make -C depends -j\"${CORES}\"\
        \ HOST=\"${HOST}\" 2>&1 | tee depends.build.log\ntest -f \"depends/${HOST}/share/config.site\"\
        \ || {\n  echo \"::error title=depends failed::missing config.site for ${HOST}\"\
        \ >&2\n  # show last logs if any\n  shopt -s nullglob || true\n  logs=(depends/build-*.log)\n\
        \  if [ ${#logs[@]} -gt 0 ]; then\n    tail -n 200 \"${logs[@]}\" || true\n\
        \  else\n    echo \"no per-package logs found under depends/\" >&2\n    find\
        \ depends -type f -name '*.log' | tail -n 50 || true\n  fi\n  exit 1\n}\n"
    - name: configure
      env:
        HOST: ${{ matrix.host }}
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"

        ./configure --disable-tests --disable-bench --without-gui

        '
    - name: build
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)

        stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

        '
    - name: stage+package artifacts
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nout=\"dist/${HOST}\"\
        \nmkdir -p \"${out}\"\n# Collect common binaries if present\nfor p in src/vkaxd\
        \ src/vkax-cli src/qt/vkax-qt src/*.exe src/qt/*.exe; do\n  if [ -f \"$p\"\
        \ ]; then\n    cp -v \"$p\" \"${out}/\"\n  fi\ndone\n# Ensure we actually\
        \ have artifacts\nif ! compgen -G \"${out}/*\" > /dev/null; then\n  echo \"\
        ::error::no binaries found after build\"\n  echo \"tree src:\"; ls -laR src\
        \ || true\n  echo \"tree src/qt:\"; ls -laR src/qt || true\n  exit 1\nfi\n\
        (cd \"${out}\" && sha256sum * > SHA256SUMS)\n"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vkax-${{ matrix.host }}-${{ matrix.os }}
        path: dist/${{ matrix.host }}
        if-no-files-found: error
  mingw-cross:
    name: "linux \u2022 mingw-cross \u2022 ${{ matrix.host }}"
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        host:
        - x86_64-w64-mingw32
        include:
        - host: i686-w64-mingw32
          experimental: true
    steps:
    - name: Checkout (pinned ref)
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
        ref: v100.11.5-android
    - name: Install mingw toolchain
      run: 'set -euo pipefail

        sudo apt-get update -y

        sudo apt-get install -y mingw-w64 g++-mingw-w64 make automake libtool pkg-config
        zip unzip

        '
    - name: Use POSIX threading model
      run: 'set -euo pipefail

        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
        || true

        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        || true

        sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
        || true

        sudo update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
        || true

        '
    - name: Initialize submodules
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        git submodule sync --recursive

        git submodule update --init --recursive --force --depth 1

        '
    - name: Autotools bootstrap
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        ./autogen.sh

        '
    - name: "depends \u2022 build"
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nCORES=$(nproc || getconf\
        \ _NPROCESSORS_ONLN || echo 2)\nstdbuf -oL -eL make -C depends -j\"${CORES}\"\
        \ HOST=\"${HOST}\" 2>&1 | tee depends.build.log\ntest -f \"depends/${HOST}/share/config.site\"\
        \ || {\n  echo \"::error title=depends failed::missing config.site for ${HOST}\"\
        \ >&2\n  shopt -s nullglob || true\n  logs=(depends/build-*.log)\n  if [ ${#logs[@]}\
        \ -gt 0 ]; then\n    tail -n 200 \"${logs[@]}\" || true\n  else\n    echo\
        \ \"no per-package logs found under depends/\" >&2\n    find depends -type\
        \ f -name '*.log' | tail -n 50 || true\n  fi\n  exit 1\n}\n"
    - name: configure (mingw)
      env:
        HOST: ${{ matrix.host }}
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"

        ./configure --host="${HOST}" --disable-tests --disable-bench --without-gui

        '
    - name: build
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)

        stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

        '
    - name: stage+package artifacts
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nout=\"dist/${HOST}\"\
        \nmkdir -p \"${out}\"\nfor p in src/*.exe src/qt/*.exe; do\n  if [ -f \"$p\"\
        \ ]; then\n    cp -v \"$p\" \"${out}/\"\n  fi\ndone\nif ! compgen -G \"${out}/*\"\
        \ > /dev/null; then\n  echo \"::error::no windows binaries found\"\n  ls -laR\
        \ src || true\n  exit 1\nfi\n(cd \"${out}\" && sha256sum * > SHA256SUMS)\n"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vkax-${{ matrix.host }}-mingw-cross
        path: dist/${{ matrix.host }}
        if-no-files-found: error
  windows-msys2:
    name: "windows \u2022 msys2 mingw64 \u2022 depends\u2192autotools"
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout (pinned ref)
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
        ref: v100.11.5-android
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        release: false
        update: true
        install: base-devel git zip unzip wget tar patch automake autoconf libtool
          pkg-config mingw-w64-x86_64-toolchain mingw-w64-x86_64-python
    - name: Env
      run: 'set -euo pipefail

        echo "MINGW_PREFIX=/mingw64" >> $GITHUB_ENV

        echo "PATH=/mingw64/bin:$PATH" >> $GITHUB_ENV

        '
    - name: Initialize submodules
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        git submodule sync --recursive

        git submodule update --init --recursive --force --depth 1

        '
    - name: Autotools bootstrap
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        ./autogen.sh

        '
    - name: "depends \u2022 build (msys2)"
      env:
        HOST: x86_64-w64-mingw32
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nCORES=$(nproc || echo\
        \ 2)\nmake -C depends -j\"${CORES}\" HOST=\"${HOST}\" 2>&1 | tee depends.build.log\n\
        if [ ! -f \"depends/${HOST}/share/config.site\" ]; then\n  echo \"::error\
        \ title=depends failed::missing config.site for ${HOST}\" >&2\n  shopt -s\
        \ nullglob || true\n  logs=(depends/build-*.log)\n  if [ ${#logs[@]} -gt 0\
        \ ]; then\n    tail -n 200 \"${logs[@]}\" || true\n  else\n    echo \"No depends/build-*.log\
        \ to show.\" >&2\n  fi\n  exit 1\nfi"
    - name: configure
      env:
        HOST: x86_64-w64-mingw32
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        export PATH="/mingw64/bin:$PATH"

        export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"

        ./configure --host="${HOST}" --disable-tests --disable-bench --without-gui

        '
    - name: build
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        CORES=$(nproc || echo 2)

        make -j"${CORES}" 2>&1 | tee build.log

        '
    - name: stage+package artifacts
      env:
        HOST: x86_64-w64-mingw32
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nout=\"dist/${HOST}\"\
        \nmkdir -p \"${out}\"\nfor p in src/*.exe src/qt/*.exe; do\n  if [ -f \"$p\"\
        \ ]; then\n    cp -v \"$p\" \"${out}/\"\n  fi\ndone\nif ! compgen -G \"${out}/*\"\
        \ > /dev/null; then\n  echo \"::error::no windows binaries found\"\n  ls -laR\
        \ src || true\n  exit 1\nfi\n(cd \"${out}\" && sha256sum * > SHA256SUMS ||\
        \ true)\n"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vkax-x86_64-w64-mingw32-windows-msys2
        path: dist/x86_64-w64-mingw32
        if-no-files-found: error
  macos:
    name: "macos \u2022 ${{ matrix.os }} \u2022 ${{ matrix.host }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-13
          host: x86_64-apple-darwin19
          mac_deploy: '10.15'
        - os: macos-14
          host: aarch64-apple-darwin
          mac_deploy: '11.0'
    steps:
    - name: Checkout (pinned ref)
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
        ref: v100.11.5-android
    - name: Initialize submodules
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        git submodule sync --recursive

        git submodule update --init --recursive --force --depth 1

        '
    - name: Autotools bootstrap
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        ./autogen.sh

        '
    - name: "depends \u2022 build"
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nCORES=$(sysctl -n hw.ncpu\
        \ || echo 3)\nmake -C depends -j\"${CORES}\" HOST=\"${HOST}\" 2>&1 | tee depends.build.log\n\
        test -f \"depends/${HOST}/share/config.site\" || {\n  echo \"::error title=depends\
        \ failed::missing config.site for ${HOST}\" >&2\n  tail -n 200 depends/build-*.log\
        \ || true\n  exit 1\n}\n"
    - name: configure
      env:
        HOST: ${{ matrix.host }}
        MACOSX_DEPLOYMENT_TARGET: ${{ matrix.mac_deploy }}
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"

        ./configure --disable-tests --disable-bench --without-gui

        '
    - name: build
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        CORES=$(sysctl -n hw.ncpu || echo 3)

        make -j"${CORES}" 2>&1 | tee build.log

        '
    - name: stage+package artifacts
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nout=\"dist/${HOST}\"\
        \nmkdir -p \"${out}\"\nfor p in src/vkaxd src/vkax-cli src/qt/vkax-qt; do\n\
        \  if [ -f \"$p\" ]; then\n    cp -v \"$p\" \"${out}/\"\n  fi\ndone\nif !\
        \ compgen -G \"${out}/*\" > /dev/null; then\n  echo \"::error::no binaries\
        \ found\"\n  ls -laR src || true\n  exit 1\nfi\n(cd \"${out}\" && shasum -a\
        \ 256 * > SHA256SUMS)\n"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vkax-${{ matrix.host }}-${{ matrix.os }}
        path: dist/${{ matrix.host }}
        if-no-files-found: error
  android:
    name: "android \u2022 depends\u2192autotools \u2022 ${{ matrix.host }}"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - host: aarch64-linux-android
          abi: arm64-v8a
          api: '21'
        - host: arm-linux-androideabi
          abi: armeabi-v7a
          api: '19'
    steps:
    - name: Checkout (pinned ref)
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
        ref: v100.11.5-android
    - name: Install Android cmdline-tools + NDK r23b
      id: android
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        ANDROID_HOME="$PWD/android-sdk"

        ANDROID_SDK_ROOT="$ANDROID_HOME"

        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV

        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV

        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"

        curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        -o cmdline-tools.zip

        unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"

        mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT"
        "platform-tools" >/dev/null

        yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT"
        "ndk;23.1.7779620" >/dev/null

        echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/23.1.7779620" >> $GITHUB_ENV

        echo "ANDROID_API_LEVEL=${{ matrix.api }}" >> $GITHUB_ENV

        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

        echo "$ANDROID_SDK_ROOT/ndk/23.1.7779620/toolchains/llvm/prebuilt/linux-x86_64/bin"
        >> $GITHUB_PATH

        '
    - name: Initialize submodules
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        git submodule sync --recursive

        git submodule update --init --recursive --force --depth 1

        '
    - name: Autotools bootstrap
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        ./autogen.sh

        '
    - name: "depends \u2022 build"
      env:
        HOST: ${{ matrix.host }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nCORES=$(nproc || echo\
        \ 2)\nstdbuf -oL -eL make -C depends -j\"${CORES}\" HOST=\"${HOST}\" ANDROID_SDK=\"\
        $ANDROID_SDK_ROOT\" ANDROID_NDK=\"$ANDROID_NDK\" ANDROID_API_LEVEL=\"${ANDROID_API_LEVEL}\"\
        \ 2>&1 | tee depends.build.log\ntest -f \"depends/${HOST}/share/config.site\"\
        \ || {\n  echo \"::error title=depends failed::missing config.site for ${HOST}\"\
        \ >&2\n  shopt -s nullglob || true\n  logs=(depends/build-*.log)\n  if [ ${#logs[@]}\
        \ -gt 0 ]; then\n    tail -n 200 \"${logs[@]}\" || true\n  else\n    echo\
        \ \"no per-package logs found under depends/\" >&2\n    find depends -type\
        \ f -name '*.log' | tail -n 50 || true\n  fi\n  exit 1\n}\n"
    - name: configure
      env:
        HOST: ${{ matrix.host }}
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"

        ./configure --host="${HOST}" --disable-tests --disable-bench --without-gui

        '
    - name: build
      run: 'set -euo pipefail

        cd "${GITHUB_WORKSPACE:-.}"

        CORES=$(nproc || echo 2)

        stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

        '
    - name: stage+package artifacts
      env:
        HOST: ${{ matrix.host }}
        ABI: ${{ matrix.abi }}
      run: "set -euo pipefail\ncd \"${GITHUB_WORKSPACE:-.}\"\nout=\"dist/${HOST}-${ABI}\"\
        \nmkdir -p \"${out}\"\n# possible locations\nfor p in src/vkaxd src/vkax-cli\
        \ build/*/vkaxd build/*/vkax-cli; do\n  if [ -f \"$p\" ]; then\n    cp -v\
        \ \"$p\" \"${out}/\"\n  fi\ndone\nif ! compgen -G \"${out}/*\" > /dev/null;\
        \ then\n  echo \"::error::no android binaries found\"\n  find . -maxdepth\
        \ 3 -type f -name 'vkax*' -print || true\n  exit 1\nfi\n(cd \"${out}\" &&\
        \ sha256sum * > SHA256SUMS)\n"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vkax-${{ matrix.host }}-${{ matrix.abi }}
        path: dist/${{ matrix.host }}-${{ matrix.abi }}
        if-no-files-found: error
  netbsd:
    name: "linux \u2022 netbsd-cross \u2022 experimental"
    runs-on: ubuntu-24.04
    continue-on-error: true
    steps:
    - name: Checkout (pinned ref)
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
        ref: v100.11.5-android
    - name: Print note
      run: 'echo "NetBSD cross build is experimental and may require custom toolchains
        not preinstalled."

        '
