name: build-all

on:
  push:
    branches: [ main, master, v100.11.5-android ]
  pull_request:
    branches: [ main, master, v100.11.5-android ]
  workflow_dispatch: {}

env:
  FALLBACK_DOWNLOAD_PATH: https://explorer.yerbas.org/depends/
  ANDROID_NDK_VERSION: 23.1.7779620
  ANDROID_API_LEVEL: 34

concurrency:
  group: build-all-${{ github.ref }}-${{ github.sha }}
  cancel-in-progress: false

jobs:

  linux:
    name: linux • ${{ matrix.os }} • depends→autotools
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        include:
          - os: ubuntu-22.04
            host: x86_64-pc-linux-gnu
          - os: ubuntu-24.04
            host: x86_64-pc-linux-gnu
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1
      - name: Install toolchain
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y build-essential autoconf automake libtool pkg-config bison python3 curl zip
      - name: Autogen
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
      - name: Build depends (${{ matrix.host }})
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -C depends -j${CORES} HOST=${{ matrix.host }} V=1 2>&1 | tee depends.build.log
          test -f "depends/${{ matrix.host }}/share/config.site" || { tail -n 200 depends/build-*.log || true; exit 1; }
      - name: Configure (no wallet/gui)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CONFIG_SITE="$PWD/depends/${{ matrix.host }}/share/config.site" \
          ./configure --disable-tests --disable-bench --disable-wallet --without-gui
      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -j${CORES} 2>&1 | tee build.log
      - name: Stage + SHA256
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p "dist/${{ matrix.host }}"
          set +e
          cp -av src/vkaxd src/vkax-cli src/qt/vkax-qt "dist/${{ matrix.host }}/" 2>/dev/null || true
          set -e
          ls -la "dist/${{ matrix.host }}" || true
          { find "dist/${{ matrix.host }}" -type f -maxdepth 1 | xargs -r sha256sum > "dist/${{ matrix.host }}/SHA256SUMS"; } || true
          test -s "dist/${{ matrix.host }}/SHA256SUMS" || { echo "No binaries staged"; find src -maxdepth 2 -type f | sed -n '1,200p'; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.os }}-${{ matrix.host }}
          path: dist/${{ matrix.host }}/

  mingw-cross:
    name: windows • mingw64 cross on ubuntu • depends→autotools
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1
      - name: Install cross toolchain
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y autoconf automake libtool pkg-config bison python3 curl zip \
                                  g++-mingw-w64-x86-64 mingw-w64 mingw-w64-tools
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
      - name: Autogen
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
      - name: Build depends (x86_64-w64-mingw32)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -C depends -j${CORES} HOST=x86_64-w64-mingw32 V=1 2>&1 | tee depends.build.log
          test -f "depends/x86_64-w64-mingw32/share/config.site" || { tail -n 200 depends/build-*.log || true; exit 1; }
      - name: Configure (no wallet/gui)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CONFIG_SITE="$PWD/depends/x86_64-w64-mingw32/share/config.site" \
          ./configure --host=x86_64-w64-mingw32 --disable-tests --disable-bench --disable-wallet --without-gui
      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -j${CORES} 2>&1 | tee build.log
      - name: Stage + SHA256
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p dist/x86_64-w64-mingw32
          set +e
          cp -av src/*.exe "dist/x86_64-w64-mingw32/" 2>/dev/null || true
          set -e
          ls -la dist/x86_64-w64-mingw32 || true
          { find dist/x86_64-w64-mingw32 -type f -maxdepth 1 | xargs -r sha256sum > dist/x86_64-w64-mingw32/SHA256SUMS; } || true
          test -s dist/x86_64-w64-mingw32/SHA256SUMS || { echo "No binaries staged"; find src -maxdepth 2 -type f | sed -n '1,200p'; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: windows-cross-mingw64
          path: dist/x86_64-w64-mingw32/

  windows-msys2:
    name: windows • msys2 mingw64 • depends→autotools
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel git mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-autotools mingw-w64-x86_64-libtool
            mingw-w64-x86_64-pkg-config
      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1
      - name: Autogen
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
      - name: Build depends (x86_64-w64-mingw32)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          make -C depends -j${CORES} HOST=x86_64-w64-mingw32 V=1 | tee depends.build.log
          test -f "depends/x86_64-w64-mingw32/share/config.site" || { tail -n 200 depends/build-*.log || true; exit 1; }
      - name: Configure (no wallet/gui)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CONFIG_SITE="$PWD/depends/x86_64-w64-mingw32/share/config.site" \
          ./configure --host=x86_64-w64-mingw32 --disable-tests --disable-bench --disable-wallet --without-gui
      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          make -j${CORES} | tee build.log
      - name: Stage + SHA256
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p dist/x86_64-w64-mingw32
          cp -av src/*.exe "dist/x86_64-w64-mingw32/" 2>/dev/null || true
          ls -la dist/x86_64-w64-mingw32 || true
          { find dist/x86_64-w64-mingw32 -type f -maxdepth 1 | xargs -r sha256sum > dist/x86_64-w64-mingw32/SHA256SUMS; } || true
          test -s dist/x86_64-w64-mingw32/SHA256SUMS || { echo "No binaries staged"; find src -maxdepth 2 -type f | sed -n '1,200p'; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: windows-msys2-mingw64
          path: dist/x86_64-w64-mingw32/

  macos:
    name: mac • ${{ matrix.os }} • depends→autotools
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            host: x86_64-apple-darwin19
          - os: macos-14
            host: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1
      - name: Install toolchain
        run: |
          set -euo pipefail
          brew install automake libtool pkg-config coreutils || true
      - name: Autogen
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
      - name: Build depends (${{ matrix.host }})
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(sysctl -n hw.logicalcpu || echo 3)
          make -C depends -j${CORES} HOST=${{ matrix.host }} V=1 | tee depends.build.log
          test -f "depends/${{ matrix.host }}/share/config.site" || { tail -n 200 depends/build-*.log || true; exit 1; }
      - name: Configure (no wallet/gui)
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-13' && '10.15' || '11.0' }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CONFIG_SITE="$PWD/depends/${{ matrix.host }}/share/config.site" \
          ./configure --disable-tests --disable-bench --disable-wallet --without-gui
      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(sysctl -n hw.logicalcpu || echo 3)
          make -j${CORES} | tee build.log
      - name: Stage + SHA256
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p "dist/${{ matrix.host }}"
          set +e
          cp -av src/vkaxd src/vkax-cli src/qt/vkax-qt "dist/${{ matrix.host }}/" 2>/dev/null || true
          set -e
          ls -la "dist/${{ matrix.host }}" || true
          { find "dist/${{ matrix.host }}" -type f -maxdepth 1 | xargs -r shasum -a 256 > "dist/${{ matrix.host }}/SHA256SUMS"; } || true
          test -s "dist/${{ matrix.host }}/SHA256SUMS" || { echo "No binaries staged"; find src -maxdepth 2 -type f | sed -n '1,200p'; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.os }}-${{ matrix.host }}
          path: dist/${{ matrix.host }}/

  android:
    name: android • arm64 & armv7 • core
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1
      - name: Install base tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y unzip curl zip python3
      - name: Install Android SDK cmdline-tools
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p "$HOME/android/sdk/cmdline-tools"
          cd "$HOME/android/sdk/cmdline-tools"
          if [ ! -d "latest" ]; then
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
            unzip -q cmdtools.zip -d latest && rm -f cmdtools.zip
          fi
          echo "ANDROID_SDK_ROOT=$HOME/android/sdk" >> $GITHUB_ENV
      - name: Install platforms and NDK (guarded)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          SDKM="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          if [ -x "$SDKM" ]; then
            yes | "$SDKM" --licenses >/dev/null 2>&1 || true
            "$SDKM" "platforms;android-${{ env.ANDROID_API_LEVEL }}" "platform-tools" "ndk;${{ env.ANDROID_NDK_VERSION }}"
          else
            echo "sdkmanager missing; skipping install"
          fi
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
      - name: Build depends (android)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -C depends -j${CORES} HOST=aarch64-linux-android V=1 2>&1 | tee depends.arm64.log
          stdbuf -oL -eL make -C depends -j${CORES} HOST=arm-linux-androideabi V=1 2>&1 | tee depends.armv7.log
          test -f "depends/aarch64-linux-android/share/config.site"
          test -f "depends/arm-linux-androideabi/share/config.site"
      - name: Build core (no gui)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ANDROID_TOOLCHAIN_BIN="$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin"
          make -j1 HOST=aarch64-linux-android ANDROID_API_LEVEL=${{ env.ANDROID_API_LEVEL }} ANDROID_TOOLCHAIN_BIN="$ANDROID_TOOLCHAIN_BIN" vkax-d vkax-cli | tee build.arm64.log
          make -j1 HOST=arm-linux-androideabi ANDROID_API_LEVEL=${{ env.ANDROID_API_LEVEL }} ANDROID_TOOLCHAIN_BIN="$ANDROID_TOOLCHAIN_BIN" vkax-d vkax-cli | tee build.armv7.log
      - name: Stage + SHA256
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p dist/aarch64-linux-android dist/arm-linux-androideabi
          set +e
          cp -av build/*/vkax-d build/*/vkax-cli dist/aarch64-linux-android/ 2>/dev/null || true
          cp -av build/*/vkax-d build/*/vkax-cli dist/arm-linux-androideabi/ 2>/dev/null || true
          set -e
          { find dist/aarch64-linux-android -type f -maxdepth 1 | xargs -r sha256sum > dist/aarch64-linux-android/SHA256SUMS; } || true
          { find dist/arm-linux-androideabi -type f -maxdepth 1 | xargs -r sha256sum > dist/arm-linux-androideabi/SHA256SUMS; } || true
          test -s dist/aarch64-linux-android/SHA256SUMS || { echo "No arm64 binaries staged"; find build -maxdepth 2 -type f | sed -n '1,200p'; exit 1; }
          test -s dist/arm-linux-androideabi/SHA256SUMS || { echo "No armv7 binaries staged"; find build -maxdepth 2 -type f | sed -n '1,200p'; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: android-core
          path: |
            dist/aarch64-linux-android/
            dist/arm-linux-androideabi/
