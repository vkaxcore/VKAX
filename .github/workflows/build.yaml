name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C

jobs:
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04
    env:
      HOST: aarch64-linux-android
      ANDROID_API: '21'

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Tooling
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y build-essential automake libtool pkg-config python3 unzip wget cmake ninja-build

      - name: Install Android SDK + NDK (r25c)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
          unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Android wrappers + Boost config
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -euxo pipefail
          LLVM="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
          BIN="$LLVM/bin"
          SYSROOT="$LLVM/sysroot"
          ARCH="$HOST"
          API="$ANDROID_API"
          REAL_C="$BIN/${ARCH}${API}-clang"
          REAL_CXX="$BIN/${ARCH}${API}-clang++"
          INC_CPP="$LLVM/include/c++/v1"
          LIBDIR="$SYSROOT/usr/lib/${ARCH}/${API}"
          test -x "$REAL_CXX"

          WRAP="$GITHUB_WORKSPACE/.ccwrap"
          mkdir -p "$WRAP"

          cat > "$WRAP/${ARCH}${API}-clang" <<'EOF'
#!/usr/bin/env bash
set -e
exec "$(dirname "$0")/../ndk-real-c" "$@"
EOF
          cat > "$WRAP/${ARCH}${API}-clang++" <<'EOF'
#!/usr/bin/env bash
set -e
exec "$(dirname "$0")/../ndk-real-cxx" "$@"
EOF
          chmod +x "$WRAP/${ARCH}${API}-clang" "$WRAP/${ARCH}${API}-clang++"

          cat > "$WRAP/ndk-real-c" <<'EOF'
#!/usr/bin/env bash
set -e
REAL_C="@REAL_C@"
SYSROOT="@SYSROOT@"
ARCH="@ARCH@"
API="@API@"
args=()
for a in "$@"; do case "$a" in --target=*|--sysroot=*|-nostdinc++ ) ;; * ) args+=("$a");; esac; done
exec "$REAL_C" --target="${ARCH}${API}" --sysroot="$SYSROOT" -D__ANDROID_API__="${API}" "${args[@]}"
EOF
          sed -i "s|@REAL_C@|$REAL_C|;s|@SYSROOT@|$SYSROOT|;s|@ARCH@|$ARCH|;s|@API@|$API|" "$WRAP/ndk-real-c"
          chmod +x "$WRAP/ndk-real-c"

          cat > "$WRAP/ndk-real-cxx" <<'EOF'
#!/usr/bin/env bash
set -e
REAL_CXX="@REAL_CXX@"
SYSROOT="@SYSROOT@"
INC_CPP="@INC_CPP@"
ARCH="@ARCH@"
API="@API@"
args=()
for a in "$@"; do case "$a" in --target=*|--sysroot=*|-nostdinc++ ) ;; * ) args+=("$a");; esac; done
exec "$REAL_CXX" --target="${ARCH}${API}" --sysroot="$SYSROOT" -D__ANDROID_API__="${API}" -nostdinc++ -stdlib=libc++ \
  -isystem "$INC_CPP" -isystem "$SYSROOT/usr/include" "${args[@]}"
EOF
          sed -i "s|@REAL_CXX@|$REAL_CXX|;s|@SYSROOT@|$SYSROOT|;s|@INC_CPP@|$INC_CPP|;s|@ARCH@|$ARCH|;s|@API@|$API|" "$WRAP/ndk-real-cxx"
          chmod +x "$WRAP/ndk-real-cxx"

          ln -sf "$WRAP/${ARCH}${API}-clang"  "$WRAP/${ARCH}-clang"
          ln -sf "$WRAP/${ARCH}${API}-clang++" "$WRAP/${ARCH}-clang++"
          echo "$WRAP" >> "$GITHUB_PATH"

          {
            echo "CC=${ARCH}${API}-clang"
            echo "CXX=${ARCH}${API}-clang++"
            echo "AR=llvm-ar"
            echo "RANLIB=llvm-ranlib"
            echo "C_INCLUDE_PATH=$SYSROOT/usr/include"
            echo "CPLUS_INCLUDE_PATH=$INC_CPP:$SYSROOT/usr/include"
            echo "LDFLAGS=-L$LIBDIR -fuse-ld=lld -lc++ -lc++abi -llog -landroid"
          } >> "$GITHUB_ENV"

          mkdir -p depends "$HOME/.boost-build"
          cat > depends/user-config.jam <<'EOF'
using clang : aarch64 : aarch64-linux-android-clang++ : <target-os>android ;
EOF
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      - name: Sanity
        run: |
          set -eux
          which aarch64-linux-android21-clang++
          aarch64-linux-android21-clang++ -v
          which aarch64-linux-android-clang++
          aarch64-linux-android-clang++ -v

      - name: Build depends (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          BOOST_BUILD_PATH: ${{ env.BOOST_BUILD_PATH }}
        run: |
          set -eux
          make -C depends -j"$(nproc)" HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" NO_QT=1 V=1

      - name: Configure (daemon + cli + tx)
        env:
          HOST: ${{ env.HOST }}
          CONFIG_SITE: ${{ github.workspace }}/depends/${{ env.HOST }}/share/config.site
        run: |
          set -eux
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"
          ./autogen.sh || true
          ./configure \
            --host="${HOST}" --build="$(gcc -dumpmachine)" \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="-O2 -fPIC"

      - name: Build + Package (vkaxd, vkax-cli, vkax-tx)
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true
          tar -cvzf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: Diagnostics (always)
        if: always()
        run: |
          set -x
          find depends -maxdepth 7 -type f \( -name bootstrap.log -o -name config.log -o -name project-config.jam -o -name user-config.jam \) -print -exec sed -n '1,160p' {} \; || true
          B2=$(find depends -maxdepth 7 -type f -name b2 -print -quit || true)
          if [ -n "$B2" ]; then "$(dirname "$B2")/b2" --debug-configuration -n --version toolset=clang target-os=android || true; fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz
