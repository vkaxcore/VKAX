name: VKAX Android Build

# Workflow triggers
on:
  # Trigger the workflow manually via the GitHub UI (workflow_dispatch)
  workflow_dispatch:
  
  # Trigger the workflow on push to specific branches
  push:
    branches: 
      - main
      - v100.11.5-android
      - dev  # Ensure these are the correct branches you want to build for

env:
  # General environment variables
  COIN_NAME: vkax  # Set the coin name as an environment variable for easy access
  BUILD_DIR: vkax-build  # Directory for build outputs
  COMPRESS_DIR: vkax-compress  # Directory for compressed build artifacts
  LC_ALL: C  # Set locale for consistent behavior across machines
  LANG: C  # Set language for consistency
  ANDROID_API: "25"  # Android API level to target, set to 25 for 64-bit support
  HOST: aarch64-linux-android  # Set the host for cross-compiling to ARM 64-bit

jobs:
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04  # Use the latest supported Ubuntu runner for your builds

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4
        with:
          lfs: true  # Ensure Git LFS files are checked out as well

      # Step 2: Set up JDK 11 for building the project
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin  # Use the Temurin JDK distribution
          java-version: "11"  # Specify the version of Java to use for the build

      # Step 3: Install necessary tooling and dependencies
      - name: Install required tools and dependencies
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y build-essential automake libtool pkg-config python3 unzip wget cmake ninja-build

      # Step 4: Install Android SDK and NDK (r25c), skip if already installed
      - name: Install Android SDK + NDK (r25c)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk  # Set Android SDK root directory
        run: |
          set -eux
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo "Installing Android SDK and NDK"
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"  # Ensure the cmdline-tools directory exists
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"  # Unzip SDK tools
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
            export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"  # Update path for SDK tools
            yes | sdkmanager --licenses >/dev/null  # Accept SDK licenses automatically
            sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "ndk;25.2.9519653"  # Install necessary SDK/NDK versions
          else
            echo "Android SDK/NDK already installed, skipping installation."
          fi
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"  # Export SDK root for later steps
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"  # Set NDK path
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"  # Add NDK tools to path

      # Step 5: Set up NDK clang toolchain for Boost
      - name: Set up NDK clang toolchain for Boost
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
          # Check if clang++ exists in the toolchain directory for the correct API level
          test -x "$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++" || { echo "clang++ not found"; exit 1; }
          
          # Create symlinks for clang and clang++
          ln -sf "${TOOLCHAIN_BIN}/${HOST}${ANDROID_API}-clang"  "${TOOLCHAIN_BIN}/${HOST}-clang"
          ln -sf "${TOOLCHAIN_BIN}/${HOST}${ANDROID_API}-clang++" "${TOOLCHAIN_BIN}/${HOST}-clang++"
          
          # Add toolchain binary directory to PATH for later steps
          echo "$TOOLCHAIN_BIN" >> "$GITHUB_PATH"
          
          # Set environment variables for Boost to use the Android NDK toolchain
          echo "CC=${HOST}${ANDROID_API}-clang" >> "$GITHUB_ENV"
          echo "CXX=${HOST}${ANDROID_API}-clang++" >> "$GITHUB_ENV"
          echo "AR=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

          # Boost user-config.jam for Android
          mkdir -p depends "$HOME/.boost-build"
          
          # Create user-config.jam dynamically using echo
          echo "using clang : aarch64" > depends/user-config.jam
          echo "  : ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_API}-clang++" >> depends/user-config.jam
          echo "  : <target-os>android <architecture>arm <address-model>64 ;" >> depends/user-config.jam
          
          # Copy the generated user-config.jam to the Boost build directory
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          
          # Export Boost build path as an environment variable
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      # Step 6: Build dependencies (no Qt)
      - name: Build dependencies (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          BOOST_BUILD_PATH: ${{ env.BOOST_BUILD_PATH }}
        run: |
          set -eux
          make -C depends -j"$(nproc)" HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" NO_QT=1 V=1

      # Step 7: Configure for daemon + cli + tx
      - name: Configure (daemon + cli + tx)
        env:
          HOST: ${{ env.HOST }}
          CONFIG_SITE: ${{ github.workspace }}/depends/${{ env.HOST }}/share/config.site
        run: |
          set -eux
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"  # Set pkg-config path
          ./autogen.sh || true  # Run autogen if available (ignore failure)
          ./configure \
            --host="${HOST}" --build="$(gcc -dumpmachine)" \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="-O2 -fPIC"  # Configure the project with appropriate flags

      # Step 8: Build and package the binaries (vkaxd, vkax-cli, vkax-tx)
      - name: Build and Package (vkaxd, vkax-cli, vkax-tx)
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx  # Build the binaries in parallel
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"  # Ensure directories exist
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true  # Copy binaries to build dir
          tar -czvf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .  # Compress the binaries into a tar.gz archive

      # Step 9: Diagnostics (always run for debugging)
      - name: Diagnostics (always)
        if: always()  # Ensure this step always runs, even on failure
        run: |
          set -x
          find depends -maxdepth 7 -type f \( -name bootstrap.log -o -name config.log -o -name project-config.jam -o -name user-config.jam \) -print || true  # Find useful log files for debugging
          B2=$(find depends -maxdepth 7 -type f -name b2 -print -quit || true)
          if [ -n "$B2" ]; then "$(dirname "$B2")/b2" --debug-configuration -n --version toolset=clang target-os=android || true; fi

      # Step 10: Upload the build artifact
      - uses: actions/upload-artifact@v4
        if: always()  # Upload the artifact even if the build fails
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz  # Upload the generated artifact
