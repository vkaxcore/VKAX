# File: .github/workflows/build.yaml
# Purpose: Android daemon/cli/tx builds for aarch64 + armv7 on API-21 + NDK r23b, with safe SDK licenses,
#          toolchain sanity, Android mk lint, progress probe, tee'd logs, 1000-line summary tail,
#          provenance for user-config.jam (owned by boost.mk), and Boost b2 version print.
# Key vars/switches:
#   matrix.arch: aarch64 | armv7
#   matrix.api:  "21"
#   matrix.ndk_ver: "23.1.7779620" (r23b)
#   CC/CXX: set to ${clang_target}${api}-{clang,clang++} via ccache
#   ANDROID_SDK_ROOT, ANDROID_NDK_HOME: set per job
#   MAKEFLAGS: --output-sync=target -j$(nproc)
#   VERBOSE_BUILD=1: enables set -x for major steps
# External expectations:
#   boost.mk emits user-config.jam (workflow never writes it)
#   depends uses NO_QT=1 (daemon/cli/tx only)
# =============================
# File: .github/workflows/build.yaml
# =============================
name: VKAX Android Builds

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-androidx, dev ]

permissions:
  contents: read

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

env:
  TAIL_N: "1000"
  VERBOSE_BUILD: "0"

jobs:
  android:
    name: Android ${{ matrix.arch }} (API ${{ matrix.api }}, NDK ${{ matrix.ndk_ver }})
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            host: aarch64-linux-android
            clang_triple: aarch64-linux-android
            api: "21"
            ndk_ver: "23.1.7779620"
          - arch: armv7
            host: arm-linux-androideabi
            clang_triple: armv7a-linux-androideabi
            api: "21"
            ndk_ver: "23.1.7779620"

    defaults:
      run:
        shell: bash

    steps:
      - name: [VKAX] Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: [VKAX] Guards in workflows
        run: |
          set -Eeuo pipefail
          if git --no-pager grep -nH --color=never -E 'yes\s*\|\s*sdkmanager\s*--licenses' .github/workflows; then
            echo "::error::Forbidden pattern 'yes | sdkmanager --licenses' in workflows"
            exit 1
          fi
          if git --no-pager grep -nH --color=never -e 'user-config\.jam' .github/workflows; then
            echo "::error::user-config.jam must be owned by depends/packages/boost.mk, not CI"
            exit 1
          fi

      - name: [VKAX] Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: [VKAX] System deps
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD:-0}" = 1 ] && set -x || true
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix \
            xz-utils file ccache git-core

      - name: [VKAX] Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-${{ hashFiles('**/configure.ac', '**/Makefile.am', 'depends/**', 'src/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-

      - name: [VKAX] Install Android SDK + NDK r23b
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD:-0}" = 1 ] && set -x || true
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          sdkmanager --update >/dev/null 2>&1 || true
          sdkmanager --licenses >/dev/null 2>&1 <<< $'y\ny\ny\ny\ny\ny\ny\n'
          sdkmanager \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${{ matrix.ndk_ver }}"
          {
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK=$ANDROID_SDK_ROOT"
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_API=${{ matrix.api }}"
            echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
            echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
            echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
          } >> "$GITHUB_ENV"
          {
            echo "$ANDROID_SDK_ROOT/platform-tools"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
            echo "$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          } >> "$GITHUB_PATH"

      - name: [VKAX] NDK validator
        run: |
          set -Eeuo pipefail
          TOOLCHAIN_BIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          [ -d "$TOOLCHAIN_BIN" ] || { echo "::error::NDK toolchain bin not found: $TOOLCHAIN_BIN"; exit 1; }

      - name: [VKAX] Toolchain sanity & summary
        run: |
          set -Eeuo pipefail
          api="${{ matrix.api }}"
          tpfx="${{ matrix.clang_triple }}${api}"
          want_cc="$tpfx-clang"; want_cxx="$tpfx-clang++"
          echo "## Toolchain summary (UTC)" >> "$GITHUB_STEP_SUMMARY"
          date -u '+%Y-%m-%d %H:%M:%S UTC' >> "$GITHUB_STEP_SUMMARY"
          {
            echo '```'
            echo "command -v $want_cc: $(command -v "$want_cc" || echo MISSING)"
            echo "command -v $want_cxx: $(command -v "$want_cxx" || echo MISSING)"
            echo "command -v llvm-ar: $(command -v llvm-ar || echo MISSING)"
            echo "command -v llvm-ranlib: $(command -v llvm-ranlib || echo MISSING)"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
          if ! command -v "$want_cc" >/dev/null 2>&1; then
            echo "::error::Missing $want_cc on PATH"; exit 1
          fi
          echo "CC=ccache $want_cc" >> "$GITHUB_ENV"
          echo "CXX=ccache $want_cxx" >> "$GITHUB_ENV"
          echo "AR=$(command -v llvm-ar)" >> "$GITHUB_ENV"
          echo "RANLIB=$(command -v llvm-ranlib)" >> "$GITHUB_ENV"
          echo "MAKEFLAGS=--output-sync=target -j$(nproc)" >> "$GITHUB_ENV"

      - name: [VKAX] Lint Android makefiles
        run: |
          set -Eeuo pipefail
          files=(depends/hosts/android.mk depends/packages/ndk.mk)
          bad=0
          for f in "${files[@]}"; do
            if grep -nP '[^\x00-\x7F]' "$f"; then
              echo "::error file=$f::Non-ASCII byte detected"; bad=1
            fi
            awk 'length($0)>400{printf "::error file=%s,line=%d::%d chars\n",FILENAME,NR,length($0);b=1}END{exit b}' "$f" || bad=1
            awk '
              BEGIN{in_rule=0;in_def=0;err=0}
              /^\s*#/ {next} /^\s*$/ {in_rule=0;next}
              /^\s*define(\s|$)/ {in_def=1;next}
              in_def && /^\s*endef(\s|$)/ {in_def=0;next}
              in_def {next}
              /^[^\t #][^:]*:[^=]*/ {in_rule=1;next}
              /^[^\t #].*::/ {in_rule=1;next}
              /^\t/ { if(!in_rule){printf "::error file=%s,line=%d::TAB line without rule header\n",FILENAME,NR;err=1} ; next }
              {in_rule=0}
              END{exit err}
            ' "$f" || bad=1
          done
          exit $bad

      - name: [VKAX] Prep depends (config.guess/sub, CRLF)
        run: |
          set -Eeuo pipefail
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub; }

      - name: [VKAX] Start liveness probe
        run: |
          set -Eeuo pipefail
          PROBE_LOG="$RUNNER_TEMP/probe.log"
          (
            while sleep 60; do
              echo "[probe $(date -u '+%Y-%m-%d %H:%M:%S UTC')] depends/work hottest files:" | tee -a "$PROBE_LOG"
              find depends src -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 10 | awk '{print $2}' | sed 's|^|  |' | tee -a "$PROBE_LOG" || true
            done
          ) &
          echo "PROBE_PID=$!" >> "$GITHUB_ENV"

      - name: [VKAX] Build depends (NO_QT)
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          export BUILD_TRIPLET="$(./depends/config.guess)"
          export LOG="$RUNNER_TEMP/vkax-build.log"
          echo "## depends build (UTC) $(date -u '+%Y-%m-%d %H:%M:%S UTC')" | tee -a "$LOG"
          make -C depends --output-sync=target -j"$(nproc)" \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="${{ matrix.api }}" \
            NO_QT=1 V=1 2>&1 | tee -a "$LOG"
          echo "BUILD_LOG=$LOG" >> "$GITHUB_ENV"

      - name: [VKAX] Boost provenance
        run: |
          set -Eeuo pipefail
          echo "## Boost provenance" >> "$GITHUB_STEP_SUMMARY"
          {
            echo '```'
            echo "b2 path: $(command -v b2 || echo not-found)"
            if command -v b2 >/dev/null 2>&1; then b2 --version || true; fi
            echo
            echo "user-config.jam provenance (grep in depends/packages/boost.mk):"
            grep -n "user-config.jam" depends/packages/boost.mk || echo "(no explicit write in workflow, as expected)"
            echo
            echo "Discovered jam files:"
            find . -name 'user-config.jam' -printf '%p\n' | while read -r p; do
              sha256sum "$p" | awk '{print $1, "  ", FILENAME}' FILENAME="$p" || true
              /usr/bin/stat -c 'mtime=%y' "$p" 2>/dev/null || true
              head -n 1 "$p" 2>/dev/null || true
              echo
            done
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: [VKAX] Configure
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -x ./autogen.sh ] && ./autogen.sh || true
          ./configure \
            --host="$HOST" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR="${AR}" RANLIB="${RANLIB}" \
            CXXFLAGS="-O2 -fPIC"

      - name: [VKAX] Build
        run: |
          set -Eeuo pipefail
          make --output-sync=target -j"$(nproc)" 2>&1 | tee -a "$BUILD_LOG"

      - name: [VKAX] Package artifacts
        run: |
          set -Eeuo pipefail
          mkdir -p artifacts
          shopt -s nullglob
          files=(src/vkaxd src/vkax-cli src/vkax-tx)
          have_any=false; for f in "${files[@]}"; do [ -f "$f" ] && have_any=true; done
          if ! $have_any; then
            echo "::error::Expected binaries not found; listing src/" ; ls -l src/ || true ; exit 1
          fi
          if command -v llvm-strip >/dev/null 2>&1; then
            llvm-strip -s "${files[@]}" || true
          fi
          cp -v "${files[@]}" artifacts/
          tar -C artifacts -czf "vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}-${GITHUB_SHA::7}.tar.gz" .

      - name: [VKAX] Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}
          path: vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}-*.tar.gz
          if-no-files-found: error
          retention-days: 30

      - name: [VKAX] Summarize last ${TAIL_N} build lines
        if: always()
        run: |
          set -Eeuo pipefail
          echo "### Build log tail (last ${TAIL_N:-1000} lines)" >> "$GITHUB_STEP_SUMMARY"
          if [ -s "${BUILD_LOG:-}" ]; then
            { echo '```log'; tail -n "${TAIL_N:-1000}" "$BUILD_LOG"; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No build log captured._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: [VKAX] Upload full build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vkax-build-log-${{ matrix.arch }}
          path: ${{ env.BUILD_LOG }}
          if-no-files-found: warn

# Path: .github/workflows/build.yaml | 2025-09-08 UTC
