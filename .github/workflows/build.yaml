name: "CI • Production builds (Android + Native)"

on:
  push:
    branches: ["v100.11.5-android"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
  ANDROID_HOME: ${{ github.workspace }}/.android-sdk
  ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  ANDROID_NDK_VERSION: "23.1.7779620"

# ---------------------
# Group: Android builds (production)
# ---------------------
jobs:
  android:
    name: android • build • ${{ matrix.abi }}
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a]
        include:
          - abi: arm64-v8a
            host: aarch64-linux-android
          - abi: armeabi-v7a
            host: arm-linux-androideabi
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Cache (depends sources + ccache)
        uses: ./.github/cache
        with:
          key: ${{ runner.os }}-android-${{ matrix.abi }}-23.1.7779620-${{ hashFiles('depends/packages/*.mk') }}
          paths: |
            depends/sources
            ~/.ccache
          restore-keys: ${{ runner.os }}-android-${{ matrix.abi }}-

      - name: Prepare SDK + cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            tmp=$(mktemp -d)
            curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
            unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          {
            echo "$ANDROID_SDK_ROOT/platform-tools"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
          } >> "$GITHUB_PATH"
      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-34" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Build depends (${{ matrix.host }})
        shell: bash
        env:
          CCACHE_DIR: ~/.ccache
          CCACHE_COMPRESS: "1"
        run: |
          set -euo pipefail
          if [ ! -d depends ]; then echo "::error::depends/ missing"; exit 2; fi
          J=1
          # raise soft file-descriptor limit to avoid EMFILE during packaging operations
          ulimit -n 4096 || true
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          make -C depends -j1 HOST=${{ matrix.host }} ANDROID_SDK="${ANDROID_SDK}" ANDROID_NDK="${ANDROID_NDK}"

      - name: Check vendored depends prefix (Android)
        shell: bash
        run: |
          set -euo pipefail
          if ls depends/${{ matrix.host }}* >/dev/null 2>&1; then
            echo "Found depends prefix for ${{ matrix.host }}"
          else
            echo "::warning::Vendored depends prefix not found for host ${{ matrix.host }} (expected depends/${{ matrix.host }}*)"
          fi

      - name: CMake configure and build (Android native) (vkax-d, vkax-cli)
        shell: bash
        env:
          ANDROID_API_LEVEL: 34
          ANDROID_TOOLCHAIN_BIN: "${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
        run: |
          set -euo pipefail
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          export ANDROID_TOOLCHAIN_BIN
          make -C . -j1 V=1 HOST=${{ matrix.host }} ANDROID_API_LEVEL=${ANDROID_API_LEVEL} ANDROID_TOOLCHAIN_BIN=${ANDROID_TOOLCHAIN_BIN} vkax-d vkax-cli

      - name: Package Qt Android (attempt)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_apk
          QMAKE=$(find depends -type f -name 'qmake' -o -name 'qmake-qt5' 2>/dev/null | head -n1 || true)
          ANDROIDDEPLOYQT=$(find depends -type f -name 'androiddeployqt' 2>/dev/null | head -n1 || true)
          if [ -n "$QMAKE" ] && [ -n "$ANDROIDDEPLOYQT" ] && [ -f src/qt/vkax-qt.pro ]; then
            echo "Using qmake + androiddeployqt from depends"
            mkdir -p build-qt-android && cd build-qt-android
            "$QMAKE" ../src/qt/vkax-qt.pro ANDROID_ABIS=${{ matrix.abi }} ANDROID_PLATFORM=android-34
            make -j1
            JSON=$(find . -name android_deployment_settings.json -print -quit || true)
            if [ -n "$JSON" ]; then
              "$ANDROIDDEPLOYQT" --input "$JSON" --output ./android_deploy --android-platform android-34 --gradle --release || true
              find ./android_deploy -type f -name '*.apk' -exec cp -a {} ../dist_apk/ \; || true
            fi
          else
            echo "androiddeployqt/qmake not available; skipping deterministic Qt packaging"
          fi

      - name: Collect Android artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_android
          cp -a dist_apk/* dist_android/ 2>/dev/null || true
          find build -type f -name 'vkax-*' -exec cp -a {} dist_android/ \; || true
          if [ -d dist_android ]; then (cd dist_android && sha256sum * > sha256sums.txt || true); fi

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-ubuntu-24.04-${{ matrix.abi }}
          path: |
            dist_android/**/*
          if-no-files-found: warn

  android_legacy:
    name: android • legacy • ubuntu-22.04 • api 15 • ndk 23.1.7779620
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Prepare SDK + cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          tmp=$(mktemp -d)
          curl -fsSL "${ANDROID_CLT_LINUX}" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest" || true
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages (legacy)
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-15" "ndk;23.1.7779620"

      - name: Build vendored depends (legacy)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d depends ]; then echo "::error::depends/ directory missing; required for Android legacy build."; exit 2; fi
          J=1
          # raise soft file-descriptor limit
          ulimit -n 4096 || true
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/23.1.7779620"
          make -C depends -j1 HOST=aarch64-linux-android ANDROID_SDK="${ANDROID_SDK}" ANDROID_NDK="${ANDROID_NDK}" || true

      - name: Build legacy targets (vkax-d, vkax-cli)
        shell: bash
        run: |
          set -euo pipefail
          export ANDROID_SDK="${ANDROID_SDK_ROOT}"
          export ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/23.1.7779620"
          export ANDROID_API_LEVEL=15
          export ANDROID_TOOLCHAIN_BIN="${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          make -C . -j1 V=1 HOST=aarch64-linux-android ANDROID_API_LEVEL=${ANDROID_API_LEVEL} ANDROID_TOOLCHAIN_BIN=${ANDROID_TOOLCHAIN_BIN} vkax-d vkax-cli || true

      - name: Collect Android legacy artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_android_legacy
          find build -type f -name 'vkax-*' -exec cp -a {} dist_android_legacy/ \; || true
          if [ -d dist_android_legacy ]; then (cd dist_android_legacy && sha256sum * > sha256sums.txt || true); fi

      - name: Upload Android legacy artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-legacy-ubuntu-22.04
          path: |
            dist_android_legacy/**/*
          if-no-files-found: warn

  android_summary:
    name: android • summary
    needs: [android, android_legacy]
    runs-on: ubuntu-22.04
    steps:
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          path: android_assets
          merge-multiple: true

      - name: Produce android summary
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android_summary
          out=android_summary/summary.txt
          echo "Android artifact summary - $(date)" > "$out"
          if compgen -G "android_assets/**" > /dev/null; then
            find android_assets -type f -maxdepth 3 -print >> "$out" || true
            (cd android_assets && sha256sum * > ../android_summary/SHA256SUMS.txt) || true
          else
            echo "No android artifacts found" >> "$out"
          fi
      - name: Upload android summary
        uses: actions/upload-artifact@v4
        with:
          name: android-summary
          path: android_summary

  # ---------------------
  # Group: Ubuntu / Linux builds (production)
  # ---------------------
  ubuntu:
    name: native • ubuntu • ${{ matrix.name }}
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            runs_on: ubuntu-22.04
            triple: x86_64-pc-linux-gnu
          - name: ubuntu-24-amd64
            runs_on: ubuntu-24.04
            triple: x86_64-pc-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Cache depends + ccache
        uses: ./.github/cache
        with:
          key: ${{ runner.os }}-linux-23.1.7779620-${{ hashFiles('depends/packages/*.mk') }}
          paths: |
            depends/sources
            ~/.ccache
          restore-keys: ${{ runner.os }}-linux-

      - name: Install system build deps
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3 || true

      - name: Build vendored depends (Linux)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d depends ]; then
            J=1
            # raise soft file-descriptor limit
            ulimit -n 4096 || true
            make -C depends -j1 HOST=${{ matrix.triple }} || true
          else
            echo "::notice::No depends/ dir; skipping vendored deps."
          fi

      - name: Check vendored depends prefix (Linux)
        shell: bash
        run: |
          set -euo pipefail
          if ls depends/${{ matrix.triple }}* >/dev/null 2>&1; then
            echo "Vendored depends prefix found for ${{ matrix.triple }}"
          else
            echo "::warning::Vendored depends prefix not found for host ${{ matrix.triple }} (expected depends/${{ matrix.triple }}*)"
          fi

      - name: CMake build (Linux)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f CMakeLists.txt ]; then
            echo "::notice::No CMakeLists.txt; skipping."; exit 0
          fi
          if [ -d "depends/${{ matrix.triple }}" ]; then
            export CMAKE_PREFIX_PATH="depends/${{ matrix.triple }}"
          else
            echo "::warning::Vendored depends prefix not found; continuing without depends."
          fi
          cmake -S . -B build -G Ninja
          cmake --build build -j1 || true

      - name: Collect Linux binaries
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_linux
          find build -type f -perm -111 -name 'vkax*' -exec cp -a {} dist_linux/ \; || true
          if [ -d dist_linux ]; then (cd dist_linux && sha256sum * > sha256sums.txt || true); fi

      - name: Upload linux artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-ubuntu-${{ matrix.name }}
          path: |
            dist_linux/**/*
          if-no-files-found: warn

  # ---------------------
  # Group: Windows Cross (MinGw on Ubuntu) — production
  # ---------------------
  native-windows-cross:
    name: native-windows-cross • depends • ubuntu-24.04 • x86_64-w64-mingw32
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Cache (depends sources)
        uses: ./.github/cache
        with:
          key: ${{ runner.os }}-mingw-${{ hashFiles('depends/packages/*.mk') }}
          paths: |
            depends/sources

      - name: Tooling
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3 g++-mingw-w64-x86-64 || true

      - name: Build depends (x86_64-w64-mingw32)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d depends ]; then echo "::error::depends/ missing"; exit 2; fi
          J=1
          # raise soft file-descriptor limit
          ulimit -n 4096 || true
          make -C depends -j1 HOST=x86_64-w64-mingw32

      - name: Check vendored depends prefix (mingw)
        shell: bash
        run: |
          set -euo pipefail
          if ls depends/x86_64-w64-mingw32* >/dev/null 2>&1; then
            echo "Found mingw depends prefix"
          else
            echo "::warning::Vendored depends prefix not found for mingw (depends/x86_64-w64-mingw32*)"
          fi

      - name: Collect Windows cross .exe
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist-w64
          find build-w64 -type f -name 'vkax-*.exe' -exec cp -a {} dist-w64/ \; || true
          if [ -d dist-w64 ]; then (cd dist-w64 && sha256sum * > sha256s.txt || true); fi

      - name: Upload Windows cross artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-windows-cross-ubuntu-24.04
          path: |
            dist-w64/**/*
          if-no-files-found: warn

  # ---------------------
  # Group: Windows (MSVC) — native
  # ---------------------
  windows:
    name: native • windows • windows-2022
    runs-on: windows-2022
    timeout-minutes: 90
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup MSVC env
        uses: ilammy/msvc-dev-cmd@v1

      - name: Attempt build depends (Windows MSVC)
        shell: powershell
        run: |
          Set-StrictMode -Version Latest
          Write-Output "Checking for depends/ and make..."
          if (-Not (Test-Path ".\depends")) {
            Write-Output "::warning::depends/ not present; skipping depends build"
            exit 0
          }
          $make = Get-Command make -ErrorAction SilentlyContinue
          if ($null -eq $make) {
            Write-Output "::warning::make not found on PATH; cannot build depends on Windows runner"
            exit 0
          }
          $J = $env:NUMBER_OF_PROCESSORS
          if (-not $J) { $J = 1 }
          if ($J -gt 1) { $J = 1 }
          Write-Output "Running: make -C depends HOST=x86_64-pc-windows-msvc PREFIX=depends/x86_64-pc-windows-msvc -j$J"
          $proc = Start-Process -FilePath "make" -ArgumentList "-C","depends","HOST=x86_64-pc-windows-msvc","PREFIX=depends/x86_64-pc-windows-msvc","-j$J" -NoNewWindow -Wait -PassThru
          if ($proc.ExitCode -ne 0) {
            Write-Output "::warning::make returned exit code $($proc.ExitCode)"
          }
          $prefix = Get-ChildItem -Path .\depends -Directory -Filter "x86_64-pc-windows-msvc*" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($null -ne $prefix) {
            Write-Output "Found depends prefix: $($prefix.FullName)"
            "DEPENDS_WINDOWS_PREFIX=$($prefix.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append
          } else {
            Write-Output "::warning::No depends prefix found at depends/x86_64-pc-windows-msvc*"
          }

      - name: Bootstrap vcpkg and install Boost
        shell: powershell
        run: |
          Set-StrictMode -Version Latest
          $vcpkgRoot = 'C:\vcpkg'
          if (-Not (Test-Path $vcpkgRoot)) {
            git clone https://github.com/microsoft/vcpkg $vcpkgRoot
          }
          & $vcpkgRoot\bootstrap-vcpkg.bat
          & "$vcpkgRoot\vcpkg.exe" install boost-filesystem boost-system openssl --triplet x64-windows
          if ($LASTEXITCODE -ne 0) { Write-Output "::warning::vcpkg install failed (continuing)" }
          echo "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append

      - name: Validate depends prefix or vcpkg boost
        shell: powershell
        run: |
          Set-StrictMode -Version Latest
          $hasDepends = $false
          if ($env:DEPENDS_WINDOWS_PREFIX) { $hasDepends = $true; Write-Output "Using depends prefix: $env:DEPENDS_WINDOWS_PREFIX" }
          $vpath = 'C:\vcpkg\installed\x64-windows\include\boost'
          $hasVcpkgBoost = Test-Path $vpath
          if ($hasVcpkgBoost) { Write-Output "Found vcpkg boost at $vpath" }
          if (-not $hasDepends -and -not $hasVcpkgBoost) {
            Write-Output "::warning::No MSVC depends prefix found and vcpkg boost not present. Will attempt CMake anyway."
          }

      - name: Generate robust fallback headers (CI)
        shell: powershell
        run: |
          Set-StrictMode -Version Latest
          $baseCandidates = @('src','src\version','src\qt','src\client','.')
          $base='.'
          foreach ($p in $baseCandidates) { if (Test-Path $p) { $base=$p; break } }

          # Ensure config/ exists for config-style headers expected by clientversion.h
          $configDir = Join-Path $base 'config'
          if (-Not (Test-Path $configDir)) { New-Item -ItemType Directory -Path $configDir | Out-Null }

          $clientVersion = Join-Path $base 'clientversion.h'
          if (-Not (Test-Path $clientVersion)) {
            $clientVersionContent = @(
              '#ifndef CLIENTVERSION_H'
              '#define CLIENTVERSION_H'
              '#define CLIENT_VERSION_MAJOR 0'
              '#define CLIENT_VERSION_MINOR 0'
              '#define CLIENT_VERSION_REVISION 0'
              '#define CLIENT_VERSION_BUILD 0'
              '#define COPYRIGHT_YEAR 2025'
              '#endif'
            ) -join "`r`n"
            $clientVersionContent | Out-File -FilePath $clientVersion -Encoding ascii
            Write-Output "Generated $clientVersion"
          } else { Write-Output "$clientVersion exists; skipping" }

          $dashcfg = Join-Path $configDir 'dash-config.h'
          if (-Not (Test-Path $dashcfg)) {
            $dashcfgContent = @(
              '#ifndef DASH_CONFIG_H'
              '#define DASH_CONFIG_H'
              '#define PACKAGE_NAME "VKAX"'
              '#define PACKAGE_VERSION "0.0.0"'
              '#define VERSION "0.0.0"'
              '#define CLIENT_VERSION_MAJOR 0'
              '#define CLIENT_VERSION_MINOR 0'
              '#define CLIENT_VERSION_REVISION 0'
              '#define CLIENT_VERSION_BUILD 0'
              '#define CLIENT_VERSION_IS_RELEASE 0'
              '#define COPYRIGHT_YEAR 2025'
              '#define HAVE_BOOST 1'
              '#endif'
            ) -join "`r`n"
            $dashcfgContent | Out-File -FilePath $dashcfg -Encoding ascii
            Write-Output "Generated $dashcfg"
          } else { Write-Output "$dashcfg exists; skipping" }

      - name: "Debug: show vcpkg, depends prefix, and generated headers"
        shell: powershell
        run: |
          Write-Output "VCPKG_ROOT=$env:VCPKG_ROOT"
          if (Test-Path C:\vcpkg) { Get-ChildItem C:\vcpkg -Depth 2 | Select-Object -First 40 }
          Write-Output "Listing depends prefixes (top-level):"
          Get-ChildItem .\depends -Directory -ErrorAction SilentlyContinue | Select-Object -First 40 | ForEach-Object { Write-Output $_.FullName }
          Write-Output "Looking for depends/x86_64-pc-windows-msvc*"
          Get-ChildItem .\depends -Directory -Filter "x86_64-pc-windows-msvc*" -ErrorAction SilentlyContinue | ForEach-Object { Write-Output $_.FullName }
          Write-Output "Checking for generated headers:"
          Get-ChildItem -Path . -Filter clientversion.h -Recurse -ErrorAction SilentlyContinue | Select-Object -First 10
          if (Test-Path .\src\clientversion.h) { Get-Content .\src\clientversion.h | Select-Object -First 40 }

      - name: CMake configure & build (MSVC + depends/vcpkg)
        shell: powershell
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
        run: |
          if (Test-Path .\CMakeLists.txt) {
            $cmakeArgs = @()
            if ($env:DEPENDS_WINDOWS_PREFIX) {
              Write-Output "Using depends prefix: $env:DEPENDS_WINDOWS_PREFIX"
              $cmakeArgs += "-DCMAKE_PREFIX_PATH=$env:DEPENDS_WINDOWS_PREFIX"
            } else {
              $toolchain = Join-Path $env:VCPKG_ROOT 'scripts\buildsystems\vcpkg.cmake'
              Write-Output "Using vcpkg toolchain: $toolchain"
              $cmakeArgs += "-DCMAKE_TOOLCHAIN_FILE=$toolchain"
            }
            $cmakeArgs += "-DCMAKE_CXX_STANDARD=20"
            $cmakeArgs += "-DBUILD_TESTS=OFF"
            $cmakeArgs += "-DCMAKE_C_FLAGS=/DHAVE_CONFIG_H"
            $cmakeArgs += "-DCMAKE_CXX_FLAGS=/DHAVE_CONFIG_H"
            $cmakeCmd = "cmake -S . -B build -G Ninja " + ($cmakeArgs -join ' ')
            Write-Output "Running: $cmakeCmd"
            Invoke-Expression $cmakeCmd
            cmake --build build --config Release -- -j:1
          } else {
            Write-Output "::notice::No CMakeLists.txt; skipping."
          }

      - name: Collect Windows binaries
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist_win | Out-Null
          Get-ChildItem -Path build -Filter "vkax*" -Recurse -File | ForEach-Object { Copy-Item -Path $_.FullName -Destination dist_win }

      - name: Upload windows artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-windows-2022
          path: |
            dist_win/**/*
          if-no-files-found: warn

  # ---------------------
  # Group: macOS builds (production)
  # ---------------------
  macos:
    name: native • macOS • ${{ matrix.macos }}
    runs-on: ${{ matrix.macos }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        macos: [macos-13]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Resolve Homebrew and install build tools
        shell: bash
        run: |
          set -euo pipefail
          echo "Runner arch: $(uname -m)"
          brew update || true
          if brew list --formula cmake >/dev/null 2>&1; then
            echo "cmake already installed; skipping install to avoid tap conflicts"
          else
            brew install automake libtool pkg-config cmake ninja libnatpmp || true
          fi

      - name: Cache depends sources + ccache
        uses: ./.github/cache
        with:
          key: ${{ runner.os }}-macos-23.1.7779620-${{ hashFiles('depends/packages/*.mk') }}
          paths: |
            depends/sources
            ~/.ccache
          restore-keys: ${{ runner.os }}-macos-

      - name: "Diagnostic: CMakeLists and tree"
        shell: bash
        run: |
          set -euo pipefail
          echo "CMakeLists.txt present: " $( [ -f CMakeLists.txt ] && echo yes || echo no )
          echo "Top-level files:"
          ls -la | sed -n '1,120p' || true

      - name: Build vendored depends (macOS host)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d depends ]; then
            echo "::warning::No depends/ dir found; skipping vendored deps"
            exit 0
          fi
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            HOST=aarch64-apple-darwin
          else
            HOST=x86_64-apple-darwin
          fi
          echo "Building depends for host: $HOST"
          J=1
          # raise soft file-descriptor limit
          ulimit -n 4096 || true
          make -C depends -j1 HOST="$HOST" || true

      - name: Check vendored depends prefix (macOS)
        shell: bash
        run: |
          set -euo pipefail
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            HOST=aarch64-apple-darwin
          else
            HOST=x86_64-apple-darwin
          fi
          if ls depends/${HOST}* >/dev/null 2>&1; then
            echo "Found depends prefix: $(ls -d depends/${HOST}* | tr '\n' ' ')"
          else
            echo "::warning::Vendored depends prefix not found for macOS host $HOST (expected depends/${HOST}*)"
          fi

      - name: Configure & build (macOS)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f CMakeLists.txt ]; then
            cmake -S . -B build-macos -G Ninja -DCMAKE_BUILD_TYPE=Release || true
            cmake --build build-macos -j1 || true
          else
            echo "No CMakeLists.txt; attempting autotools build"
            if [ -x ./autogen.sh ]; then
              ./autogen.sh || true
              ./configure --prefix="$(pwd)/depends/${HOST}" || true
              make -j1 || true
            else
              echo "No autogen.sh; nothing to build on macOS"
            fi
          fi

      - name: Collect macOS binaries
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist_macos
          find build-macos -type f -perm -111 -name 'vkax*' -exec cp -a {} dist_macos/ \; || true
          find src -type f -perm -111 -name 'vkax*' -exec cp -a {} dist_macos/ \; || true
          if [ -d dist_macos ]; then (cd dist_macos && sha256sum * > sha256sums.txt || true); fi

  # ---------------------
  # Final sanity / audit
  # ---------------------
  depends_audit:
    name: depends • audit
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Generate dependency source URL report (text)
        shell: bash
        run: |
          set -euo pipefail
          outdir=depends_audit
          mkdir -p "$outdir"
          out="$outdir/DEPENDENCY_SOURCES.txt"
          {
            echo "Dependency Source Report"
            echo "Generated: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo
          } > "$out"
          shopt -s nullglob
          for f in depends/packages/*.mk; do
            pkg=$(sed -n 's/^package[[:space:]]*=[[:space:]]*//p' "$f" | head -n1)
            [ -z "$pkg" ] && pkg=$(basename "$f" .mk)
            url=$(sed -n 's/^[[:space:]]*\$[(]package[)]_url[[:space:]]*[:+?]*=[[:space:]]*//p' "$f" | head -n1)
            giturl=$(sed -n 's/^[[:space:]]*\$[(]package[)]_git_url[[:space:]]*[:+?]*=[[:space:]]*//p' "$f" | head -n1)
            fname=$(sed -n 's/^[[:space:]]*\$[(]package[)]_file_name[[:space:]]*[:+?]*=[[:space:]]*//p' "$f" | head -n1)
            [ -z "$fname" ] && fname=$(sed -n 's/^[[:space:]]*\$[(]package[)]_filename[[:space:]]*[:+?]*=[[:space:]]*//p' "$f" | head -n1)
            sha_decl=$(sed -n 's/^[[:space:]]*\$[(]package[)]_sha256\(sum\)*[[:space:]]*[:+?]*=[[:space:]]*//p' "$f" | head -n1)

            typ=unknown; src=""
            [ -n "$giturl" ] && { typ=git; src="$giturl"; }
            [ -n "$url" ] && { typ=archive; src="$url"; }

            file_path=""
            if [ -n "$fname" ] && [ -f "depends/sources/$fname" ]; then
              file_path="depends/sources/$fname"
            else
              cand=""
              if [ -d depends/sources ]; then
                for file in depends/sources/*; do
                  [ -e "$file" ] || continue
                  fname_b=$(basename "$file")
                  if [[ "$fname_b" =~ ^${pkg}(|[-_.].*)\.(tar\.gz|tgz|tar\.bz2|tbz2|tar\.xz|txz|zip|7z)$ ]]; then
                    cand="$fname_b"
                    break
                  fi
                done
              fi
              [ -n "$cand" ] && file_path="depends/sources/$cand"
            fi

            size="n/a"; mtime="n/a"; sha256="n/a"
            if [ -n "$file_path" ] && [ -f "$file_path" ]; then
              size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path")
              epoch=$(stat -c%Y "$file_path" 2>/dev/null || stat -f%m "$file_path")
              mtime=$(date -u -d "@${epoch}" +'%Y-%m-%dT%H:%M:%SZ' 2>/dev/null || date -u -r "$epoch" +'%Y-%m-%dT%H:%M:%SZ')
              sha256=$(sha256sum "$file_path" 2>/dev/null | awk '{print $1}')
            elif [ -n "$sha_decl" ]; then
              sha256="$sha_decl"
            fi

            {
              echo "Package: $pkg"
              echo "Type: $typ"
              echo "URL: ${src:-n/a}"
              echo "File: ${file_path:-missing}"
              echo "Size: $size"
              echo "DownloadedAt: $mtime"
              echo "SHA256: $sha256"
              echo "-----"
            } >> "$out"
          done
          echo "Wrote $out"
      - name: Upload dependency URL report
        uses: actions/upload-artifact@v4
        with:
          name: depends-source-urls
          path: depends_audit/DEPENDENCY_SOURCES.txt
          if-no-files-found: warn

  release:
    name: Release (tag only)
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Promote artifacts to release
        shell: bash
        run: |
          echo "(release step placeholder)"
