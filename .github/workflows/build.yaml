name: VKAX Multi-OS Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-macbuild, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C

jobs:

  # ---------------- ANDROID (daemon + cli + tx, no Qt) ----------------
  android-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04
    env:
      HOST: aarch64-linux-android
      ANDROID_API: "21"
    steps:
      - uses: actions/checkout@v4
        with: { lfs: true }

      - name: Tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential automake libtool pkg-config python3 unzip wget cmake ninja-build

      - name: Install Android SDK + NDK (r25c)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
          unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses >/dev/null
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platforms;android-${ANDROID_API}" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build depends (no Qt) â€” NDK clang shims for Boost
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -e
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          test -x "$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          # Boost expects ${HOST}-clang(++) without API suffix; provide shims.
          ln -sf "${TOOLCHAIN_BIN}/${HOST}${ANDROID_API}-clang"   "${TOOLCHAIN_BIN}/${HOST}-clang"
          ln -sf "${TOOLCHAIN_BIN}/${HOST}${ANDROID_API}-clang++" "${TOOLCHAIN_BIN}/${HOST}-clang++"
          export PATH="$TOOLCHAIN_BIN:$PATH"
          # Export toolchain so depends/boost picks up the right compilers.
          export CC="${HOST}${ANDROID_API}-clang"
          export CXX="${HOST}${ANDROID_API}-clang++"
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          make -C depends -j"$(nproc)" \
            HOST=${HOST} \
            ANDROID_NDK=${ANDROID_NDK_HOME} \
            ANDROID_API=${ANDROID_API} \
            ANDROID_TOOLCHAIN_BIN="$TOOLCHAIN_BIN" \
            NO_QT=1

      - name: Configure (daemon only, plus cli and tx)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          CONFIG_SITE: ${{ github.workspace }}/depends/${{ env.HOST }}/share/config.site
        run: |
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export PATH="$TOOLCHAIN_BIN:$PATH"
          export CC="${HOST}${ANDROID_API}-clang"
          export CXX="${HOST}${ANDROID_API}-clang++"
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"
          ./autogen.sh || true
          ./configure \
            --host=${HOST} --build=$(gcc -dumpmachine) \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="-O2 -fPIC"

      - name: Build + Package (vkaxd, vkax-cli, vkax-tx)
        run: |
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true
          file "$BUILD_DIR/"* || true
          tar -cvzf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz

