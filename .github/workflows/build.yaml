name: VKAX Build 
on:
  push:
    branches:
      - v100.11.5-macbuild*
  pull_request:
    branches:
      - v100.11.5-macbuild
env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_LOG_ARTIFACT_DIR: test-logs

jobs:
  checking-build-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *v100.11.5* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  build-macos13:
    name: macOS 13 Intel Build
    needs: checking-build-version
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Getting Version
        uses: actions/download-artifact@v4
      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias setuptools
      - name: Build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          export CXXFLAGS="-Wno-deprecated-builtins -Wno-deprecated-declarations -std=c++14"
          export CFLAGS="-Wno-deprecated-builtins -Wno-deprecated-declarations"
          make -C depends -j8
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0
      - name: Build binary
        run: |
          make -j8
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum vkax-cli >> checksums.txt
          openssl sha256 vkax-cli >> checksums.txt
          shasum vkaxd >> checksums.txt
          openssl sha256 vkaxd >> checksums.txt
          shasum vkax-qt >> checksums.txt
          openssl sha256 vkax-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos-${{ needs.checking-build-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos-${{ needs.checking-build-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-macos-${{ needs.checking-build-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          openssl sha256 ${COMPRESS_DIR}/${COIN_NAME}-macos-${{ needs.checking-build-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos13-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Generate macOS dmg files
        run: |
          make deploy
      - name: Upload dmg file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos13-dmg-${{ env.BUILD_VERSION }}
          path: vkax-Qt.dmg

  build-macos13-arm64:
    name: macOS 13 ARM64 Build
    needs: checking-build-version
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Getting Version
        uses: actions/download-artifact@v4
      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias setuptools
      - name: Build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          export CXXFLAGS="-Wno-deprecated-builtins -Wno-deprecated-declarations -std=c++14"
          export CFLAGS="-Wno-deprecated-builtins -Wno-deprecated-declarations"
          make -C depends -j8
      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-apple-darwin20.6.0
      - name: Build binary
        run: |
          make -j8
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - name: Generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          shasum vkax-cli >> checksums.txt
          openssl sha256 vkax-cli >> checksums.txt
          shasum vkaxd >> checksums.txt
          openssl sha256 vkaxd >> checksums.txt
          shasum vkax-qt >> checksums.txt
          openssl sha256 vkax-qt >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-macos-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          openssl sha256 ${COMPRESS_DIR}/${COIN_NAME}-macos-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos13-arm64-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
      - name: Generate macOS dmg files
        run: |
          make deploy
      - name: Upload dmg file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos13arm64-dmg-${{ env.BUILD_VERSION }}
          path: vkax-Qt.dmg
