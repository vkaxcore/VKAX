# VKAX Android APK build — aarch64. v5: YAML-safe, fixes Boost retargeting and libc++ headers.
# Do not edit randomly; wrappers strip hostile flags and re-apply Android triple + sysroot. — Setvin

name: VKAX Android APK Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C

jobs:
  android-apk:
    name: Android aarch64 build
    runs-on: ubuntu-22.04
    env:
      HOST: aarch64-linux-android
      ANDROID_API: "21"
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Host tooling
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config \
            python3 unzip wget cmake ninja-build zip curl

      - name: Gradle 8.7
        run: |
          set -eux
          curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o /tmp/gradle.zip
          sudo mkdir -p /opt/gradle
          sudo unzip -q /tmp/gradle.zip -d /opt/gradle
          echo "/opt/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"

      - name: Install Android SDK and NDK r23c
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          # Set up SDK tools
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
          unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          
          # Accept licenses
          sdkmanager --licenses || true
          
          # Install platform tools and the NDK manually from a specific link
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}"
          
          # Download and manually install NDK r23c
          wget -q https://dl.google.com/android/repository/android-ndk-r23c-linux.zip -O /tmp/ndk.zip
          unzip -q /tmp/ndk.zip -d "$ANDROID_SDK_ROOT/ndk"
          
          # Set environment variables for NDK
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/android-ndk-r23c" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/ndk/android-ndk-r23c/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"
          
          # Check NDK installation
          ls -l $ANDROID_SDK_ROOT/ndk/
          ls -l $ANDROID_SDK_ROOT/ndk/android-ndk-r23c/toolchains/llvm/prebuilt/linux-x86_64/bin
          
          # Verify the NDK version
          cat $ANDROID_SDK_ROOT/ndk/android-ndk-r23c/build.gradle

      - name: List NDK toolchain binaries
        run: |
          echo "Checking for clang++ in NDK toolchain..."
          ls -l $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin | grep aarch64-linux-android21-clang++

      - name: Print NDK Path and Version
        run: |
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
          ls $ANDROID_NDK_HOME
          clang++ --version || true

