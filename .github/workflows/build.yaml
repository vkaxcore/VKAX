---
name: VKAX Full Build

on:
  push:
    branches:
      - main
      - v100.11.6*
      - develop
  pull_request:
    branches:
      - develop

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_LOG_ARTIFACT_DIR: test-logs

jobs:
  checking-build-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'
      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *v100.10.3* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  build-macos13-amd64:
    name: macOS 13 AMD64 Build
    needs: checking-build-version
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias setuptools
      - run: |
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(sysctl -n hw.logicalcpu)
      - run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0
      - run: |
          make -j$(sysctl -n hw.logicalcpu)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - run: |
          cd $BUILD_DIR
          shasum vkax-cli >> checksums.txt
          shasum vkaxd >> checksums.txt
          shasum vkax-qt >> checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos13-${{ needs.checking-build-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos13-${{ needs.checking-build-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos13-${{ needs.checking-build-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

  build-macos13-arm64:
    name: macOS 13 ARM64 Build
    needs: checking-build-version
    runs-on: macos-13-xlarge
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias setuptools
      - run: |
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(sysctl -n hw.logicalcpu)
      - run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0
      - run: |
          make -j$(sysctl -n hw.logicalcpu)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - run: |
          cd $BUILD_DIR
          shasum vkax-cli >> checksums.txt
          shasum vkaxd >> checksums.txt
          shasum vkax-qt >> checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-macos13-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-macos13-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos13-arm64-${{ needs.checking-build-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu22-amd64:
    name: Ubuntu 22.04 AMD64 Build
    needs: checking-build-version
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
      - run: |
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc)
      - run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu
      - run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*
      - run: |
          cd $BUILD_DIR
          shasum * >> checksums.txt
          sha256sum * >> checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu22-${{ needs.checking-build-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu22-${{ needs.checking-build-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ needs.checking-build-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu22-arm64:
    name: Ubuntu 22.04 ARM64 Build
    needs: checking-build-version
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool g++-aarch64-linux-gnu autotools-dev automake pkg-config python3 bsdmainutils cmake
      - run: |
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu
      - run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu
      - run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
      - run: |
          cd $BUILD_DIR
          shasum * >> checksums.txt
          sha256sum * >> checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu22-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu22-arm64-${{ needs.checking-build-version.outputs.version }}.tar.gz ${COMPRESS_DIR}/
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-arm64-${{ needs.checking-build-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

  build-win-x86_64:
    name: Windows x86_64 Cross Compile
    needs: checking-build-version
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - run: |
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      - run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32
      - run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} $BUILD_DIR/
      - run: |
          cd $BUILD_DIR
          shasum * >> checksums.txt
          sha256sum * >> checksums.txt
          cd ..
          zip -r ${COIN_NAME}-win-${{ needs.checking-build-version.outputs.version }}.zip $BUILD_DIR/
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-win-${{ needs.checking-build-version.outputs.version }}.zip ${COMPRESS_DIR}/
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-win-${{ needs.checking-build-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}
