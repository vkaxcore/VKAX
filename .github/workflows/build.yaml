name: VKAX Multi-Platform Build

on:
  push:
    branches:
      - main
      - develop
      - v100.11.5*
  pull_request:
    branches:
      - develop
  workflow_dispatch:

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_DIR: vkax-test
  BOOST_VERSION: 1_73_0
  QT_PATH: /usr/local/opt/qt@5

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      - name: Choose version
        id: selected-version
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]]; then
            version=${{ steps.versions.outputs.snapshot-version }}
          else
            version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  build-linux:
    name: Linux Build Matrix
    needs: get-version
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        ubuntu: [20.04, 22.04]
    runs-on: ubuntu-${{ matrix.ubuntu }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake git curl libminiupnpc-dev libnatpmp-dev libzmq3-dev libdb-dev libdb++-dev
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo apt install -y g++-aarch64-linux-gnu
          fi

      - name: Fetch bls-dash
        run: |
          rm -rf depends/work/build/${{ matrix.arch }}-pc-linux-gnu/bls-dash
          mkdir -p depends/work/build/${{ matrix.arch }}-pc-linux-gnu
          cd depends/work/build/${{ matrix.arch }}-pc-linux-gnu
          curl -L https://github.com/dashpay/bls-signatures/archive/1.2.0.tar.gz | tar xz --strip-components=1
          curl -L https://github.com/relic-toolkit/relic/archive/aecdcae7956f542fbee2392c1f0feb0a8ac41dc5.tar.gz | tar xz
          cd -

      - name: Build depends
        run: |
          HOST=${{ matrix.arch }}-pc-linux-gnu
          make -C depends -j$(nproc) HOST=$HOST

      - name: Configure VKAX
        run: |
          ./autogen.sh
          HOST=${{ matrix.arch }}-pc-linux-gnu
          ./configure --prefix=$(pwd)/depends/$HOST \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      CXXFLAGS="-Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion"

      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip $TEST_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          cp src/{vkax-cli,vkaxd,qt/vkax-qt} $TEST_DIR/
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} ${BUILD_DIR}_not_strip/
          strip $BUILD_DIR/* || echo "strip skipped"

      - name: Compress & Upload Artifacts
        run: |
          mkdir -p $COMPRESS_DIR
          tar -czvf ${COMPRESS_DIR}/vkax-linux-${{ matrix.arch }}-${{ matrix.ubuntu }}-${{ needs.get-version.outputs.version }}.tar.gz -C $BUILD_DIR .
        uses: actions/upload-artifact@v4
        with:
          name: vkax-linux-${{ matrix.arch }}-${{ matrix.ubuntu }}-${{ needs.get-version.outputs.version }}
          path: $COMPRESS_DIR

  build-macos:
    name: macOS Build Matrix
    needs: get-version
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Dependencies
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python qt@5
          pip3 install ds_store mac_alias setuptools
          export BDB_INCLUDE_DIR=$(brew --prefix berkeley-db@4)/include
          export BDB_LIB_DIR=$(brew --prefix berkeley-db@4)/lib
          export QT_PATH=$(brew --prefix qt@5)
          export PATH=$QT_PATH/bin:$PATH
          export PKG_CONFIG_PATH=$QT_PATH/lib/pkgconfig:$PKG_CONFIG_PATH

      - name: Fetch bls-dash
        run: |
          rm -rf depends/work/build/${{ matrix.arch }}-apple-darwin20.6.0/bls-dash
          mkdir -p depends/work/build/${{ matrix.arch }}-apple-darwin20.6.0/bls-dash
          cd depends/work/build/${{ matrix.arch }}-apple-darwin20.6.0/bls-dash
          curl -L https://github.com/dashpay/bls-signatures/archive/1.2.0.tar.gz | tar xz --strip-components=1
          curl -L https://github.com/relic-toolkit/relic/archive/aecdcae7956f542fbee2392c1f0feb0a8ac41dc5.tar.gz | tar xz
          cd -

      - name: Build depends
        run: |
          HOST=${{ matrix.arch }}-apple-darwin20.6.0
          make -C depends -j$(sysctl -n hw.ncpu) HOST=$HOST

      - name: Configure VKAX
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/$HOST \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      CXXFLAGS="-I$BDB_INCLUDE_DIR -I$QT_PATH/include -Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion" \
                      LDFLAGS="-L$BDB_LIB_DIR -L$QT_PATH/lib" \
                      QT_SELECT=5

      - name: Build Binary
        run: |
          make -j$(sysctl -n hw.ncpu)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip $TEST_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          cp src/{vkax-cli,vkaxd,qt/vkax-qt} $TEST_DIR/
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} ${BUILD_DIR}_not_strip/
          strip $BUILD_DIR/* || echo "strip skipped"

      - name: Generate DMG
        run: |
          make deploy
          mkdir -p macos-dmg
          mv vkax-Qt.dmg macos-dmg/
          cd macos-dmg
          sha256sum *.dmg > checksums.txt
          cd ..

      - uses: actions/upload-artifact@v4
        with:
          name: vkax-macos-${{ matrix.arch }}-${{ needs.get-version.outputs.version }}
          path: $BUILD_DIR

      - uses: actions/upload-artifact@v4
        with:
          name: vkax-macos-${{ matrix.arch }}-dmg-${{ needs.get-version.outputs.version }}
          path: macos-dmg

  build-windows:
    name: Windows x64 Build
    needs: get-version
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 nsis

      - name: Fetch bls-dash
        run: |
          rm -rf depends/work/build/x86_64-w64-mingw32/bls-dash
          mkdir -p depends/work/build/x86_64-w64-mingw32/bls-dash
          cd depends/work/build/x86_64-w64-mingw32/bls-dash
          curl -L https://github.com/dashpay/bls-signatures/archive/1.2.0.tar.gz | tar xz --strip-components=1
          curl -L https://github.com/relic-toolkit/relic/archive/aecdcae7956f542fbee2392c1f0feb0a8ac41dc5.tar.gz | tar xz
          cd -

      - name: Build depends
        run: |
          HOST=x86_64-w64-mingw32
          make -C depends -j$(nproc) HOST=$HOST

      - name: Configure VKAX
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-w64-mingw32 \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb

      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip $TEST_DIR
          cp src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} $BUILD_DIR/
          mv src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} ${BUILD_DIR}_not_strip/
          mv src/test/test_vkax.exe $TEST_DIR
          strip $BUILD_DIR/*.exe || echo "strip skipped"

      - name: Generate ZIP and Checksums
        run: |
          mkdir -p $COMPRESS_DIR
          cd $BUILD_DIR
          zip -r ../$COMPRESS_DIR/vkax-windows-x64-${{ needs.get-version.outputs.version }}.zip .
          cd ../${BUILD_DIR}_not_strip
          zip -r ../$COMPRESS_DIR/vkax-windows-x64-not_strip-${{ needs.get-version.outputs.version }}.zip .
          cd ../$COMPRESS_DIR
          sha256sum *.zip > checksums.txt

      - uses: actions/upload-artifact@v4
        with:
          name: vkax-windows-x64-${{ needs.get-version.outputs.version }}
          path: $COMPRESS_DIR

      - uses: actions/upload-artifact@v4
        with:
          name: vkax-windows-x64-test-${{ needs.get-version.outputs.version }}
          path: $TEST_DIR
