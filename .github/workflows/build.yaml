name: "CI • Build VKAX"

on:
  push:
    branches: ["main", "release/**", "v*", "v**"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CCACHE_MAXSIZE: 500M

jobs:
  linux:
    name: linux • ${{ matrix.host }} • depends
    runs-on: ubuntu-24.04
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - { host: "x86_64-pc-linux-gnu" }
          - { host: "aarch64-linux-gnu", apt_extra: "g++-aarch64-linux-gnu" }
          - { host: "arm-linux-gnueabihf", apt_extra: "g++-arm-linux-gnueabihf" }
          - { host: "i686-pc-linux-gnu", apt_extra: "gcc-multilib g++-multilib", experimental: true }
          - { host: "x86_64-unknown-netbsd", experimental: true }
    continue-on-error: ${{ matrix.experimental == true }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install toolchain
        shell: bash
        env:
          APT_EXTRA: ${{ matrix.apt_extra }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            autoconf automake libtool pkg-config make cmake \
            gcc g++ bison python3 curl patch file xz-utils \
            ccache ${APT_EXTRA:-}

      - name: Init ccache dir
        shell: bash
        run: echo "CCACHE_DIR=$RUNNER_TEMP/.ccache" >> "$GITHUB_ENV"

      - name: Restore cache • depends
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: ${{ runner.os }}-depends-linux-${{ matrix.host }}-${{ hashFiles('depends/**', 'configure.ac', 'src/config/*') }}
          restore-keys: |
            ${{ runner.os }}-depends-linux-${{ matrix.host }}-

      - name: Restore cache • ccache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.ccache
          key: ${{ runner.os }}-ccache-linux-${{ matrix.host }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-linux-${{ matrix.host }}-

      - name: Build depends
        if: ${{ matrix.host != 'x86_64-unknown-netbsd' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make -C depends -j2 HOST=${HOST}

      - name: Configure
        if: ${{ matrix.host != 'x86_64-unknown-netbsd' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          export PATH="/usr/lib/ccache:$PATH"
          ./autogen.sh
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --host="${HOST}" --prefix="$PWD/depends/${HOST}" --disable-tests --disable-bench

      - name: Build
        if: ${{ matrix.host != 'x86_64-unknown-netbsd' }}
        shell: bash
        run: |
          set -euo pipefail
          export PATH="/usr/lib/ccache:$PATH"
          ccache -M "${CCACHE_MAXSIZE}"
          make -j$(nproc)

      - name: Install (stage)
        if: ${{ matrix.host != 'x86_64-unknown-netbsd' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make install DESTDIR="$PWD/stage/${HOST}" || true

      - name: Package
        if: ${{ matrix.host != 'x86_64-unknown-netbsd' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          mkdir -p dist/${HOST}
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || date +%s)"
          for f in src/vkaxd src/vkax-cli src/vkax-tx src/qt/vkax-qt; do
            if [ -x "$f" ]; then
              strip -S "$f" || true
              install -m0755 "$f" dist/${HOST}/
            fi
          done
          (cd dist/${HOST} && sha256sum * > SHA256SUMS || true)

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.host != 'x86_64-unknown-netbsd' }}
        with:
          name: linux-${{ matrix.host }}
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

  windows:
    name: windows • ${{ matrix.name }} • depends
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 150
    env:
      HOST: ${{ matrix.host }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "mingw cross x86_64", runner: "ubuntu-24.04", flavor: "cross", host: "x86_64-w64-mingw32" }
          - { name: "mingw cross i686 (experimental)", runner: "ubuntu-24.04", flavor: "cross", host: "i686-w64-mingw32", apt_extra: "g++-mingw-w64-i686", experimental: true }
          - { name: "msys2 mingw x86_64", runner: "windows-2022", flavor: "msys2", host: "x86_64-w64-mingw32", msystem: "MINGW64" }
          - { name: "msys2 mingw i686 (experimental)", runner: "windows-2022", flavor: "msys2", host: "i686-w64-mingw32", msystem: "MINGW32", experimental: true }
    continue-on-error: ${{ matrix.experimental == true }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # CROSS (Ubuntu) branch
      - name: Install toolchain (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        env:
          APT_EXTRA: ${{ matrix.apt_extra }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            autoconf automake libtool pkg-config make cmake \
            gcc g++ mingw-w64 nsis bison python3 curl patch zip unzip ccache ${APT_EXTRA:-}

      - name: Init ccache dir (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        run: echo "CCACHE_DIR=$RUNNER_TEMP/.ccache" >> "$GITHUB_ENV"

      - name: Restore cache • depends (cross)
        if: ${{ matrix.flavor == 'cross' }}
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: ${{ runner.os }}-depends-windows-cross-${{ matrix.host }}-${{ hashFiles('depends/**', 'configure.ac', 'src/config/*') }}
          restore-keys: |
            ${{ runner.os }}-depends-windows-cross-${{ matrix.host }}-

      - name: Restore cache • ccache (cross)
        if: ${{ matrix.flavor == 'cross' }}
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.ccache
          key: ${{ runner.os }}-ccache-windows-cross-${{ matrix.host }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-windows-cross-${{ matrix.host }}-

      - name: Build depends (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make -C depends -j2 HOST=${HOST}

      - name: Configure (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          export PATH="/usr/lib/ccache:$PATH"
          ./autogen.sh
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --prefix="$PWD/depends/${HOST}" --host=${HOST} --disable-tests --disable-bench

      - name: Build (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        run: |
          set -euo pipefail
          export PATH="/usr/lib/ccache:$PATH"
          ccache -M "${CCACHE_MAXSIZE}"
          make -j$(nproc)

      - name: Install (stage) (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make install DESTDIR="$PWD/stage/${HOST}" || true

      - name: Package (cross)
        if: ${{ matrix.flavor == 'cross' }}
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          mkdir -p dist/${HOST}
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || date +%s)"
          STRIP="${HOST}-strip"
          for f in src/vkaxd.exe src/vkax-cli.exe src/vkax-tx.exe src/qt/vkax-qt.exe; do
            if [ -f "$f" ]; then
              $STRIP -s "$f" || true
              install -m0755 "$f" dist/${HOST}/
            fi
          done
          (cd dist/${HOST} && sha256sum * > SHA256SUMS || true)

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.flavor == 'cross' }}
        with:
          name: windows-${{ matrix.host }}-cross
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

      # MSYS2 (Windows) branch
      - name: Setup MSYS2
        if: ${{ matrix.flavor == 'msys2' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            base-devel
            git
            make
            autoconf
            automake
            libtool
            pkgconf
            cmake
            bison
            patch
            zip
            unzip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-ccache
            mingw-w64-i686-toolchain
            mingw-w64-i686-ccache

      - name: Init ccache dir (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        shell: bash
        run: echo "CCACHE_DIR=$RUNNER_TEMP/.ccache" >> "$GITHUB_ENV"

      - name: Restore cache • depends (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: windows-msys2-depends-${{ matrix.host }}-${{ hashFiles('depends/**', 'configure.ac', 'src/config/*') }}
          restore-keys: |
            windows-msys2-depends-${{ matrix.host }}-

      - name: Restore cache • ccache (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.ccache
          key: windows-msys2-ccache-${{ matrix.host }}-${{ github.sha }}
          restore-keys: |
            windows-msys2-ccache-${{ matrix.host }}-

      - name: Build depends (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          case "$MSYSTEM" in MINGW32) MINGW_PREFIX=/mingw32 ;; MINGW64) MINGW_PREFIX=/mingw64 ;; *) MINGW_PREFIX=/mingw64 ;; esac
          export PATH="$MINGW_PREFIX/bin:$PATH"
          ./autogen.sh
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --host=${HOST} --prefix="$PWD/depends/${HOST}" --disable-tests --disable-bench

      - name: Build (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        shell: msys2 {0}
        run: |
          set -euo pipefail
          case "$MSYSTEM" in MINGW32) MINGW_PREFIX=/mingw32 ;; MINGW64) MINGW_PREFIX=/mingw64 ;; *) MINGW_PREFIX=/mingw64 ;; esac
          export PATH="$MINGW_PREFIX/bin:$PATH"
          ccache -M "${CCACHE_MAXSIZE}"
          make -j$(nproc)

      - name: Install (stage) (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        shell: msys2 {0}
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make install DESTDIR="$PWD/stage/${HOST}" || true

      - name: Package (msys2)
        if: ${{ matrix.flavor == 'msys2' }}
        shell: msys2 {0}
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          mkdir -p dist/${HOST}
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || date +%s)"
          STRIP="${HOST}-strip"
          for f in src/vkaxd.exe src/vkax-cli.exe src/vkax-tx.exe src/qt/vkax-qt.exe; do
            if [ -f "$f" ]; then
              $STRIP -s "$f" || true
              install -m0755 "$f" dist/${HOST}/
            fi
          done
          (cd dist/${HOST} && sha256sum * > SHA256SUMS || true)

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.flavor == 'msys2' }}
        with:
          name: windows-${{ matrix.host }}-msys2
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

  mac:
    name: mac • ${{ matrix.host }} • depends
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - { runner: "macos-13", host: "x86_64-apple-darwin" }
          - { runner: "macos-14", host: "arm64-apple-darwin" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install toolchain
        shell: bash
        run: |
          brew update
          brew tap-pin homebrew/core || true
          brew tap-pin homebrew/cask || true
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          export HOMEBREW_NO_ANALYTICS=1
          brew install autoconf automake libtool pkg-config ccache

      - name: Init ccache dir
        shell: bash
        run: echo "CCACHE_DIR=$RUNNER_TEMP/.ccache" >> "$GITHUB_ENV"

      - name: Restore cache • depends
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: ${{ runner.os }}-depends-mac-${{ matrix.host }}-${{ hashFiles('depends/**', 'configure.ac', 'src/config/*') }}
          restore-keys: |
            ${{ runner.os }}-depends-mac-${{ matrix.host }}-

      - name: Restore cache • ccache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.ccache
          key: ${{ runner.os }}-ccache-mac-${{ matrix.host }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-mac-${{ matrix.host }}-

      - name: Build depends
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make -C depends -j2 HOST=${HOST}

      - name: Configure
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          export PATH="/usr/local/opt/ccache/libexec:$PATH"
          ./autogen.sh
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --host="${HOST}" --prefix="$PWD/depends/${HOST}" --disable-tests --disable-bench

      - name: Build
        shell: bash
        run: |
          set -euo pipefail
          export PATH="/usr/local/opt/ccache/libexec:$PATH"
          ccache -M "${CCACHE_MAXSIZE}"
          make -j$(sysctl -n hw.ncpu)

      - name: Install (stage)
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make install DESTDIR="$PWD/stage/${HOST}" || true

      - name: Package
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          mkdir -p dist/${HOST}
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || date +%s)"
          for f in src/vkaxd src/vkax-cli src/vkax-tx src/qt/vkax-qt; do
            if [ -x "$f" ]; then
              strip -S "$f" || true
              install -m0755 "$f" dist/${HOST}/
            fi
          done
          (cd dist/${HOST} && shasum -a 256 * > SHA256SUMS || true)

      - uses: actions/upload-artifact@v4
        with:
          name: mac-${{ matrix.host }}
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

  android:
    name: android • ${{ matrix.abi }} • depends
    runs-on: ubuntu-24.04
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        include:
          - { abi: "arm64-v8a", host: "aarch64-linux-android" }
          - { abi: "armeabi-v7a", host: "arm-linux-androideabi" }
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
      ANDROID_HOME: ${{ github.workspace }}/.android-sdk
      ANDROID_NDK_VERSION: "26.1.10909125"
      ANDROID_API_LEVEL: "26"
      ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install host tools
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            unzip zip curl file ca-certificates \
            autoconf automake libtool pkg-config make cmake \
            clang lld python3 ccache

      - name: Init ccache dir
        shell: bash
        run: echo "CCACHE_DIR=$RUNNER_TEMP/.ccache" >> "$GITHUB_ENV"

      - name: Prepare SDK tools (guarded)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            tmp="$(mktemp -d)"
            curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
            unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest" || true
          fi

      - name: Accept licenses (guarded)
        shell: bash
        run: |
          set -euo pipefail
          if [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" --licenses > /dev/null || true
          fi

      - name: Install SDK components (guarded)
        shell: bash
        run: |
          set -euo pipefail
          if [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
              "platform-tools" \
              "platforms;android-${ANDROID_API_LEVEL}" \
              "build-tools;34.0.0" \
              "ndk;${ANDROID_NDK_VERSION}"
          fi

      - name: Restore cache • depends
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: android-depends-${{ matrix.host }}-${{ env.ANDROID_NDK_VERSION }}-${{ hashFiles('depends/**', 'configure.ac', 'src/config/*') }}
          restore-keys: |
            android-depends-${{ matrix.host }}-

      - name: Restore cache • ccache
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.ccache
          key: android-ccache-${{ matrix.host }}-${{ github.sha }}
          restore-keys: |
            android-ccache-${{ matrix.host }}-

      - name: Build depends (Android)
        shell: bash
        env:
          HOST: ${{ matrix.host }}
          ANDROID_SDK: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
        run: |
          set -euo pipefail
          make -C depends -j1 HOST=${HOST} ANDROID_SDK="${ANDROID_SDK}" ANDROID_NDK="${ANDROID_NDK}"

      - name: Configure (Android)
        shell: bash
        env:
          HOST: ${{ matrix.host }}
          ANDROID_SDK: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
        run: |
          set -euo pipefail
          export PATH="$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin:/usr/lib/ccache:$PATH"
          ./autogen.sh
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          export CC="ccache clang"
          export CXX="ccache clang++"
          ./configure --host="${HOST}" --prefix="$PWD/depends/${HOST}" --disable-tests --disable-bench

      - name: Build (Android)
        shell: bash
        env:
          HOST: ${{ matrix.host }}
          ANDROID_NDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
        run: |
          set -euo pipefail
          export PATH="$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          ccache -M "${CCACHE_MAXSIZE}"
          make -j2

      - name: Install (stage)
        shell: bash
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          make install DESTDIR="$PWD/stage/${HOST}" || true

      - name: Package (Android)
        shell: bash
        env:
          ABI: ${{ matrix.abi }}
          ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
          ANDROID_NDK_VERSION: "26.1.10909125"
        run: |
          set -euo pipefail
          mkdir -p dist/android-${ABI}
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || date +%s)"
          export PATH="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          for f in build/*/vkax* src/vkax*; do
            if [ -f "$f" ]; then
              llvm-strip -s "$f" || true
              cp -a "$f" dist/android-${ABI}/
            fi
          done
          (cd dist/android-${ABI} && sha256sum * > SHA256SUMS || true)

      - uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.abi }}
          path: dist/android-${{ matrix.abi }}/**
          if-no-files-found: warn
