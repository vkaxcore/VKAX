# .github/workflows/build.yaml
# VKAX Android CI (arm64) — Modules: [A] checkout [B] toolchain/JDK [C] Android SDK/NDK r25.2 [D] depends (NO Qt) [E] configure/build/package [F] diagnostics
# Critical lines: [1] branch guard (job-level) • [2] SDK/NDK install/pin • [3] CC/CXX wiring with wrapper fallback • [4] depends build flags • [5] packaging artifact
# Notes: no r23c greps/guards; we rely solely on pinned NDK 25.2; comments are YAML-safe; step names with colons are quoted.
# CI intent: produce vkaxd/vkax-cli/vkax-tx for aarch64-android and upload tarball; minimal, deterministic, legacy-safe.
name: VKAX Android Build (arm64)  # [header ok]

on:
  push:
    branches:
      - v100.11.5-android
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref to build (blank = v100.11.5-android)"
        required: false
        default: ""

env:
  COIN_NAME: vkax                     # artifact prefix
  BUILD_DIR: vkax-build               # staging for built binaries
  COMPRESS_DIR: vkax-compress         # output tar.gz
  LC_ALL: C
  LANG: C
  ANDROID_API: "25"                   # [2] API level for toolchain target triplet
  HOST: aarch64-linux-android         # Android ABI

jobs:
  android-aarch64:
    if: ${{ github.ref == 'refs/heads/v100.11.5-android' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.ref == '' || github.event.inputs.ref == 'v100.11.5-android')) }}  # [1]
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          ref: ${{ github.event.inputs.ref || 'v100.11.5-android' }}

      - name: "Java: Temurin JDK 11"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: "System deps"
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf libtool pkg-config \
                                  python3 unzip wget curl cmake ninja-build dos2unix xz-utils file zip binutils

      - name: "Determinism"
        run: |
          set -eux
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct || echo 0)" >> "$GITHUB_ENV"   # stable timestamps
          echo "MAKEFLAGS=-j2" >> "$GITHUB_ENV"                                           # tame memory on Actions

      - name: "Android: SDK + NDK r25.2 (pin)"  # [2]
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "build-tools;34.0.0" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: "NDK toolchain: CC/CXX/AR/RANLIB (wrap if missing)"  # [3]
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CC_TGT="${HOST}${ANDROID_API}-clang"
          CXX_TGT="${HOST}${ANDROID_API}-clang++"
          if [ -x "$TOOLCHAIN_BIN/$CC_TGT" ] && [ -x "$TOOLCHAIN_BIN/$CXX_TGT" ]; then
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"; echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          else
            WRAP_DIR="$RUNNER_TEMP/ndk-cc"; mkdir -p "$WRAP_DIR"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang' --target=${HOST}${ANDROID_API} \"\$@\""  > "$WRAP_DIR/$CC_TGT"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang++' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CXX_TGT"
            chmod +x "$WRAP_DIR/$CC_TGT" "$WRAP_DIR/$CXX_TGT"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"; echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar" >> "$GITHUB_ENV"; echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: "Boost user-config (clang aarch64)"
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          CXX: ${{ env.CXX }}
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          COMPILER_PATH="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          [ -x "$COMPILER_PATH" ] || COMPILER_PATH="$(command -v "${HOST}${ANDROID_API}-clang++" || command -v "$CXX")"
          printf '%s\n' 'using clang : aarch64' " : ${COMPILER_PATH}" ' : android arm 64 ;' > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      - name: "depends: config.guess/sub + EOL"
        run: |
          set -eux
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }

      - name: "depends: build (NO Qt)"  # [4]
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          BUILD_TRIPLET="$(./depends/config.guess)"
          make -C depends -j2 \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" host="$HOST" \
            ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      - name: "configure: vkaxd/cli/tx"
        env:
          HOST: ${{ env.HOST }}
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -f "./depends/${HOST}/share/config.site" ] && export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site" || true
          [ -x ./autogen.sh ] && ./autogen.sh || autoreconf -fi || true
          ./configure \
            --host="${HOST}" \
            --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui \
            --disable-bench \
            --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib \
            CXXFLAGS="-O2 -fPIC"

      - name: "build + package: vkaxd/cli/tx"  # [5]
        env:
          COIN_NAME: ${{ env.COIN_NAME }}
          BUILD_DIR: ${{ env.BUILD_DIR }}
          COMPRESS_DIR: ${{ env.COMPRESS_DIR }}
        run: |
          set -eux
          make -j2 src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/"
          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: "diagnostics: versions, file(1), DT_NEEDED, logs"
        if: always()
        run: |
          set -x
          env | egrep 'ANDROID|^CC=|^CXX=|^AR=|^RANLIB|SOURCE_DATE_EPOCH|MAKEFLAGS' | sort || true
          javac -version || true
          python3 --version || true
          file "$BUILD_DIR"/* || true
          for f in "$BUILD_DIR"/*; do readelf -h "$f" || true; readelf -d "$f" || true; done
          find . -name config.log -print -exec tail -200 {} \; || true

      - name: "artifact: upload tarball"
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/vkax-android-aarch64-daemons.tar.gz

# .github/workflows/build.yaml • Setvin • 2025-09-06 • end-of-file
