name: Build VKAX across all runners

on:
  push:
    branches: [ v100.11.5-android, "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

env:
  FALLBACK_DOWNLOAD_PATH: https://explorer.yerbas.org/depends/

jobs:
  linux:
    name: linux • ${{ matrix.os }} • ${{ matrix.host }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        host: [x86_64-pc-linux-gnu]
        include:
          # Optional cross (can keep enabled if toolchain present)
          - os: ubuntu-24.04
            host: aarch64-linux-gnu
            extra_apt: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          ref: v100.11.5-android

      - name: Prep toolchain
        if: matrix.extra_apt != ''
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y ${{ matrix.extra_apt }}

      - name: Initialize submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Autotools bootstrap
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh

      - name: depends • build
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)
          stdbuf -oL -eL make -C depends -j"${CORES}" HOST="${HOST}" 2>&1 | tee depends.build.log
          test -f "depends/${HOST}/share/config.site" || {
            echo "::error title=depends failed::missing config.site for ${HOST}" >&2
            # show last logs if any
            shopt -s nullglob || true
            logs=(depends/build-*.log)
            if [ ${#logs[@]} -gt 0 ]; then
              tail -n 200 "${logs[@]}" || true
            else
              echo "no per-package logs found under depends/" >&2
              find depends -type f -name '*.log' | tail -n 50 || true
            fi
            exit 1
          }

      - name: configure
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --disable-tests --disable-bench --without-gui
      
      - name: build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)
          stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

      - name: stage+package artifacts
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${HOST}"
          mkdir -p "${out}"
          # Collect common binaries if present
          for p in src/vkaxd src/vkax-cli src/qt/vkax-qt src/*.exe src/qt/*.exe; do
            if [ -f "$p" ]; then
              cp -v "$p" "${out}/"
            fi
          done
          # Ensure we actually have artifacts
          if ! compgen -G "${out}/*" > /dev/null; then
            echo "::error::no binaries found after build"
            echo "tree src:"; ls -laR src || true
            echo "tree src/qt:"; ls -laR src/qt || true
            exit 1
          fi
          (cd "${out}" && sha256sum * > SHA256SUMS)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-${{ matrix.os }}
          path: dist/${{ matrix.host }}
          if-no-files-found: error

  mingw-cross:
    name: linux • mingw-cross • ${{ matrix.host }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        host: [x86_64-w64-mingw32]
        include:
          - host: i686-w64-mingw32
            experimental: true
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          ref: v100.11.5-android

      - name: Install mingw toolchain
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y mingw-w64 g++-mingw-w64 make automake libtool pkg-config zip unzip

      - name: Use POSIX threading model
        run: |
          set -euo pipefail
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix || true
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix || true
          sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix || true
          sudo update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix || true

      - name: Initialize submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Autotools bootstrap
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh

      - name: depends • build
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)
          stdbuf -oL -eL make -C depends -j"${CORES}" HOST="${HOST}" 2>&1 | tee depends.build.log
          test -f "depends/${HOST}/share/config.site" || {
            echo "::error title=depends failed::missing config.site for ${HOST}" >&2
            shopt -s nullglob || true
            logs=(depends/build-*.log)
            if [ ${#logs[@]} -gt 0 ]; then
              tail -n 200 "${logs[@]}" || true
            else
              echo "no per-package logs found under depends/" >&2
              find depends -type f -name '*.log' | tail -n 50 || true
            fi
            exit 1
          }

      - name: configure (mingw)
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --host="${HOST}" --disable-tests --disable-bench --without-gui

      - name: build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || getconf _NPROCESSORS_ONLN || echo 2)
          stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

      - name: stage+package artifacts
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${HOST}"
          mkdir -p "${out}"
          for p in src/*.exe src/qt/*.exe; do
            if [ -f "$p" ]; then
              cp -v "$p" "${out}/"
            fi
          done
          if ! compgen -G "${out}/*" > /dev/null; then
            echo "::error::no windows binaries found"
            ls -laR src || true
            exit 1
          fi
          (cd "${out}" && sha256sum * > SHA256SUMS)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-mingw-cross
          path: dist/${{ matrix.host }}
          if-no-files-found: error

  windows-msys2:
    name: windows • msys2 mingw64 • depends→autotools
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          ref: v100.11.5-android

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          release: false
          update: true
          install: >-
            base-devel
            git
            zip
            unzip
            wget
            tar
            patch
            automake
            autoconf
            libtool
            pkg-config
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python

      - name: Env
        run: |
          set -euo pipefail
          echo "MINGW_PREFIX=/mingw64" >> $GITHUB_ENV
          echo "PATH=/mingw64/bin:$PATH" >> $GITHUB_ENV

      - name: Initialize submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Autotools bootstrap
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh

      - name: depends • build (msys2)
        env:
          HOST: x86_64-w64-mingw32
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          make -C depends -j"${CORES}" HOST="${HOST}" 2>&1 | tee depends.build.log
          if [ ! -f "depends/${HOST}/share/config.site" ]; then
            echo "::error title=depends failed::missing config.site for ${HOST}" >&2
            shopt -s nullglob || true
            logs=(depends/build-*.log)
            if [ ${#logs[@]} -gt 0 ]; then
              tail -n 200 "${logs[@]}" || true
            else
              echo "No depends/build-*.log to show." >&2
            fi
            exit 1
          fi

      - name: configure
        env:
          HOST: x86_64-w64-mingw32
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export PATH="/mingw64/bin:$PATH"
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --host="${HOST}" --disable-tests --disable-bench --without-gui

      - name: build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          make -j"${CORES}" 2>&1 | tee build.log

      - name: stage+package artifacts
        env:
          HOST: x86_64-w64-mingw32
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${HOST}"
          mkdir -p "${out}"
          for p in src/*.exe src/qt/*.exe; do
            if [ -f "$p" ]; then
              cp -v "$p" "${out}/"
            fi
          done
          if ! compgen -G "${out}/*" > /dev/null; then
            echo "::error::no windows binaries found"
            ls -laR src || true
            exit 1
          fi
          (cd "${out}" && sha256sum * > SHA256SUMS || true)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-x86_64-w64-mingw32-windows-msys2
          path: dist/x86_64-w64-mingw32
          if-no-files-found: error

  macos:
    name: macos • ${{ matrix.os }} • ${{ matrix.host }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            host: x86_64-apple-darwin19
            mac_deploy: "10.15"
          - os: macos-14
            host: aarch64-apple-darwin
            mac_deploy: "11.0"
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          ref: v100.11.5-android

      - name: Initialize submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Autotools bootstrap
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh

      - name: depends • build
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(sysctl -n hw.ncpu || echo 3)
          make -C depends -j"${CORES}" HOST="${HOST}" 2>&1 | tee depends.build.log
          test -f "depends/${HOST}/share/config.site" || {
            echo "::error title=depends failed::missing config.site for ${HOST}" >&2
            tail -n 200 depends/build-*.log || true
            exit 1
          }

      - name: configure
        env:
          HOST: ${{ matrix.host }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.mac_deploy }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --disable-tests --disable-bench --without-gui

      - name: build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(sysctl -n hw.ncpu || echo 3)
          make -j"${CORES}" 2>&1 | tee build.log

      - name: stage+package artifacts
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${HOST}"
          mkdir -p "${out}"
          for p in src/vkaxd src/vkax-cli src/qt/vkax-qt; do
            if [ -f "$p" ]; then
              cp -v "$p" "${out}/"
            fi
          done
          if ! compgen -G "${out}/*" > /dev/null; then
            echo "::error::no binaries found"
            ls -laR src || true
            exit 1
          fi
          (cd "${out}" && shasum -a 256 * > SHA256SUMS)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-${{ matrix.os }}
          path: dist/${{ matrix.host }}
          if-no-files-found: error

  android:
    name: android • depends→autotools • ${{ matrix.host }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: aarch64-linux-android
            abi: arm64-v8a
            api: "21"
          - host: arm-linux-androideabi
            abi: armeabi-v7a
            api: "19"
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          ref: v100.11.5-android

      - name: Install Android cmdline-tools + NDK r23b
        id: android
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ANDROID_HOME="$PWD/android-sdk"
          ANDROID_SDK_ROOT="$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" >/dev/null
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "ndk;23.1.7779620" >/dev/null
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/23.1.7779620" >> $GITHUB_ENV
          echo "ANDROID_API_LEVEL=${{ matrix.api }}" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/ndk/23.1.7779620/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Initialize submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Autotools bootstrap
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh

      - name: depends • build
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -C depends -j"${CORES}" HOST="${HOST}" ANDROID_SDK="$ANDROID_SDK_ROOT" ANDROID_NDK="$ANDROID_NDK" ANDROID_API_LEVEL="${ANDROID_API_LEVEL}" 2>&1 | tee depends.build.log
          test -f "depends/${HOST}/share/config.site" || {
            echo "::error title=depends failed::missing config.site for ${HOST}" >&2
            shopt -s nullglob || true
            logs=(depends/build-*.log)
            if [ ${#logs[@]} -gt 0 ]; then
              tail -n 200 "${logs[@]}" || true
            else
              echo "no per-package logs found under depends/" >&2
              find depends -type f -name '*.log' | tail -n 50 || true
            fi
            exit 1
          }

      - name: configure
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          ./configure --host="${HOST}" --disable-tests --disable-bench --without-gui

      - name: build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES=$(nproc || echo 2)
          stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

      - name: stage+package artifacts
        env:
          HOST: ${{ matrix.host }}
          ABI: ${{ matrix.abi }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${HOST}-${ABI}"
          mkdir -p "${out}"
          # possible locations
          for p in src/vkaxd src/vkax-cli build/*/vkaxd build/*/vkax-cli; do
            if [ -f "$p" ]; then
              cp -v "$p" "${out}/"
            fi
          done
          if ! compgen -G "${out}/*" > /dev/null; then
            echo "::error::no android binaries found"
            find . -maxdepth 3 -type f -name 'vkax*' -print || true
            exit 1
          fi
          (cd "${out}" && sha256sum * > SHA256SUMS)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-${{ matrix.abi }}
          path: dist/${{ matrix.host }}-${{ matrix.abi }}
          if-no-files-found: error

  # Optional experimental netbsd cross (non-blocking)
  netbsd:
    name: linux • netbsd-cross • experimental
    runs-on: ubuntu-24.04
    continue-on-error: true
    steps:
      - name: Checkout (pinned ref)
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
          ref: v100.11.5-android

      - name: Print note
        run: |
          echo "NetBSD cross build is experimental and may require custom toolchains not preinstalled."
