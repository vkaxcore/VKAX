name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - v100.11.5-android
      - dev

env:
  # ---- Global build knobs
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  ANDROID_API: "25"                 # Target API 25 as requested
  HOST: aarch64-linux-android       # Android arm64

jobs:
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04

    steps:
      # 1) Checkout with LFS (some repos need it)
      - uses: actions/checkout@v4
        with:
          lfs: true

      # 2) JDK 11 for autotools/gradle-ish bits used by some deps
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      # 3) System deps + dos2unix (to kill CRLF) + basic dev tools
      - name: Install required tools
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix \
            xz-utils file

      # 4) Android SDK + NDK (r25c) â€” idempotent; sets all common vars
      - name: Install Android SDK + NDK (r25c)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux

          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo "Installing Android SDK/NDK..."
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

            export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
            yes | sdkmanager --licenses >/dev/null
            sdkmanager \
              "platform-tools" \
              "platforms;android-${{ env.ANDROID_API }}" \
              "ndk;25.2.9519653"
          else
            echo "Android SDK/NDK already present."
          fi

          # Export all the names scripts may look for (covers more build systems)
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_SDK=$ANDROID_SDK_ROOT"      >> "$GITHUB_ENV"  # <- Fix for Makefiles expecting ANDROID_SDK
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT"     >> "$GITHUB_ENV"

          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/25.2.9519653"      >> "$GITHUB_ENV"

          # Helpful PATHs for later steps/tools
          echo "$ANDROID_SDK_ROOT/platform-tools"                                         >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"                               >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      # 5) Verify NDK, create portable wrappers if ${HOST}${API}-clang(++) are missing
      - name: Verify NDK toolchain and create wrappers if needed
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "TOOLCHAIN_BIN=$TOOLCHAIN_BIN"
          ls -la "$TOOLCHAIN_BIN" || true

          WANT_CXX="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          WANT_CC="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang"

          WRAP_DIR="$RUNNER_TEMP/ndk-cc"
          mkdir -p "$WRAP_DIR"

          # If the prebuilt shims exist, use them. Otherwise, create wrappers that pass --target.
          if [ -x "$WANT_CXX" ] && [ -x "$WANT_CC" ]; then
            echo "Found ${HOST}${ANDROID_API}-clang(++). Using them."
            echo "CC=${HOST}${ANDROID_API}-clang"   >> "$GITHUB_ENV"
            echo "CXX=${HOST}${ANDROID_API}-clang++" >> "$GITHUB_ENV"
          else
            echo "Prebuilt ${HOST}${ANDROID_API}-clang(++) not found. Creating wrappers via clang/clang++ --target=..."
            cat > "$WRAP_DIR/${HOST}${ANDROID_API}-clang" <<EOF
#!/usr/bin/env bash
exec "$TOOLCHAIN_BIN/clang" --target=${HOST}${ANDROID_API} "\$@"
EOF
            cat > "$WRAP_DIR/${HOST}${ANDROID_API}-clang++" <<EOF
#!/usr/bin/env bash
exec "$TOOLCHAIN_BIN/clang++" --target=${HOST}${ANDROID_API} "\$@"
EOF
            chmod +x "$WRAP_DIR/${HOST}${ANDROID_API}-clang" "$WRAP_DIR/${HOST}${ANDROID_API}-clang++"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=${HOST}${ANDROID_API}-clang"   >> "$GITHUB_ENV"
            echo "CXX=${HOST}${ANDROID_API}-clang++" >> "$GITHUB_ENV"
          fi

          # Ensure binutils from NDK are discoverable
          echo "AR=llvm-ar"       >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      # 6) Write Boost user-config.jam (no YAML heredoc pitfalls; fully explicit)
      - name: Configure Boost for Android (user-config.jam)
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"

          # Resolve actual compiler path we want Boost.Build to call:
          # Prefer NDK-provided ${HOST}${API}-clang++; else, rely on wrapper from PATH.
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CANDIDATE="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          if [ -x "$CANDIDATE" ]; then
            COMPILER_PATH="$CANDIDATE"
          else
            # fall back to the wrapper name (on PATH) or env CXX
            COMPILER_PATH="$(command -v "${HOST}${ANDROID_API}-clang++" || true)"
            if [ -z "$COMPILER_PATH" ]; then
              COMPILER_PATH="$(command -v "$CXX")"
            fi
          fi

          # Generate user-config.jam for Android arm64
          # NOTE: no HEREDOC inside YAML; this is a simple cat with variable expansion.
          cat > depends/user-config.jam <<EOF
using clang : aarch64
  : ${COMPILER_PATH}
  : <target-os>android <architecture>arm <address-model>64 ;
EOF

          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      # 7) Normalize line endings and make sure config.guess/config.sub exist
      - name: Fix line endings & ensure config.guess/sub
        run: |
          set -eux
          # Normalize *all* .mk/.sh files to LF to avoid "*** missing separator"
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true

          # Ensure config.guess/sub in depends/ (some trees rely on these)
          if [ ! -x depends/config.guess ]; then
            cp -f /usr/share/misc/config.guess depends/config.guess
            chmod +x depends/config.guess
          fi
          if [ ! -x depends/config.sub ]; then
            cp -f /usr/share/misc/config.sub depends/config.sub
            chmod +x depends/config.sub
          fi

      # 8) Build depends (NO_QT=1 per daemon/cli/tx only)
      - name: Build depends (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux

          # Many depends frameworks infer the local build triplet from config.guess.
          BUILD_TRIPLET="$(./depends/config.guess)"
          echo "Using BUILD_TRIPLET=$BUILD_TRIPLET"

          # Some Makefiles expect ANDROID_SDK to exist (we set this earlier).
          echo "ANDROID_SDK=$ANDROID_SDK" || true

          # Verbose depends build
          make -C depends -j"$(nproc)" \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      # 9) Configure project for cross build (daemon + cli + tx)
      - name: Configure (daemon + cli + tx)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"

          # Help autoconf pick the right triplets
          if [ -f "./depends/${HOST}/share/config.site" ]; then
            export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site"
          fi

          # Rerun autotools if present
          [ -x ./autogen.sh ] && ./autogen.sh || true

          # Use CC/CXX from env (wrappers or NDK shims), AR/RANLIB from LLVM
          ./configure \
            --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib \
            CXXFLAGS="-O2 -fPIC"

      # 10) Build & package the binaries
      - name: Build and Package (vkaxd, vkax-cli, vkax-tx)
        env:
          COIN_NAME: ${{ env.COIN_NAME }}
          BUILD_DIR: ${{ env.BUILD_DIR }}
          COMPRESS_DIR: ${{ env.COMPRESS_DIR }}
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx

          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true

          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      # 11) Diagnostics â€” always run to make debugging painless
      - name: Diagnostics (always)
        if: always()
        run: |
          set -x
          echo "=== Tree ==="
          ls -la
          echo "=== depends logs & configs ==="
          find depends -maxdepth 7 -type f \( -name bootstrap.log -o -name config.log -o -name project-config.jam -o -name user-config.jam \) -print || true
          echo "=== b2 info (if present) ==="
          B2=$(find depends -maxdepth 7 -type f -name b2 -print -quit || true)
          if [ -n "$B2" ]; then "$(dirname "$B2")/b2" --debug-configuration -n --version toolset=clang target-os=android || true; fi
          echo "=== file(1) on artifacts ==="
          file "$BUILD_DIR"/* || true

      # 12) Upload artifact (even on failure so you can inspect)
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz
