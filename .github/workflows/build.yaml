name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  # ==== Global knobs ====
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  ANDROID_API: "25"                 # You asked specifically for API 25
  HOST: aarch64-linux-android       # Target ABI (arm64-v8a)

jobs:
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04

    steps:
      # --- 1) Checkout ---
      - uses: actions/checkout@v4
        with:
          lfs: true

      # --- 2) Tooling on the runner ---
      - name: Install base build tools
        run: |
          set -eux
          sudo apt-get update
          # autotools-dev provides /usr/share/misc/config.{guess,sub}
          sudo apt-get install -y \
            build-essential autoconf automake autotools-dev libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix

      # --- 3) Android SDK/NDK (r25c) ---
      - name: Install Android SDK + NDK r25c + platform API ${{ env.ANDROID_API }}
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux

          # Install cmdline-tools if missing
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi

          # Ensure sdkmanager is on PATH
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # Accept licenses and install required packages (idempotent)
          yes | sdkmanager --licenses >/dev/null
          sdkmanager --install "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "ndk;25.2.9519653"

          # Export for later steps
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      # --- 4) Prepare NDK clang toolchain env (we DO NOT look for aarch64-linux-android25-clang++) ---
      - name: Configure NDK clang toolchain env
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          test -x "$TOOLCHAIN_BIN/clang++"  # sanity

          # Export toolchain + target flags (these override defaults in depends)
          {
            echo "CC=clang"
            echo "CXX=clang++"
            echo "AR=llvm-ar"
            echo "RANLIB=llvm-ranlib"
            echo "CFLAGS=--target=${HOST}${ANDROID_API} --sysroot=$SYSROOT -fPIC"
            echo "CXXFLAGS=--target=${HOST}${ANDROID_API} --sysroot=$SYSROOT -fPIC -std=c++17"
            echo "LDFLAGS=--target=${HOST}${ANDROID_API} --sysroot=$SYSROOT"
          } >> "$GITHUB_ENV"

      # --- 5) Normalize Makefiles and provide config.guess/sub (prevents 'missing separator' & 'config.sub: missing argument') ---
      - name: Prepare depends framework (line endings + GNU config files)
        run: |
          set -eux
          # Ensure LF endings everywhere in depends (avoids '*** missing separator')
          find depends -type f \( -name '*.mk' -o -name 'Makefile' \) -print0 | xargs -0 dos2unix || true

          # Provide up-to-date config.guess/sub used by many autoconf scripts
          if [ ! -x depends/config.guess ] || [ ! -x depends/config.sub ]; then
            if [ -f /usr/share/misc/config.guess ]; then
              cp /usr/share/misc/config.guess depends/
              cp /usr/share/misc/config.sub   depends/
            else
              # Fallback search (very defensive)
              GUESS=$(dpkg -L autotools-dev | grep '/config.guess$' | head -n1 || true)
              SUB=$(dpkg -L autotools-dev | grep '/config.sub$' | head -n1 || true)
              [ -n "$GUESS" ] && cp "$GUESS" depends/config.guess
              [ -n "$SUB" ] && cp "$SUB"   depends/config.sub
            fi
            chmod +x depends/config.guess depends/config.sub
          fi

      # --- 6) Boost user-config.jam (so b2 uses clang with NDK sysroot/target) ---
      - name: Create Boost user-config.jam for Android
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"
          SYSROOT="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          # Write without heredocs (YAML-safe). This is equivalent to:
          # using clang : aarch64 : clang++ : <compileflags>"--target=aarch64-linux-android25 --sysroot=...sysroot"
          #                                  <linkflags>   "...same..." <archiver>"llvm-ar" <ranlib>"llvm-ranlib" ;
          {
            printf '%s\n' 'using clang : aarch64'
            printf '%s\n' '  : clang++'
            printf '%s\n' "  : <compileflags>\"--target=aarch64-linux-android${ANDROID_API} --sysroot=${SYSROOT}\""
            printf '%s\n' "    <linkflags>\"--target=aarch64-linux-android${ANDROID_API} --sysroot=${SYSROOT}\""
            printf '%s\n' '    <archiver>"llvm-ar"'
            printf '%s\n' '    <ranlib>"llvm-ranlib"'
            printf '%s\n' '  ;'
          } > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      # --- 7) Build third-party deps via depends (static, no Qt) ---
      - name: Build dependencies (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          # Compute build triplet with the config.guess we just dropped in
          BUILD_TRIPLET=$(./depends/config.guess)
          echo "Using BUILD_TRIPLET=$BUILD_TRIPLET"
          make -C depends -j"$(nproc)" \
            build="$BUILD_TRIPLET" build_os="linux" \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      # --- 8) Configure your project for cross build (daemon + cli + tx) ---
      - name: Configure (daemon + cli + tx)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"
          export CONFIG_SITE="${PWD}/depends/${HOST}/share/config.site"

          # Some trees need autogen; ignore if not present.
          ./autogen.sh || true

          ./configure \
            --host="${HOST}" --build="$(gcc -dumpmachine)" \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="${CXXFLAGS}"

      # --- 9) Build your binaries + package ---
      - name: Build and Package (vkaxd, vkax-cli, vkax-tx)
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true
          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      # --- 10) Diagnostics (helpful if something fails) ---
      - name: Diagnostics (always)
        if: always()
        run: |
          set -x
          find depends -maxdepth 7 -type f \( -name bootstrap.log -o -name config.log -o -name project-config.jam -o -name user-config.jam \) -print || true
          B2=$(find depends -maxdepth 7 -type f -name b2 -print -quit || true)
          if [ -n "$B2" ]; then "$(dirname "$B2")/b2" --debug-configuration -n --version toolset=clang target-os=android || true; fi

      # --- 11) Upload artifact even on failure ---
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz
