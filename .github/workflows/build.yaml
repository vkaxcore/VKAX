name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - v100.11.5-android
      - dev

env:
  # --- Core settings you control per run/branch
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress

  # --- Cross target (arm64 / API 25 as requested)
  HOST: aarch64-linux-android
  ANDROID_API: "25"

  # --- Make locale deterministic
  LC_ALL: C
  LANG: C

jobs:
  android-aarch64-daemon:
    name: Android aarch64 (daemon + cli + tx, no Qt)
    runs-on: ubuntu-22.04

    steps:
      # 1) Checkout
      - uses: actions/checkout@v4
        with:
          lfs: true

      # 2) JDK for any java-based tools (autotools sometimes invokes java deps; harmless to have)
      - name: Set up JDK 11 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      # 3) Base build tools + utilities we use later (dos2unix, curl)
      - name: Install system packages
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config python3 \
            unzip zip wget curl cmake ninja-build \
            dos2unix

      # 4) Install Android SDK + cmdline-tools + NDK r25c (idempotent & robust)
      #    We do NOT skip just because $ANDROID_SDK_ROOT exists; we ensure each
      #    required component exists (cmdline-tools, platform 25, and NDK 25c).
      - name: Install Android SDK + NDK r25c
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux

          # Ensure cmdline-tools exist
          if [ ! -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi

          # Put sdkmanager in PATH
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # Accept licenses and make sure platform 25 + NDK r25c are installed
          yes | sdkmanager --licenses >/dev/null

          sdkmanager \
            "platform-tools" \
            "platforms;android-${{ env.ANDROID_API }}" \
            "ndk;25.2.9519653"

          # Export NDK vars for next steps
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"

      # 5) Toolchain wiring for clang (robust to wrapper absence)
      #    Newer NDKs sometimes omit the per-API wrapper (aarch64-linux-android25-clang++).
      #    We therefore always export CC/CXX as clang/clang++ with --target and __ANDROID_API__.
      #    We ALSO add the toolchain bin dir to PATH for llvm-ar, llvm-ranlib, etc.
      - name: Configure NDK LLVM toolchain env
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_API: ${{ env.ANDROID_API }}
          HOST: ${{ env.HOST }}
        run: |
          set -eux
          TOOLCHAIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64"
          BIN="$TOOLCHAIN/bin"

          # Add to PATH for llvm-* tools
          echo "$BIN" >> "$GITHUB_PATH"

          # Always use clang/clang++ with explicit target & sysroot (works even if wrapper is missing)
          {
            echo "NDK_TOOLCHAIN=$TOOLCHAIN"
            echo "CC=clang --target=${HOST}${ANDROID_API} --sysroot=$TOOLCHAIN/sysroot"
            echo "CXX=clang++ --target=${HOST}${ANDROID_API} --sysroot=$TOOLCHAIN/sysroot"
            echo "AR=llvm-ar"
            echo "RANLIB=llvm-ranlib"
            echo "STRIP=llvm-strip"
            echo "NM=llvm-nm"
          } >> "$GITHUB_ENV"

          # Diagnostics: print available compilers (non-fatal)
          ls -la "$BIN" || true
          clang --version || true
          clang++ --version || true

      # 6) Prepare Boost Build user-config.jam (no YAML heredoc, safe echo lines)
      - name: Write Boost Build user-config.jam (Android clang)
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_API: ${{ env.ANDROID_API }}
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"

          # Tell Boost.Build to use clang++ from the NDK with Android target
          CFG="using clang : android : clang++ : <compileflags>\"--target=aarch64-linux-android${ANDROID_API} --sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot\" <linkflags>\"--target=aarch64-linux-android${ANDROID_API} --sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot\" <target-os>android <address-model>64 ;"

          echo "$CFG" > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"

          # Let depends/packages/boost.mk find it
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      # 7) Harden the depends system: normalize line endings + fresh config.guess/sub
      - name: Normalize depends makefiles & refresh config.guess/sub
        run: |
          set -eux

          # Normalize CRLF -> LF to prevent "*** missing separator" at eval lines
          find depends -type f -name "*.mk" -print0 | xargs -0 dos2unix || true

          # Some upstream tarballs ship ancient config.{guess,sub}; refresh them
          curl -fsSL -o depends/config.guess https://git.savannah.gnu.org/cgit/config.git/plain/config.guess
          curl -fsSL -o depends/config.sub   https://git.savannah.gnu.org/cgit/config.git/plain/config.sub
          chmod +x depends/config.guess depends/config.sub

      # 8) Build the "depends" tree (cross dependencies; no Qt)
      - name: Build dependencies (no Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux

          # Compute canonical build triplet using our refreshed config.guess
          BUILD_TRIPLET="$(./depends/config.guess)"
          echo "Using BUILD_TRIPLET=$BUILD_TRIPLET"

          # Derive build_os/build_arch for depends/builders/*.mk (used by our improved files)
          case "$BUILD_TRIPLET" in
            x86_64-*-linux*)  build_os=linux;   build_arch=x86_64;;
            aarch64-*-linux*) build_os=linux;   build_arch=aarch64;;
            *-apple-darwin*)  build_os=darwin;  build_arch=x86_64;;
            *-w64-mingw32)    build_os=mingw32; build_arch=x86_64;;
            *)                build_os=linux;   build_arch=x86_64;;
          esac

          # Build the depends tree with explicit build/build_os; pass HOST, Android vars
          make -C depends -j"$(nproc)" \
            build="$BUILD_TRIPLET" build_os="$build_os" \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      # 9) Configure vkax (daemon+cli+tx only) against the depends prefix
      - name: Configure (daemon + cli + tx)
        env:
          HOST: ${{ env.HOST }}
        run: |
          set -eux
          export CONFIG_SITE="${PWD}/depends/${HOST}/share/config.site"

          # Use pkg-config from depends (avoid host libs)
          export PKG_CONFIG_LIBDIR="${PWD}/depends/${HOST}/lib/pkgconfig"
          export PKG_CONFIG_PATH="${PWD}/depends/${HOST}/lib/pkgconfig"

          # (Re)generate if present
          ./autogen.sh || true

          ./configure \
            --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="${PWD}/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CXXFLAGS="-O2 -fPIC" \
            LDFLAGS="-fuse-ld=lld" || { cat config.log || true; exit 1; }

      # 10) Build + package vkaxd/vkax-cli/vkax-tx
      - name: Build and Package (vkaxd, vkax-cli, vkax-tx)
        env:
          BUILD_DIR: ${{ env.BUILD_DIR }}
          COMPRESS_DIR: ${{ env.COMPRESS_DIR }}
          COIN_NAME: ${{ env.COIN_NAME }}
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx

          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/" || true

          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      # 11) Diagnostics (always) â€” extremely helpful if something fails above
      - name: Diagnostics (always)
        if: always()
        run: |
          set -x
          find depends -maxdepth 7 -type f \
            \( -name bootstrap.log -o -name config.log -o -name project-config.jam -o -name user-config.jam \) \
            -print || true
          find . -maxdepth 2 -type f -name config.log -print -exec tail -n +1 {} \; || true
          command -v aarch64-linux-android-ld || true
          command -v llvm-ar || true
          command -v llvm-ranlib || true

      # 12) Upload artifact even on failure (so you can inspect partial outputs)
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-daemons
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64-daemons.tar.gz
