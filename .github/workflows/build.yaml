.github/workflows/build.yaml
name: VKAX Android Build (arm64)

on:
  push:
    branches:
      - v100.11.5-android
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref to build (blank = v100.11.5-android)"
        required: false
        default: ""

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  QT_RCC_SOURCE_DATE_OVERRIDE: "1"
  ANDROID_API: "25"
  HOST: aarch64-linux-android

jobs:
  android-aarch64:
    if: ${{ github.ref == 'refs/heads/v100.11.5-android' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.ref == '' || github.event.inputs.ref == 'v100.11.5-android')) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          ref: ${{ github.event.inputs.ref || 'v100.11.5-android' }}

      - name: "Guard: banned strings and duplicate ndk.mk includes"
        run: |
          set -euo pipefail
          matches="$(git grep -nE 'android-ndk-r23c|ndk-r23c' -- . || true)"
          if [ -n "$matches" ]; then echo "BANNED STRING(S) FOUND:"; echo "$matches"; exit 3; fi
          incs="$(grep -RInE '^[[:space:]]*include[[:space:]].*packages/ndk\.mk' depends || true)"
          echo "$incs"
          cnt="$(printf '%s\n' "$incs" | sed '/^$/d' | wc -l)"
          test "${cnt:-0}" -le 1 || { echo "ERROR: packages/ndk.mk included $cnt times"; exit 4; }
          grep -q "VKAX_NDK_MK_INCLUDED" depends/packages/ndk.mk || { echo "ERROR: ndk.mk missing include guard"; exit 5; }
          ! grep -q "aarch64-linux-android25-clang" depends/packages/ndk.mk || { echo "ERROR: hardcoded toolchain name found"; exit 6; }

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Install base tools
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 unzip wget curl cmake ninja-build dos2unix xz-utils file zip binutils

      - name: Determinism + OOM controls
        run: |
          set -eux
          ulimit -c 0
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct || echo 0)" >> "$GITHUB_ENV"
          echo "MAKEFLAGS=-j2" >> "$GITHUB_ENV"
          unset QMAKESPEC XQMAKESPEC QMAKEPATH QMAKEFEATURES

      - name: Install Android SDK + NDK r25.2 + build-tools
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "build-tools;34.0.0" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Verify NDK toolchain and set CC/CXX
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CC_TGT="${HOST}${ANDROID_API}-clang"
          CXX_TGT="${HOST}${ANDROID_API}-clang++"
          if [ -x "$TOOLCHAIN_BIN/$CC_TGT" ] && [ -x "$TOOLCHAIN_BIN/$CXX_TGT" ]; then
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"
            echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          else
            WRAP_DIR="$RUNNER_TEMP/ndk-cc"
            mkdir -p "$WRAP_DIR"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CC_TGT"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang++' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CXX_TGT"
            chmod +x "$WRAP_DIR/$CC_TGT" "$WRAP_DIR/$CXX_TGT"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"
            echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Configure Boost toolset (Android clang aarch64)
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          CXX: ${{ env.CXX }}
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          COMPILER_PATH="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          if [ ! -x "$COMPILER_PATH" ]; then
            COMPILER_PATH="$(command -v "${HOST}${ANDROID_API}-clang++" || true)"
            [ -z "$COMPILER_PATH" ] && COMPILER_PATH="$(command -v "$CXX")"
          fi
          printf '%s\n' 'using clang : aarch64' " : ${COMPILER_PATH}" ' : android arm 64 ;' > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      - name: Normalize scripts & ensure config.guess/sub
        run: |
          set -eux
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }

      - name: Build depends (NO Qt)
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          BUILD_TRIPLET="$(./depends/config.guess)"
          make -C depends -j2 \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" host="$HOST" \
            ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      - name: Configure (vkaxd/cli/tx)
        env:
          HOST: ${{ env.HOST }}
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -f "./depends/${HOST}/share/config.site" ] && export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site" || true
          ./autogen.sh || true
          ./configure \
            --host="${HOST}" \
            --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui \
            --disable-bench \
            --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib \
            CXXFLAGS="-O2 -fPIC"

      - name: Build daemons
        run: |
          set -eux
          make -j2 src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/"
          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: Install Gradle 7.5
        run: |
          set -eux
          curl -sSfL -o /tmp/gradle.zip https://services.gradle.org/distributions/gradle-7.5-bin.zip
          sudo mkdir -p /opt/gradle && sudo unzip -q /tmp/gradle.zip -d /opt/gradle
          echo "/opt/gradle/gradle-7.5/bin" >> "$GITHUB_PATH"
          gradle -v

      - name: Create minimal APK project and bundle daemons as assets
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -eux
          APP_ROOT="$RUNNER_TEMP/vkax-apk"; mkdir -p "$APP_ROOT/app/src/main/assets"
          # Project files
          cat > "$APP_ROOT/settings.gradle" << 'EOF'
          rootProject.name = "vkax-apk"
          include(":app")
          EOF
          cat > "$APP_ROOT/build.gradle" << 'EOF'
          buildscript {
            repositories { google(); mavenCentral() }
            dependencies { classpath "com.android.tools.build:gradle:7.4.2" }
          }
          allprojects { repositories { google(); mavenCentral() } }
          EOF
          mkdir -p "$APP_ROOT/app"
          cat > "$APP_ROOT/app/build.gradle" << 'EOF'
          apply plugin: 'com.android.application'
          android {
            namespace "org.vkax.node"
            compileSdkVersion 25
            defaultConfig {
              applicationId "org.vkax.node"
              minSdkVersion 25
              targetSdkVersion 25
              versionCode 1
              versionName "0.1"
            }
            compileOptions {
              sourceCompatibility JavaVersion.VERSION_11
              targetCompatibility JavaVersion.VERSION_11
            }
            packagingOptions {
              doNotStrip "**/*"     // keep assets untouched
            }
          }
          dependencies { }
          EOF
          mkdir -p "$APP_ROOT/app/src/main/java/org/vkax/node"
          cat > "$APP_ROOT/app/src/main/AndroidManifest.xml" << 'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="org.vkax.node">
            <uses-sdk android:minSdkVersion="25" android:targetSdkVersion="25"/>
            <uses-permission android:name="android.permission.INTERNET"/>
            <application android:label="VKAX Node" android:allowBackup="false">
              <activity android:name=".MainActivity">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN"/>
                  <category android:name="android.intent.category.LAUNCHER"/>
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF
          cat > "$APP_ROOT/app/src/main/java/org/vkax/node/MainActivity.java" << 'EOF'
          package org.vkax.node;
          import android.app.Activity;
          import android.os.Bundle;
          public class MainActivity extends Activity {
            @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); }
          }
          EOF
          # Copy built daemons into assets
          cp -f "$BUILD_DIR"/vkax* "$APP_ROOT/app/src/main/assets/"
          # Build APK (debug)
          gradle -p "$APP_ROOT" assembleDebug --no-daemon --warning-mode all
          # Stash output paths
          APK="$APP_ROOT/app/build/outputs/apk/debug/app-debug.apk"
          echo "APK_PATH=$APK" >> "$GITHUB_ENV"
          ls -lah "$APP_ROOT/app/build/outputs/apk/debug" || true

      - name: APK diagnostics
        run: |
          set -eux
          echo "APK_PATH=$APK_PATH"
          unzip -l "$APK_PATH" | sed -n '1,200p'
          "${ANDROID_SDK_ROOT}/build-tools/34.0.0/aapt" dump badging "$APK_PATH" | sed -n '1,80p' || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-aarch64
          path: |
            ${{ env.COMPRESS_DIR }}/vkax-android-aarch64-daemons.tar.gz
            ${{ env.APK_PATH }}
