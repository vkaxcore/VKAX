# .github/workflows/build.yaml
name: VKAX CI

on:
  push:
    branches: [ master, v100.11.5-android ]
  pull_request:
    branches: [ '**' ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -e -o pipefail {0}

env:
  TZ: UTC
  LC_ALL: C
  LANG: C.UTF-8
  TAIL_N: 1000
  VERBOSE_BUILD: 0
  ALLOW_TTY_LICENSE_ACCEPT: 0

jobs:
  preflight:
    name: Preflight (YAML hygiene)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Scan workflows for banned patterns
        run: |
          set -Eeuo pipefail
          files="$(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' || true)"
          [ -z "$files" ] && exit 0
          if matches="$(grep -nH -E '^[[:space:]]*yes[[:space:]]*\|[[:space:]]*sdkmanager[[:space:]]*--licenses([[:space:]]|$)' $files || true)"; then
            [ -n "$matches" ] && echo "::error::Forbidden pattern 'yes | sdkmanager --licenses' in workflows" && exit 1
          fi
          if matches="$(grep -nH -e 'user-config\.jam' $files || true)"; then
            [ -n "$matches" ] && echo "::error::Workflows must not reference user-config.jam" && exit 1
          fi

      - name: Scan workflows for CRLF, TABs, and unquoted [brackets]
        run: |
          set -Eeuo pipefail
          files="$(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' || true)"
          [ -z "$files" ] && exit 0
          if grep -nIU $'\r' $files >/tmp/crlf_hits 2>/dev/null && [ -s /tmp/crlf_hits ]; then
            echo "::error::CRLF detected in workflow YAML"; exit 1
          fi
          if grep -nP $'\t' $files >/tmp/tab_hits 2>/dev/null && [ -s /tmp/tab_hits ]; then
            echo "::error::TAB characters detected in workflow YAML"; exit 1
          fi
          if grep -nE '^- name: \[.*\]' $files >/tmp/brack_hits 2>/dev/null && [ -s /tmp/brack_hits ]; then
            echo "::error::Unquoted [brackets] in step names"; exit 1
          fi

  ubuntu:
    name: Ubuntu (first)
    runs-on: ubuntu-22.04
    needs: preflight
    env:
      BUILD_DIR: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 python3-venv unzip wget curl cmake ninja-build dos2unix \
            xz-utils file ccache git jq gpg binutils
          mkdir -p "$HOME/.ccache"
          ccache --set-config=cache_dir="$HOME/.ccache"
          ccache --set-config=max_size=1G
          ccache --set-config=compression=true
          ccache --set-config=compiler_check=content
          echo "CCACHE_DIR=$HOME/.ccache" >> "$GITHUB_ENV"
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
          echo "CCACHE_NOHASHDIR=1" >> "$GITHUB_ENV"
          echo "CCACHE_DEPEND=1" >> "$GITHUB_ENV"
          ccache --zero-stats || true

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-ubuntu-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ccache-ubuntu-${{ runner.os }}-${{ github.ref }}-
            ccache-ubuntu-${{ runner.os }}-

      - name: Cache CMake/Ninja build dir
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUILD_DIR }}
            ~/.cache/cmake
          key: cmake-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', 'cmake/**', 'src/**', 'include/**') }}
          restore-keys: |
            cmake-${{ runner.os }}-

      - name: Configure (stub)
        run: |
          mkdir -p "${BUILD_DIR}"
          echo "OK" > "${BUILD_DIR}/ubuntu-stub.txt"

      - name: Upload Ubuntu stub artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-stub
          path: ${{ env.BUILD_DIR }}/ubuntu-stub.txt
          if-no-files-found: warn
          compression-level: 6
          retention-days: 7

  android:
    name: Android (${{ matrix.flavor }}; API ${{ matrix.api }}, NDK ${{ matrix.ndk_ver }})
    runs-on: ubuntu-22.04
    needs: [preflight, ubuntu]
    strategy:
      fail-fast: false
      matrix:
        flavor: [normal, legacy]
        api: [21]
        ndk_ver: [23.1.7779620]
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      CLT_URL: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Java (Temurin 11 + Gradle cache)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'
          cache: gradle
          cache-dependency-path: |
            **/gradle-wrapper.properties
            **/*.gradle*
            **/settings.gradle*
            **/build.gradle*

      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 python3-venv unzip wget curl cmake ninja-build dos2unix \
            xz-utils file ccache git jq gpg binutils
          mkdir -p "$HOME/.ccache"
          ccache --set-config=cache_dir="$HOME/.ccache"
          ccache --set-config=max_size=1G
          ccache --set-config=compression=true
          ccache --set-config=compiler_check=content
          echo "CCACHE_DIR=$HOME/.ccache" >> "$GITHUB_ENV"
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
          echo "CCACHE_NOHASHDIR=1" >> "$GITHUB_ENV"
          echo "CCACHE_DEPEND=1" >> "$GITHUB_ENV"
          ccache --zero-stats || true

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-android-${{ matrix.flavor }}-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ccache-android-${{ matrix.flavor }}-${{ runner.os }}-${{ github.ref }}-
            ccache-android-${{ matrix.flavor }}-${{ runner.os }}-

      - name: Prepare cmdline-tools
        run: |
          set -Eeuo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest" "$ANDROID_SDK_ROOT/licenses" "$HOME/.android"
          : > "$HOME/.android/repositories.cfg"
          tmpdir="$(mktemp -d)"; trap 'rm -rf "$tmpdir"' EXIT
          curl -fsSL "$CLT_URL" -o "$tmpdir/clt.zip"
          unzip -q "$tmpdir/clt.zip" -d "$tmpdir/ctl"
          cp -R "$tmpdir/ctl/cmdline-tools/"* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Seed SDK/NDK licenses
        run: |
          set -Eeuo pipefail
          {
            printf '%s\n' "24333f8a63b6825ea9c5514f83c2829b004d1fee"
            printf '%s\n' "d56f5187479451eabf01fb78af6dfcb131a6481e"
            printf '%s\n' "8933bad161af4178b1185d1a37fbf41ea5269c55"
          } > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          printf '%s\n' "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"
          printf '%s\n' "d975f751698a77b662f1254ddbeed3901e976f5a" > "$ANDROID_SDK_ROOT/licenses/android-sdk-module-license"
          printf '%s\n' "601085b94cd77f0b54ff86406957099ebe79c4d6" > "$ANDROID_SDK_ROOT/licenses/android-ndk-license"
          find "$ANDROID_SDK_ROOT/licenses" -type f -print0 | xargs -0 dos2unix >/dev/null 2>&1 || true

      - name: Install Android packages
        env:
          PATH: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:${{ env.PATH }}
        run: |
          set -Eeuo pipefail
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --install \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${{ matrix.ndk_ver }}"

      - name: Verify Android packages
        run: |
          set -Eeuo pipefail
          test -x "${ANDROID_SDK_ROOT}/platform-tools/adb"
          test -d "${ANDROID_SDK_ROOT}/platforms/android-${{ matrix.api }}"
          test -d "${ANDROID_SDK_ROOT}/ndk/${{ matrix.ndk_ver }}"

      - name: Build (autodetect)
        run: |
          set -Eeuo pipefail
          mkdir -p artifacts
          if [ -x "./gradlew" ]; then
            ./gradlew --no-daemon --stacktrace assembleRelease
          elif [ -x "./contrib/scripts/build-android.sh" ]; then
            ./contrib/scripts/build-android.sh "${{ matrix.flavor }}" "${{ matrix.api }}" "${{ matrix.ndk_ver }}"
          else
            echo "No known Android build entrypoint found; skipping compile stage." | tee artifacts/build-skipped.txt
          fi
          find . -type f \( -name '*.apk' -o -name '*.aab' -o -name 'VKAX*.zip' \) -print -exec cp -v '{}' artifacts/ \; || true

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.flavor }}-api${{ matrix.api }}-ndk${{ matrix.ndk_ver }}
          path: artifacts
          if-no-files-found: warn
          compression-level: 6
          retention-days: 7

      - name: ccache stats
        if: always()
        run: |
          set +e
          ccache --show-stats || true
          ccache --zero-stats || true
