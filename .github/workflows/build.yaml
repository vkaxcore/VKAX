name: VKAX Build

on:
  push:
    branches:
      - main
      - v100.11.5*
      - develop
  pull_request:
    branches:
      - develop

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  TEST_LOG_ARTIFACT_DIR: test-logs
jobs:
  checking-build-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.selected-version.outputs.version }}
    steps:
      - name: Triggered By
        run: echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'

      - name: Choose version
        id: selected-version
        shell: bash
        run: |
          version=""
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]] || [[ "$GITHUB_REF" == *v100.11.5* ]]; then
              version=${{ steps.versions.outputs.snapshot-version }}
          elif [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] && [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              version=${{ steps.versions.outputs['release-version'] }}
          fi
          echo "version is: [$version]"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
          
  build-win-2022:
    name: Windows build
    needs: checking-build-version
    runs-on: ubuntu-22.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32

      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32

      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli.exe,vkaxd.exe,qt/vkax-qt.exe} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          zip -r ${COIN_NAME}-win-${BUILD_VERSION}.zip $BUILD_DIR/
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-win-${BUILD_VERSION}.zip ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-win-${BUILD_VERSION}.zip >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-win-${BUILD_VERSION}.zip >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-win-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
          
  build-ubuntu22:
    name: Ubuntu 22 build
    needs: checking-build-version
    runs-on: ubuntu-22.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc)

      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
          
  build-ubuntu20:
    name: Ubuntu 20 build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc)

      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

            build-ubuntu20:
    name: Ubuntu 20 build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc)

      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu22-arm:
    name: Ubuntu 22 ARM build
    needs: checking-build-version
    runs-on: ubuntu-22.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu

      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu

      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu22-arm-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu22-arm-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu22-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu22-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-arm-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu20-arm:
    name: Ubuntu 20 ARM build
    needs: checking-build-version
    runs-on: ubuntu-20.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: build depends
        run: |
          echo "building with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu

      - name: configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu

      - name: build binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: generate checksum and compress
        run: |
          echo "building $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu20-arm-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu20-arm-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu20-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-arm-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu18-arm:
    name: Ubuntu 18.04 ARM build
    needs: checking-build-version
    runs-on: ubuntu-18.04
    env:
      BUILD_VERSION: ${{ needs.checking-build-version.outputs.version }}
      COIN_NAME: vkax
      BUILD_DIR: vkax-build
      COMPRESS_DIR: vkax-compress
    steps:
      - uses: actions/checkout@v4

      - name: Getting Version
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Install ARM Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install -y curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          sudo update-alternatives --set arm-linux-gnueabihf-gcc /usr/bin/arm-linux-gnueabihf-gcc-8
          sudo update-alternatives --set arm-linux-gnueabihf-g++ /usr/bin/arm-linux-gnueabihf-g++-8

      - name: Build ARM Dependencies
        run: |
          echo "building for ARM architecture with $(nproc) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          make -C depends -j$(nproc) HOST=arm-linux-gnueabihf

      - name: Configure ARM build
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf

      - name: Build ARM Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      - name: Generate Checksum and Compress
        run: |
          echo "building $BUILD_VERSION version for ARM"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          cd ..
          tar -cvzf ${COIN_NAME}-ubuntu18-arm-${BUILD_VERSION}.tar.gz $BUILD_DIR/*
          mkdir -p ${COMPRESS_DIR}
          mv ${COIN_NAME}-ubuntu18-arm-${BUILD_VERSION}.tar.gz ${COMPRESS_DIR}/
          shasum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu18-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          sha256sum ${COMPRESS_DIR}/${COIN_NAME}-ubuntu18-arm-${BUILD_VERSION}.tar.gz >> ${COMPRESS_DIR}/checksums.txt
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload ARM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu18-arm-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  clean-up:
    name: Clean Up
    needs: [build-win-2022, build-ubuntu22, build-ubuntu20]
    runs-on: ubuntu-latest
    steps:
      - name: Clean up
        run: |
          echo "Cleaning up temporary files..."
          rm -rf $BUILD_DIR $COMPRESS_DIR

