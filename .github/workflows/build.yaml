# .github/workflows/build.yaml
name: CI • Smoke-first + OS builds (Android on Ubuntu AMD64)

on:
  push:
    branches: ["v100.11.5-android"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
  ANDROID_HOME: ${{ github.workspace }}/.android-sdk
  ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  ANDROID_NDK_VERSION: "23.1.7779620"

jobs:
  # =====================================
  # SMOKE: native toolchains — Ubuntu (AMD/ARM/RISC-V)
  # =====================================
  smoke_native_ubuntu:
    name: smoke • native • ubuntu • ${{ matrix.name }}
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    continue-on-error: ${{ matrix.allow_failures }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            runs_on: '"ubuntu-22.04"'
            allow_failures: false
          - name: ubuntu-24-amd64
            runs_on: '"ubuntu-24.04"'
            allow_failures: false
          - name: ubuntu-22-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-22.04"]'
            allow_failures: true
          - name: ubuntu-24-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-24.04"]'
            allow_failures: true
          - name: ubuntu-22-riscv64
            runs_on: '["self-hosted","Linux","RISC-V","ubuntu-22.04"]'
            allow_failures: true
          - name: ubuntu-24-riscv64
            runs_on: '["self-hosted","Linux","RISC-V","ubuntu-24.04"]'
            allow_failures: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize shebangs (curly quotes)
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r -d '' f; do
            head -n1 "$f" | grep -q '^#!' || continue
            if head -n1 "$f" | grep -qE "[‘’“”]"; then
              awk 'NR==1{gsub(/‘|’/, "'\''"); gsub(/“|”/, "\"")} {print}' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              echo "::warning file=$f,line=1::Fixed curly quotes in shebang (use ASCII quotes)."
            fi
          done < <(git ls-files -z)

      - name: Toolchain smoke
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t
          ./t || true
          echo ok > .smoke_pass

      - name: Append smoke summary
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "### Smoke native ubuntu: ${{ matrix.name }}";
            echo "- Compiler: $(c++ --version | head -1 2>/dev/null || echo unknown)";
            echo "- CPU cores: $(nproc 2>/dev/null || echo 2)";
            echo "- Kernel: $(uname -sr)";
          } >> "$GITHUB_STEP_SUMMARY"
          echo "::notice::ubuntu smoke passed on ${{ matrix.name }}"

      - name: Inventory toolchain packages
        shell: bash
        run: |
          set -euo pipefail
          echo "component,version,path,sha256,homepage" > inventory.csv
          bin="$(command -v c++ || true)"; ver="$(c++ --version | head -1 || true)"; sha="$( [ -n "$bin" ] && sha256sum "$bin" | awk '{print $1}' || echo )"
          echo "| component | version | path | sha256 | homepage |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---|---|---|---|---|" >> "$GITHUB_STEP_SUMMARY"
          echo "| c++ | ${ver:-n/a} | ${bin:-n/a} | ${sha:-} | https://gcc.gnu.org/ |" >> "$GITHUB_STEP_SUMMARY"
          echo "c++,${ver//,/ },$bin,$sha,https://gcc.gnu.org/" >> inventory.csv
          for p in cmake ninja-build make pkg-config; do
            if dpkg-query -W -f='${Version}' "$p" >/dev/null 2>&1; then
              verp=$(dpkg-query -W -f='${Version}' "$p" 2>/dev/null | head -1)
              home=$(apt-cache show "$p" 2>/dev/null | awk -F': ' '/^Homepage:/ {print $2; exit}')
              binp=$(command -v ${p%%-*} || true)
              shap=$( [ -n "$binp" ] && sha256sum "$binp" | awk '{print $1}' || echo )
              echo "| $p | ${verp:-} | ${binp:-} | ${shap:-} | ${home:-} |" >> "$GITHUB_STEP_SUMMARY"
              echo "$p,${verp//,/ },$binp,$shap,${home:-}" >> inventory.csv
            fi
          done

      - name: Upload smoke inventory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-inventory-ubuntu-${{ matrix.name }}
          path: inventory.csv
          if-no-files-found: warn

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-native-${{ matrix.name }}
          path: |
            .smoke_pass
            t
          if-no-files-found: warn

  # =====================================
  # SMOKE: native toolchains — macOS (Intel)
  # =====================================
  smoke_native_macos:
    name: smoke • native • macos • ${{ matrix.macos }}
    runs-on: ${{ matrix.macos }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        macos: [macos-13]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize shebangs (curly quotes)
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r -d '' f; do
            head -n1 "$f" | grep -q '^#!' || continue
            if head -n1 "$f" | grep -qE "[‘’“”]"; then
              awk 'NR==1{gsub(/‘|’/, "'\''"); gsub(/“|”/, "\"")} {print}' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              echo "::warning file=$f,line=1::Fixed curly quotes in shebang (use ASCII quotes)."
            fi
          done < <(git ls-files -z)

      - name: Toolchain smoke
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t
          ./t || true
          echo ok > .smoke_pass

      - name: Append smoke summary
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "### Smoke native macOS: ${{ matrix.macos }}";
            echo "- Compiler: $(clang --version | head -1 2>/dev/null || echo unknown)";
            echo "- CPU cores: $(sysctl -n hw.ncpu 2>/dev/null || echo 2)";
            echo "- Kernel: $(uname -sr)";
          } >> "$GITHUB_STEP_SUMMARY"
          echo "::notice::macOS smoke passed on ${{ matrix.macos }}"

      - name: Inventory toolchain packages
        shell: bash
        run: |
          set -euo pipefail
          echo "| component | version | path | sha256 | homepage |" >> "$GITHUB_STEP_SUMMARY"
          echo "|---|---|---|---|---|" >> "$GITHUB_STEP_SUMMARY"
          bin="$(command -v clang || true)"; ver="$(clang --version | head -1 || true)"; sha="$( [ -n "$bin" ] && shasum -a 256 "$bin" | awk '{print $1}' || echo )"
          echo "| clang | ${ver:-n/a} | ${bin:-n/a} | ${sha:-} | https://developer.apple.com/xcode/ |" >> "$GITHUB_STEP_SUMMARY"
          if command -v brew >/dev/null 2>&1; then
            for p in cmake ninja pkg-config automake libtool; do
              if brew list --versions "$p" >/dev/null 2>&1; then
                verp=$(brew list --versions "$p" | awk '{print $2}')
                binp=$(command -v "$p" || true)
                shap=$( [ -n "$binp" ] && shasum -a 256 "$binp" | awk '{print $1}' || echo )
                home=$(brew info --json=v2 "$p" | python3 -c 'import sys,json;print(json.load(sys.stdin)["formulae"][0].get("homepage",""))' 2>/dev/null || true)
                echo "| $p | ${verp:-} | ${binp:-} | ${shap:-} | ${home:-} |" >> "$GITHUB_STEP_SUMMARY"
              fi
            done
          fi

      - name: Upload smoke inventory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-inventory-macos-${{ matrix.macos }}
          path: /dev/null
          if-no-files-found: ignore

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-native-${{ matrix.macos }}
          path: |
            .smoke_pass
            t
          if-no-files-found: warn

  # =====================================
  # SMOKE: native toolchains — Windows (PowerShell)
  # =====================================
  smoke_native_windows:
    name: smoke • native • windows • ${{ matrix.windows }}
    runs-on: ${{ matrix.windows }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        windows: [windows-2022]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC env
        uses: ilammy/msvc-dev-cmd@v1

      - name: Toolchain smoke
        shell: pwsh
        run: |
          'int main(){return 0;}' | Set-Content -NoNewline -Path .\t.cpp
          cl /nologo .\t.cpp /Fe:t.exe
          .\t.exe
          'ok' | Set-Content -NoNewline -Path .smoke_pass

      - name: Append smoke summary
        shell: pwsh
        run: |
          $compiler = (cl 2>&1 | Select-String -Pattern 'Version' | Select-Object -First 1).ToString()
          $cores = $env:NUMBER_OF_PROCESSORS
          Add-Content $env:GITHUB_STEP_SUMMARY "### Smoke native Windows: ${{ matrix.windows }}"
          Add-Content $env:GITHUB_STEP_SUMMARY "- Compiler: $compiler"
          Add-Content $env:GITHUB_STEP_SUMMARY "- CPU cores: $cores"
          Add-Content $env:GITHUB_STEP_SUMMARY "- Kernel: Windows"
          echo "::notice::Windows smoke passed on ${{ matrix.windows }}"

      - name: Inventory toolchain packages
        shell: pwsh
        run: |
          $bin = (Get-Command cl).Source
          $ver = (cl 2>&1 | Select-String -Pattern 'Version' | Select-Object -First 1).ToString()
          $sha = (Get-FileHash $bin -Algorithm SHA256).Hash
          Add-Content $env:GITHUB_STEP_SUMMARY "| component | version | path | sha256 | homepage |"
          Add-Content $env:GITHUB_STEP_SUMMARY "|---|---|---|---|---|"
          Add-Content $env:GITHUB_STEP_SUMMARY "| cl | $ver | $bin | $sha | https://learn.microsoft.com/cpp/ |"
          foreach ($p in 'cmake','ninja','pkg-config') {
            $b = (Get-Command $p -ErrorAction SilentlyContinue).Source
            if ($b) {
              $hv = (& $p --version 2>$null | Select-Object -First 1)
              $hs = (Get-FileHash $b -Algorithm SHA256).Hash
              Add-Content $env:GITHUB_STEP_SUMMARY "| $p | $hv | $b | $hs | https://$p.org/ |"
            }
          }

      - name: Upload smoke inventory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-inventory-windows-${{ matrix.windows }}
          path: /dev/null
          if-no-files-found: ignore

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-native-${{ matrix.windows }}
          path: |
            .smoke_pass
            t.exe
          if-no-files-found: warn

  # =====================================
  # SMOKE: depends — Ubuntu (only OSes that use depends)
  # =====================================
  depends_smoke_ubuntu:
    name: smoke • depends • ubuntu • ${{ matrix.name }}
    needs: smoke_native_ubuntu
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    continue-on-error: ${{ matrix.allow_failures }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            runs_on: '"ubuntu-22.04"'
            host: x86_64-pc-linux-gnu
            allow_failures: false
          - name: ubuntu-24-amd64
            runs_on: '"ubuntu-24.04"'
            host: x86_64-pc-linux-gnu
            allow_failures: false
          - name: ubuntu-22-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-22.04"]'
            host: aarch64-linux-gnu
            allow_failures: true
          - name: ubuntu-24-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-24.04"]'
            host: aarch64-linux-gnu
            allow_failures: true
          - name: ubuntu-22-riscv64
            runs_on: '["self-hosted","Linux","RISC-V","ubuntu-22.04"]'
            host: riscv64-linux-gnu
            allow_failures: true
          - name: ubuntu-24-riscv64
            runs_on: '["self-hosted","Linux","RISC-V","ubuntu-24.04"]'
            host: riscv64-linux-gnu
            allow_failures: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync submodules
        shell: bash
        run: |
          set -euo pipefail
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Tooling
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3

      - name: depends full smoke
        shell: bash
        run: |
          set -euo pipefail
          [ -d depends ] || { echo "::error::depends/ directory missing; required for Ubuntu builds."; exit 2; }
          J=$(nproc 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
          make -C depends -j"$J" HOST='${{ matrix.host }}'
          {
            echo "### depends packages built on ${{ matrix.name }}";
            pkgs=$(find depends/work -type f -name .stamp_built 2>/dev/null | while read -r f; do d=$(dirname "$f"); bn=$(basename "$d"); echo "$bn"; done | sed -E 's/-[0-9].*$//' | sort -u || true);
            if [ -z "$pkgs" ]; then
              echo "_no .stamp_built files found; build may be cached or produced no targets_";
            else
              printf '%s\n' "$pkgs" | sed 's/^/- /'
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          echo ok > .smoke_depends_pass

      - name: Summarize depends sources (URLs + SHA256)
        shell: bash
        run: |
          set -euo pipefail
          pkgs=$(find depends/work -type f -name .stamp_built 2>/dev/null | sed -E 's#.*/work/([^/]+)/.*#\1#' | sort -u || true)
          out="depends-metadata-${{ matrix.name }}.csv"
          echo "package,url,sha256,source_file_sha256" > "$out"
          for pkg in $pkgs; do
            mk="depends/packages/${pkg}.mk"
            url=""; sha=""; fsha=""; srcfile=""
            if [ -f "$mk" ]; then
              url=$(awk -F'=' '/_download_(path|url)/{gsub(/[ \t]/, "", $0); print $2; exit}' "$mk" 2>/dev/null || true)
              sha=$(awk -F'=' '/_sha256/ {gsub(/[ \t]/, "", $0); print $2; exit}' "$mk" 2>/dev/null || true)
              srcfile=$(awk -F'=' '/_file_name/ {gsub(/[ \t]/, "", $0); print $2; exit}' "$mk" 2>/dev/null || true)
            fi
            cand=""
            if [ -n "$srcfile" ] && [ -f "depends/sources/$srcfile" ]; then cand="depends/sources/$srcfile"; fi
            if [ -z "$cand" ]; then cand=$(ls depends/sources/${pkg}-* 2>/dev/null | head -1 || true); fi
            if [ -n "$cand" ] && [ -f "$cand" ]; then fsha=$(sha256sum "$cand" | awk '{print $1}'); fi
            echo "$pkg,${url:-},${sha:-},${fsha:-}" >> "$out"
          done
          {
            echo "### depends sources on ${{ matrix.name }}";
            echo "| package | url | sha256 | source_file_sha256 |";
            echo "|---|---|---|---|";
            awk -F',' 'NR>1{printf "| %s | %s | %s | %s |\n", $1,$2,$3,$4}' "$out"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload depends metadata
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: depends-metadata-${{ matrix.name }}
          path: depends-metadata-${{ matrix.name }}.csv
          if-no-files-found: warn

      - name: Upload depends logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: depends-logs-${{ matrix.name }}
          path: depends/work/**/config.log
          if-no-files-found: ignore

      - name: Upload depends smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-depends-ubuntu-${{ matrix.name }}
          path: .smoke_depends_pass
          if-no-files-found: warn

  # =====================================
  # SMOKE: depends — macOS (only OSes that use depends)
  # =====================================
  depends_smoke_macos:
    name: smoke • depends • macos • ${{ matrix.macos }}
    needs: smoke_native_macos
    runs-on: ${{ matrix.macos }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        macos: [macos-13]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync submodules
        shell: bash
        run: |
          set -euo pipefail
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Tooling
        shell: bash
        run: |
          set -euo pipefail
          brew update
          brew install automake libtool pkg-config ninja
          brew list --versions cmake >/dev/null 2>&1 || brew install cmake

      - name: depends full smoke
        shell: bash
        run: |
          set -euo pipefail
          [ -d depends ] || { echo "::error::depends/ directory missing; required for macOS builds."; exit 2; }
          J=$(sysctl -n hw.ncpu 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
          make -C depends -j"$J" HOST=x86_64-apple-darwin
          {
            echo "### depends packages built on ${{ matrix.macos }}";
            pkgs=$(find depends/work -type f -name .stamp_built 2>/dev/null | while read -r f; do d=$(dirname "$f"); bn=$(basename "$d"); echo "$bn"; done | sed -E 's/-[0-9].*$//' | sort -u || true);
            if [ -z "$pkgs" ]; then
              echo "_no .stamp_built files found; build may be cached or produced no targets_";
            else
              printf '%s\n' "$pkgs" | sed 's/^/- /'
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          echo ok > .smoke_depends_pass

      - name: Summarize depends sources (URLs + SHA256)
        shell: bash
        run: |
          set -euo pipefail
          pkgs=$(find depends/work -type f -name .stamp_built 2>/dev/null | sed -E 's#.*/work/([^/]+)/.*#\1#' | sort -u || true)
          out="depends-metadata-${{ matrix.macos }}.csv"
          echo "package,url,sha256,source_file_sha256" > "$out"
          for pkg in $pkgs; do
            mk="depends/packages/${pkg}.mk"
            url=""; sha=""; fsha=""; srcfile=""
            if [ -f "$mk" ]; then
              url=$(awk -F'=' '/_download_(path|url)/{gsub(/[ \t]/, "", $0); print $2; exit}' "$mk" 2>/dev/null || true)
              sha=$(awk -F'=' '/_sha256/ {gsub(/[ \t]/, "", $0); print $2; exit}' "$mk" 2>/dev/null || true)
              srcfile=$(awk -F'=' '/_file_name/ {gsub(/[ \t]/, "", $0); print $2; exit}' "$mk" 2>/dev/null || true)
            fi
            cand=""
            if [ -n "$srcfile" ] && [ -f "depends/sources/$srcfile" ]; then cand="depends/sources/$srcfile"; fi
            if [ -z "$cand" ]; then cand=$(ls depends/sources/${pkg}-* 2>/dev/null | head -1 || true); fi
            if [ -n "$cand" ] && [ -f "$cand" ]; then fsha=$(shasum -a 256 "$cand" | awk '{print $1}'); fi
            echo "$pkg,${url:-},${sha:-},${fsha:-}" >> "$out"
          done
          {
            echo "### depends sources on ${{ matrix.macos }}";
            echo "| package | url | sha256 | source_file_sha256 |";
            echo "|---|---|---|---|";
            awk -F',' 'NR>1{printf "| %s | %s | %s | %s |\n", $1,$2,$3,$4}' "$out"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload depends metadata
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: depends-metadata-${{ matrix.macos }}
          path: depends-metadata-${{ matrix.macos }}.csv
          if-no-files-found: warn

      - name: Upload depends logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: depends-logs-${{ matrix.macos }}
          path: depends/work/**/config.log
          if-no-files-found: ignore

      - name: Upload depends smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-depends-macos-${{ matrix.macos }}
          path: .smoke_depends_pass
          if-no-files-found: warn

  # =====================================
  # SMOKE: Android toolchain — Ubuntu AMD64 only
  # =====================================
  smoke_android:
    name: smoke • android • ubuntu-24.04 • api 34 • ndk 23.1.7779620
    runs-on: ubuntu-24.04
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Prepare SDK dirs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"

      - name: Install cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          tmp=$(mktemp -d)
          curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-34" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Verify SDK/NDK layout
        shell: bash
        run: |
          set -euo pipefail
          adb_bin="$ANDROID_SDK_ROOT/platform-tools/adb"
          plat_dir="$ANDROID_SDK_ROOT/platforms/android-34"
          ndk_dir="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}"
          pre="$ndk_dir/toolchains/llvm/prebuilt/linux-x86_64/bin"
          [ -x "$adb_bin" ] || { echo "::error::adb missing at $adb_bin"; exit 1; }
          [ -d "$plat_dir" ] || { echo "::error::Android platform missing: $plat_dir"; exit 1; }
          [ -d "$ndk_dir" ] || { echo "::error::NDK missing: $ndk_dir"; exit 1; }
          [ -d "$pre" ] || { echo "::error::NDK prebuilt not found: $pre"; ls -la "$ndk_dir/toolchains/llvm/prebuilt" || true; exit 1; }

      - name: Smoke compile (armv7a+arm64)
        shell: bash
        run: |
          set -euo pipefail
          pre="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          a32="$pre/armv7a-linux-androideabi21-clang++"
          a64="$pre/aarch64-linux-android21-clang++"
          [ -x "$a32" ] || { echo "::error::Missing $a32"; exit 127; }
          [ -x "$a64" ] || { echo "::error::Missing $a64"; exit 127; }
          mkdir -p smoke && cd smoke
          cat > t.cpp <<'CPP'
          #include <atomic>
          int main(){ std::atomic<int> v{0}; v++; return (int)v.load(); }
          CPP
          "$a32" -latomic -O2 t.cpp -o a32
          "$a64" -O2 t.cpp -o a64
          echo ok > ../.smoke_pass

      - name: Android toolchain inventory
        shell: bash
        run: |
          set -euo pipefail
          tmp=$(mktemp)
          curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp" || true
          zsha=$( [ -s "$tmp" ] && sha256sum "$tmp" | awk '{print $1}' || echo )
          ndk_prop="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}/source.properties"
          ndk_sha=$( [ -f "$ndk_prop" ] && sha256sum "$ndk_prop" | awk '{print $1}' || echo )
          plat_prop="$ANDROID_SDK_ROOT/platforms/android-34/source.properties"
          plat_sha=$( [ -f "$plat_prop" ] && sha256sum "$plat_prop" | awk '{print $1}' || echo )
          {
            echo "### Android toolchain sources";
            echo "- cmdline-tools zip: [$ANDROID_CLT_LINUX]($ANDROID_CLT_LINUX) — sha256: ${zsha:-n/a}";
            echo "- NDK ${ANDROID_NDK_VERSION}: fingerprint of source.properties — sha256: ${ndk_sha:-n/a}";
            echo "- Platform android-34: fingerprint of source.properties — sha256: ${plat_sha:-n/a}";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-android-ubuntu-24.04-api34
          path: |
            .smoke_pass
            smoke/**/*
          if-no-files-found: warn

  # =====================================
  # Android builds — Ubuntu AMD64 only (after smoke_android)
  # =====================================
  android:
    name: android • build • ubuntu-24.04 • api 34 • ndk 23.1.7779620
    needs: smoke_android
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    env:
      ANDROID_API_LEVEL: "34"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Ensure cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            tmp=$(mktemp -d)
            curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
            unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          fi

      - name: Accept Android licenses
        uses: ./.github/actions/android-accept-licenses

      - name: Install Android packages
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-34" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Build depends for native Android (optional)
        shell: bash
        run: |
          set -euo pipefail
          : "${ANDROID_API_LEVEL:=34}"
          : "${ANDROID_TOOLCHAIN_BIN:=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin}"
          if [ -d depends ]; then
            J=$(nproc 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
            echo "::notice::Building depends for HOST=aarch64-linux-android (API ${ANDROID_API_LEVEL})."
            make -C depends -j"$J" HOST=aarch64-linux-android ANDROID_API_LEVEL="${ANDROID_API_LEVEL}" ANDROID_TOOLCHAIN_BIN="${ANDROID_TOOLCHAIN_BIN}" || {
              echo "::warning::Android depends build failed or unsupported; continuing without.";
            }
          else
            echo "::notice::No depends/ dir; skipping Android depends build."
          fi

      - name: Project build for native Android (optional)
        shell: bash
        run: |
          set -euo pipefail
          : "${ANDROID_API_LEVEL:=34}"
          : "${ANDROID_TOOLCHAIN_BIN:=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin}"
          if [ -f Makefile ]; then
            J=$(nproc 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
            echo "::notice::Attempting project build for HOST=aarch64-linux-android (API ${ANDROID_API_LEVEL})."
            ANDROID_SDK="${ANDROID_SDK_ROOT}" ANDROID_NDK="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}" \
            make -j"$J" HOST=aarch64-linux-android ANDROID_API_LEVEL="${ANDROID_API_LEVEL}" ANDROID_TOOLCHAIN_BIN="${ANDROID_TOOLCHAIN_BIN}" || {
              echo "::warning::Top-level Android make build failed; continuing with Gradle/native checks.";
            }
          else
            echo "::notice::No top-level Makefile; skipping Android make build."
          fi

      - name: Setup Gradle cache
        if: ${{ hashFiles('**/gradlew') != '' }}
        uses: gradle/actions/setup-gradle@v3

      - name: Gradle build (if present)
        if: ${{ hashFiles('**/gradlew') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          chmod +x ./gradlew
          ./gradlew --no-daemon --stacktrace assemble

      - name: Collect native Android binaries if present
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          find build -type f \( -name '*.so' -o -name '*.a' -o -name 'vkax-qt*' -o -name 'vkax-d*' -o -name 'vkax-cli*' \) -print -exec cp -a {} dist/ \; || true
          if [ -z "$(ls -A dist 2>/dev/null || true)" ]; then
            echo "::warning::No native Android binaries found; uploading full build dir instead."
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-android-ubuntu-24.04-api34
          path: |
            dist/**/*
            build/**/*
          if-no-files-found: warn

  # =====================================
  # Android legacy (API 15) — Ubuntu 22 AMD64 only (after smoke_android)
  # =====================================
  android_legacy:
    name: android • legacy • ubuntu-22.04 • api 15 • ndk 23.1.7779620
    needs: smoke_android
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Prepare SDK + cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$HOME/.android"
          touch "$HOME/.android/repositories.cfg"
          tmp=$(mktemp -d)
          curl -fsSL "$ANDROID_CLT_LINUX" -o "$tmp/cmdline.zip"
          unzip -q "$tmp/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Accept Android licenses (hash-seeded)
        uses: ./.github/actions/android-accept-licenses

      - name: Install legacy platform + NDK
        shell: bash
        run: |
          set -euo pipefail
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-15" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Smoke compile armv7a @16
        shell: bash
        run: |
          set -euo pipefail
          pre="$ANDROID_SDK_ROOT/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          a32="$pre/armv7a-linux-androideabi16-clang++"
          [ -x "$a32" ] || { echo "::error::Missing $a32"; exit 127; }
          mkdir -p smoke && cd smoke
          cat > t.cpp <<'CPP'
          #include <atomic>
          int main(){ std::atomic<int> v{0}; v++; return (int)v.load(); }
          CPP
          "$a32" -latomic -O2 t.cpp -o a32
          echo ok > ../.smoke_pass

      - name: Upload legacy smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-android-legacy-api15
          path: |
            .smoke_pass
            smoke/**/*
          if-no-files-found: warn

  # =====================================
  # macOS (Intel) — native only (after smoke_native_macos)
  # =====================================
  macos:
    name: native • macOS • ${{ matrix.macos }}
    needs: depends_smoke_macos
    runs-on: ${{ matrix.macos }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        macos: [macos-13]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Toolchain sanity
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t && ./t || true

      - name: Build vendored depends (macOS Intel)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d depends ]; then
            brew update
            brew install automake libtool pkg-config ninja
            brew list --versions cmake >/dev/null 2>&1 || brew install cmake
            if ! compgen -G "depends/x86_64-apple-darwin*" > /dev/null; then
              make -C depends -j"$(sysctl -n hw.ncpu || echo 2)" HOST=x86_64-apple-darwin
            fi
          else
            echo "::error::depends/ directory missing; required for macOS build."
            exit 2
          fi

      - name: CMake build (requires vendored depends)
        shell: bash
        run: |
          set -euo pipefail
          if ! compgen -G "depends/x86_64-apple-darwin*" > /dev/null; then
            echo "::error::Vendored depends prefix not found after build."
            ls -la depends || true
            exit 2
          fi
          export CMAKE_PREFIX_PATH="$(echo depends/x86_64-apple-darwin*)"
          cmake -S . -B build
          cmake --build build -j"$(sysctl -n hw.ncpu || echo 2)" || {
            echo "::error::CMake build failed on macOS with vendored depends."; exit 2; }

      - name: Collect vkax binaries if present
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          find build -type f \( -name 'vkax-qt*' -o -name 'vkax-d*' -o -name 'vkax-cli*' -o -name '*.app' \) -print -exec cp -a {} dist/ \; || true
          if [ -z "$(ls -A dist 2>/dev/null || true)" ]; then
            echo "::warning::No vkax binaries found to package on macOS; uploading full build dir instead."
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-macos-${{ matrix.macos }}
          path: |
            dist/**/*
            build/**/*
          if-no-files-found: warn

  # =====================================
  # Ubuntu (22/24 AMD64 + self-hosted ARM64/RISC-V) — native only (after smoke_native_ubuntu)
  # =====================================
  ubuntu:
    name: native • ubuntu • ${{ matrix.name }}
    needs: depends_smoke_ubuntu
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    continue-on-error: ${{ matrix.allow_failures }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            runs_on: '"ubuntu-22.04"'
            triple: x86_64-pc-linux-gnu
            allow_failures: false
          - name: ubuntu-24-amd64
            runs_on: '"ubuntu-24.04"'
            triple: x86_64-pc-linux-gnu
            allow_failures: false
          - name: ubuntu-22-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-22.04"]'
            triple: aarch64-linux-gnu
            allow_failures: true
          - name: ubuntu-24-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-24.04"]'
            triple: aarch64-linux-gnu
            allow_failures: true
          - name: ubuntu-22-riscv64
            runs_on: '["self-hosted","Linux","RISC-V","ubuntu-22.04"]'
            triple: riscv64-linux-gnu
            allow_failures: true
          - name: ubuntu-24-riscv64
            runs_on: '["self-hosted","Linux","RISC-V","ubuntu-24.04"]'
            triple: riscv64-linux-gnu
            allow_failures: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Toolchain sanity
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t && ./t || true

      - name: Build vendored depends (Linux)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d depends ]; then
            sudo apt-get update -qq
            sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3
            if [ ! -d "depends/${{ matrix.triple }}" ]; then
              make -C depends -j"$(nproc || echo 2)" HOST=${{ matrix.triple }}
            fi
          else
            echo "::notice::No depends/ dir; skipping vendored deps."
          fi

      - name: CMake build (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f CMakeLists.txt ]; then
            echo "::notice::No CMakeLists.txt; skipping."
            exit 0
          fi
          if [ -d "depends/${{ matrix.triple }}" ]; then
            export CMAKE_PREFIX_PATH="depends/${{ matrix.triple }}"
          else
            echo "::warning::Vendored depends prefix not found; skipping Ubuntu build on ${{ matrix.name }}."
            exit 0
          fi
          cmake -S . -B build
          cmake --build build -j"$(nproc || echo 2)" || {
            echo "::error::CMake build failed on Ubuntu with vendored depends."; exit 2; }

      - name: Collect vkax binaries if present
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          find build -type f \( -name 'vkax-qt*' -o -name 'vkax-d*' -o -name 'vkax-cli*' \) -print -exec cp -a {} dist/ \; || true
          if [ -z "$(ls -A dist 2>/dev/null || true)" ]; then
            echo "::warning::No vkax binaries found to package on Ubuntu; uploading full build dir instead."
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-ubuntu-${{ matrix.name }}
          path: |
            dist/**/*
            build/**/*
          if-no-files-found: warn

  # =====================================
  # Windows cross (MinGW-w64 on Ubuntu) — produce .exe via depends
  # =====================================
  windows_cross:
    name: native • windows-cross • ubuntu-22.04 → mingw64
    needs: depends_smoke_ubuntu
    runs-on: ubuntu-22.04
    timeout-minutes: 50
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync submodules
        shell: bash
        run: |
          set -euo pipefail
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Tooling (MinGW cross)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq wget unzip build-essential pkg-config automake libtool autoconf bison cmake ninja-build \
            mingw-w64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64

      - name: Build depends for Windows (x86_64-w64-mingw32)
        shell: bash
        run: |
          set -euo pipefail
          [ -d depends ] || { echo "::error::depends/ missing; required for Windows cross-build."; exit 2; }
          J=$(nproc 2>/dev/null || echo 2); [ "$J" -gt 4 ] && J=4
          make -C depends -j"$J" HOST=x86_64-w64-mingw32

      - name: CMake configure (MinGW-w64)
        shell: bash
        run: |
          set -euo pipefail
          export PREFIX="depends/x86_64-w64-mingw32"
          [ -d "$PREFIX" ] || { echo "::error::depends prefix not found at $PREFIX"; exit 2; }
          cmake -S . -B build-w64 -G Ninja \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
            -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
            -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres \
            -DCMAKE_FIND_ROOT_PATH="$PREFIX" \
            -DCMAKE_PREFIX_PATH="$PREFIX"

      - name: CMake build (MinGW-w64)
        shell: bash
        run: |
          set -euo pipefail
          cmake --build build-w64 -j"$(nproc 2>/dev/null || echo 2)" || { echo "::error::Windows 
