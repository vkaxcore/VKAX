.github/workflows/build.yaml
# Android-only, zero repo clutter: builds vkaxd/cli/tx; creates a throwaway Gradle app in $RUNNER_TEMP to package a vkax-cli debug APK; loud diagnostics.

name: VKAX Android Build

on:
  workflow_dispatch:
  push:
    branches: [ v100.11.5-android ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  QT_RCC_SOURCE_DATE_OVERRIDE: "1"
  ANDROID_API: "25"
  HOST: aarch64-linux-android

jobs:
  android-aarch64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with: { lfs: true, fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "11" }

      - name: Install tools
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf libtool pkg-config \
              python3 unzip wget curl cmake ninja-build dos2unix xz-utils file zip aapt

      - name: Determinism + OOM controls
        run: |
          set -eux
          ulimit -c 0
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct || echo 0)" >> "$GITHUB_ENV"
          echo "MAKEFLAGS=-j2" >> "$GITHUB_ENV"
          ! git grep -n "android-ndk-r23c" || { git grep -n "android-ndk-r23c"; exit 1; }
          unset QMAKESPEC XQMAKESPEC QMAKEPATH QMAKEFEATURES

      - name: Install Android SDK + NDK r25.2
        env: { ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk }
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "build-tools;34.0.0" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Verify NDK toolchain and set CC/CXX
        env: { HOST: ${{ env.HOST }}, ANDROID_API: ${{ env.ANDROID_API }}, ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }} }
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CC_TGT="${HOST}${ANDROID_API}-clang"; CXX_TGT="${HOST}${ANDROID_API}-clang++"
          if [ -x "$TOOLCHAIN_BIN/$CC_TGT" ] && [ -x "$TOOLCHAIN_BIN/$CXX_TGT" ]; then
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"
            echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          else
            WRAP_DIR="$RUNNER_TEMP/ndk-cc"; mkdir -p "$WRAP_DIR"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CC_TGT"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang++' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CXX_TGT"
            chmod +x "$WRAP_DIR/$CC_TGT" "$WRAP_DIR/$CXX_TGT"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"
            echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Configure Boost toolset (Android clang aarch64)
        env: { ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}, HOST: ${{ env.HOST }}, ANDROID_API: ${{ env.ANDROID_API }}, CXX: ${{ env.CXX }} }
        run: |
          set -eux
          mkdir -p depends "$HOME/.boost-build"
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          COMPILER_PATH="$TOOLCHAIN_BIN/${HOST}${ANDROID_API}-clang++"
          [ -x "$COMPILER_PATH" ] || COMPILER_PATH="$(command -v "${HOST}${ANDROID_API}-clang++" || command -v "$CXX")"
          printf '%s\n' 'using clang : aarch64' " : ${COMPILER_PATH}" ' : android arm 64 ;' > depends/user-config.jam
          cp depends/user-config.jam "$HOME/.boost-build/user-config.jam"
          echo "BOOST_BUILD_PATH=$PWD/depends" >> "$GITHUB_ENV"

      - name: Normalize scripts & ensure config.guess/sub
        run: |
          set -eux
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }

      - name: Build depends (NO Qt)
        env: { HOST: ${{ env.HOST }}, ANDROID_API: ${{ env.ANDROID_API }}, ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }} }
        run: |
          set -eux
          BUILD_TRIPLET="$(./depends/config.guess)"
          make -C depends -j2 build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" host="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
            NO_QT=1 V=1

      - name: Configure (vkaxd/cli/tx)
        env: { HOST: ${{ env.HOST }} }
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -f "./depends/${HOST}/share/config.site" ] && export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site" || true
          ./autogen.sh || true
          ./configure --host="${HOST}" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib \
            CXXFLAGS="-O2 -fPIC"

      - name: Build
        run: |
          set -eux
          make -j2 src/vkaxd src/vkax-cli src/vkax-tx

      - name: Package daemons
        env: { COIN_NAME: ${{ env.COIN_NAME }}, BUILD_DIR: ${{ env.BUILD_DIR }}, COMPRESS_DIR: ${{ env.COMPRESS_DIR }} }
        run: |
          set -eux
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/"
          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: Create minimal vkax-cli APK project (in $RUNNER_TEMP)
        run: |
          set -eux
          APP_ROOT="$RUNNER_TEMP/vkax-cli-app"; mkdir -p "$APP_ROOT/app/src/main/assets" "$APP_ROOT/app/src/main/java/org/vkax/cli" "$APP_ROOT/app/src/main/res/values"
          cat > "$APP_ROOT/settings.gradle.kts" <<'EOF'
          rootProject.name = "vkax-cli-app"; include(":app")
          EOF
          cat > "$APP_ROOT/build.gradle.kts" <<'EOF'
          plugins { id("com.android.application") version "8.2.2" apply false }
          EOF
          cat > "$APP_ROOT/app/build.gradle.kts" <<'EOF'
          plugins { id("com.android.application") }
          android {
            namespace = "org.vkax.cli"; compileSdk = 34
            defaultConfig { applicationId = "org.vkax.cli"; minSdk = 24; targetSdk = 34; versionCode = 1; versionName = "1.0" }
            buildTypes { debug { isMinifyEnabled = false } release { isMinifyEnabled = true } }
            packaging { resources.excludes += setOf("META-INF/*") }
          }
          dependencies { }
          EOF
          cat > "$APP_ROOT/app/src/main/AndroidManifest.xml" <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="org.vkax.cli">
            <application android:label="VKAX CLI" android:allowBackup="false" android:supportsRtl="true" android:extractNativeLibs="true">
              <activity android:name=".MainActivity" android:exported="true">
                <intent-filter><action android:name="android.intent.action.MAIN" /><category android:name="android.intent.category.LAUNCHER" /></intent-filter>
              </activity>
            </application>
          </manifest>
          EOF
          cat > "$APP_ROOT/app/src/main/java/org/vkax/cli/MainActivity.kt" <<'EOF'
          package org.vkax.cli
          import android.app.Activity; import android.os.Bundle; import android.widget.*
          import java.io.File; import java.io.InputStream; import java.nio.file.Files
          class MainActivity : Activity() {
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              val root = LinearLayout(this).apply { orientation = LinearLayout.VERTICAL }
              val btn = Button(this).apply { text = "Run vkax-cli --version" }
              val out = TextView(this).apply { setTextIsSelectable(true) }
              root.addView(btn); root.addView(ScrollView(this).apply { addView(out) }); setContentView(root)
              btn.setOnClickListener {
                try { val exe = extractAsset("vkax-cli"); exe.setExecutable(true)
                  val p = ProcessBuilder(exe.absolutePath, "--version").redirectErrorStream(true).start()
                  val text = p.inputStream.bufferedReader().use { it.readText() }; p.waitFor(); out.text = text
                } catch (e: Exception) { out.text = "error: ${e.message}" }
              }
              out.text = "Ready."
            }
            private fun extractAsset(name: String): File { val dest = File(filesDir, name)
              if (!dest.exists()) assets.open(name).use { Files.copy(it, dest.toPath()) }; return dest }
          }
          EOF
          cat > "$APP_ROOT/app/src/main/res/values/strings.xml" <<'EOF'
          <resources><string name="app_name">VKAX CLI</string></resources>
          EOF
          cp -f src/vkax-cli "$APP_ROOT/app/src/main/assets/vkax-cli"; chmod +x "$APP_ROOT/app/src/main/assets/vkax-cli"
          echo "APP_ROOT=$APP_ROOT" >> "$GITHUB_ENV"

      - name: Install Gradle 8.6
        run: |
          set -eux
          wget -q https://services.gradle.org/distributions/gradle-8.6-bin.zip -O /tmp/gradle.zip
          unzip -q /tmp/gradle.zip -d "$HOME/gradle"
          echo "$HOME/gradle/gradle-8.6/bin" >> "$GITHUB_PATH"
          gradle -v

      - name: Build vkax-cli APK (debug)
        run: |
          set -eux
          gradle -p "$APP_ROOT" clean :app:assembleDebug --no-daemon --stacktrace

      - name: Diagnostics (always)
        if: always()
        run: |
          set -x
          echo "=== env (NDK/SDK) ==="; env | egrep 'ANDROID|^CC=|^CXX=|^AR=|^RANLIB|SOURCE_DATE_EPOCH|MAKEFLAGS' | sort || true
          echo "=== tool versions ==="; javac -version || true; python3 --version || true
          echo "=== file(1) ==="; file "$BUILD_DIR"/* || true
          echo "=== readelf -d ==="; for f in "$BUILD_DIR"/*; do readelf -d "$f" || true; done
          echo "=== config.log tails ==="; find . -name config.log -print -exec tail -200 {} \; || true
          echo "=== APK listing ==="; unzip -l "$APP_ROOT/app/build/outputs/apk/debug/app-debug.apk" | sed -n '1,120p' || true

      - name: Upload artifacts (APK + tar)
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-aarch64-artifacts
          path: |
            ${{ env.COMPRESS_DIR }}/vkax-android-aarch64-daemons.tar.gz
            ${{ env.APP_ROOT }}/app/build/outputs/apk/debug/app-debug.apk
# .github/workflows/build.yaml • Setvin • 2025-09-06
