name: VKAX Multi-Platform Build

on:
  push:
    branches:
      - main
      - develop
      - v100.11.5*
  pull_request:
    branches:
      - develop

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  BOOST_VERSION: 1_73_0
  QT_PATH: /usr/local/opt/qt@5

jobs:
  # 🧠 Extract version from build.properties
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Read versions
        id: versions
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version snapshot-version'
      - name: Choose version
        id: selected-version
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]] || [[ "$GITHUB_REF" == *develop ]]; then
            version=${{ steps.versions.outputs.snapshot-version }}
          else
            version=${{ steps.versions.outputs.release-version }}
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$version" > version.txt
      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt
    outputs:
      version: ${{ steps.selected-version.outputs.version }}

  # 🍏 macOS 12 build — safe for Boost 1.73.0 and Clang 13
  build-macos:
    name: macOS 12 Build
    needs: get-version
    runs-on: macos-12
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      # 🧰 Install dependencies via Homebrew
      - name: Install Dependencies
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python berkeley-db@4 qt@5
          pip3 install ds_store mac_alias setuptools
          export BDB_INCLUDE_DIR=$(brew --prefix berkeley-db@4)/include
          export BDB_LIB_DIR=$(brew --prefix berkeley-db@4)/lib
          export QT_PATH=$(brew --prefix qt@5)
          export PATH=$QT_PATH/bin:$PATH
          export PKG_CONFIG_PATH=$QT_PATH/lib/pkgconfig:$PKG_CONFIG_PATH

      # 🧱 Build depends with Clang 13 — avoids enum cast errors
      - name: Build depends
        run: |
          echo "Building depends with $(sysctl -n hw.ncpu) threads"
          export FALLBACK_DOWNLOAD_PATH=https://explorer.yerbas.org/depends/
          export BOOST_VERSION=${{ env.BOOST_VERSION }}
          export CXXFLAGS="-Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion"
          make -C depends -j$(sysctl -n hw.ncpu)

      # ⚙️ Configure VKAX with Qt and BDB paths
      - name: Configure VKAX
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/${{ matrix.arch }}-apple-darwin20.6.0 \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      CXXFLAGS="-I$BDB_INCLUDE_DIR -I$QT_PATH/include -Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion" \
                      LDFLAGS="-L$BDB_LIB_DIR -L$QT_PATH/lib" \
                      QT_SELECT=5

      # 🔨 Build and strip binaries
      - name: Build Binary
        run: |
          make -j$(sysctl -n hw.ncpu)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/*

      # 📦 Package and upload
      - name: Package & Upload
        run: |
          mkdir -p $COMPRESS_DIR
          cd $BUILD_DIR
          shasum vkax-cli vkaxd vkax-qt >> checksums.txt
          openssl sha256 vkax-cli vkaxd vkax-qt >> checksums.txt
          cd ..
          tar -cvzf ${COMPRESS_DIR}/${COIN_NAME}-macos-${{ matrix.arch }}-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos-${{ matrix.arch }}-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

      # 🍎 DMG generation
      - name: Generate DMG
        run: |
          export QT_PATH=$(brew --prefix qt@5)
          export PATH=$QT_PATH/bin:$PATH
          make deploy
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-macos-${{ matrix.arch }}-dmg-${{ needs.get-version.outputs.version }}
          path: vkax-Qt.dmg

  build-ubuntu:
    name: Ubuntu Build Matrix
    needs: get-version
    strategy:
      matrix:
        version: [18.04, 20.04, 22.04, 24.04]
        arch: [x86_64, arm64]
    runs-on: ubuntu-${{ matrix.version }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      # 🧰 Install required packages — matches your original setup
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential g++ gcc libtool autotools-dev automake pkg-config python3 bsdmainutils cmake qtbase5-dev libqt5svg5-dev libdb-dev libdb++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev
          pip3 install setuptools

      # 🧱 Build depends with Boost 1.73.0 and suppression flags
      - name: Build depends
        run: |
          export BOOST_VERSION=${{ env.BOOST_VERSION }}
          export CXXFLAGS="-Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion"
          make -C depends -j$(nproc)

      # ⚙️ Configure VKAX with standard Linux paths
      - name: Configure VKAX
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/${{ matrix.arch }}-linux-gnu \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      CXXFLAGS="-Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion"

      # 🔨 Build and strip binaries
      - name: Build Binary
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/{vkax-cli,vkaxd,qt/vkax-qt} $BUILD_DIR/
          strip $BUILD_DIR/* || echo "strip failed — skipping"

      # 📦 Package and upload
      - name: Package & Upload
        run: |
          mkdir -p $COMPRESS_DIR
          cd $BUILD_DIR
          sha256sum vkax-cli vkaxd vkax-qt > checksums.txt
          cd ..
          tar -cvzf ${COMPRESS_DIR}/${COIN_NAME}-ubuntu-${{ matrix.version }}-${{ matrix.arch }}-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-ubuntu-${{ matrix.version }}-${{ matrix.arch }}-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}

  build-windows:
    name: Windows x64 Build
    needs: get-version
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      # 🧰 Install dependencies using Chocolatey
      # Qt5, CMake, Python — matches original setup
      - name: Install Dependencies
        run: |
          choco install -y cmake python qt5
          pip install setuptools

      # 🧱 Build depends — Boost 1.73.0 with suppression flags
      - name: Build depends
        shell: bash
        run: |
          export BOOST_VERSION=${{ env.BOOST_VERSION }}
          export CXXFLAGS="-Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion"
          make -C depends -j$(nproc)

      # ⚙️ Configure VKAX with MSVC-compatible flags
      - name: Configure VKAX
        shell: bash
        run: |
          ./autogen.sh
          ./configure --prefix=$(pwd)/depends/x86_64-w64-mingw32 \
                      --with-boost=$(pwd)/depends/boost \
                      --with-incompatible-bdb \
                      CXXFLAGS="-Wno-enum-constexpr-conversion -Wno-error=enum-constexpr-conversion"

      # 🔨 Build and collect binaries
      - name: Build Binary
        shell: bash
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mv src/vkax-cli.exe $BUILD_DIR/
          mv src/vkaxd.exe $BUILD_DIR/
          mv src/qt/vkax-qt.exe $BUILD_DIR/

      # 🧼 Strip symbols (optional — won't fail if unsupported)
      - name: Strip Binaries
        shell: bash
        run: |
          strip --strip-unneeded $BUILD_DIR/*.exe || echo "strip not supported — skipping"

      # 📦 Package and upload
      - name: Package & Upload
        shell: bash
        run: |
          mkdir -p $COMPRESS_DIR
          cd $BUILD_DIR
          sha256sum vkax-cli.exe vkaxd.exe vkax-qt.exe > checksums.txt
          cd ..
          tar -cvzf ${COMPRESS_DIR}/${COIN_NAME}-windows-x64-${{ needs.get-version.outputs.version }}.tar.gz $BUILD_DIR/*
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COIN_NAME }}-windows-x64-${{ needs.get-version.outputs.version }}
          path: ${{ env.COMPRESS_DIR }}
