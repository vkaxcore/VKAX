# .github/workflows/build.yaml
# VKAX Android CI (arm64, daemons) — pinned SDK/NDK r25.2, heartbeat, -j1 triage; optional Qt/APK intentionally omitted until a .pro exists.
# Guard: locked branch; Pins: platforms;android-25, build-tools 34.0.0, ndk 25.2.9519653; Toolchain: aarch64-linux-android25-clang/++; Visibility: strace + logs.

name: VKAX Android Build (arm64, daemons)

on:
  push:
    branches:
      - v100.11.5-android
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref to build (blank = v100.11.5-android)"
        required: false
        default: ""

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C
  ANDROID_API: "25"
  HOST: aarch64-linux-android

jobs:
  android-aarch64:
    if: ${{ github.ref == 'refs/heads/v100.11.5-android' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.ref == '' || github.event.inputs.ref == 'v100.11.5-android')) }}
    runs-on: ubuntu-22.04
    timeout-minutes: 150

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          ref: ${{ github.event.inputs.ref || 'v100.11.5-android' }}

      - name: Java (Temurin 11)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: System deps
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y build-essential automake autoconf libtool pkg-config \
                                  python3 unzip wget curl cmake ninja-build dos2unix \
                                  xz-utils file zip binutils strace gdb

      - name: Determinism + tame
        run: |
          set -eux
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct || echo 0)" >> "$GITHUB_ENV"
          echo "MAKEFLAGS=-j1" >> "$GITHUB_ENV"

      - name: Android SDK + NDK r25.2 (pin)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools/latest" ]; then
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
            unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
            mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          fi
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "build-tools;34.0.0" "ndk;25.2.9519653"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: NDK toolchain CC/CXX/AR/RANLIB
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -eux
          TOOLCHAIN_BIN="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CC_TGT="${HOST}${ANDROID_API}-clang"
          CXX_TGT="${HOST}${ANDROID_API}-clang++"
          if [ -x "$TOOLCHAIN_BIN/$CC_TGT" ] && [ -x "$TOOLCHAIN_BIN/$CXX_TGT" ]; then
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"
            echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          else
            WRAP_DIR="$RUNNER_TEMP/ndk-cc"; mkdir -p "$WRAP_DIR"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang' --target=${HOST}${ANDROID_API} \"\$@\""  > "$WRAP_DIR/$CC_TGT"
            printf '%s\n' '#!/usr/bin/env bash' "exec '$TOOLCHAIN_BIN/clang++' --target=${HOST}${ANDROID_API} \"\$@\"" > "$WRAP_DIR/$CXX_TGT"
            chmod +x "$WRAP_DIR/$CC_TGT" "$WRAP_DIR/$CXX_TGT"
            echo "$WRAP_DIR" >> "$GITHUB_PATH"
            echo "CC=$CC_TGT"  >> "$GITHUB_ENV"
            echo "CXX=$CXX_TGT" >> "$GITHUB_ENV"
          fi
          echo "AR=llvm-ar" >> "$GITHUB_ENV"
          echo "RANLIB=llvm-ranlib" >> "$GITHUB_ENV"

      - name: Preflight: mk includes + CRLF + make version
        run: |
          set -eux
          echo "=== include ndk.mk sites ==="
          grep -RIn --color=never -E 'include.*ndk\.mk' depends || true
          echo "=== CRLF scan (should be empty) ==="
          grep -RIl $'\r' depends || true
          echo "=== EOL normalize ==="
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess && chmod +x depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub   && chmod +x depends/config.sub; }
          echo "=== make --version ==="
          make --version

      - name: depends build (NO Qt) — j1 + heartbeat + strace
        env:
          HOST: ${{ env.HOST }}
          ANDROID_API: ${{ env.ANDROID_API }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          GNUMAKEFLAGS: "--output-sync=line"
        run: |
          set -euo pipefail
          ulimit -c 0
          ulimit -s 16384
          BUILD_TRIPLET="$(./depends/config.guess)"
          mkdir -p logs
          ( while sleep 60; do
              echo "::notice:: [heartbeat] depends alive $(date -u +%T)"
              ps -eo pid,pcpu,pmem,stat,comm --sort=-pcpu | head -n 12 || true
            done ) & HB=$!
          trap 'kill $HB 2>/dev/null || true' EXIT
          stdbuf -oL -eL strace -f -qq -o logs/make.strace -- \
            make -C depends --trace V=1 \
              build="$BUILD_TRIPLET" build_os=linux \
              HOST="$HOST" host="$HOST" \
              ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="$ANDROID_API" \
              NO_QT=1 -j1 2>&1 | tee logs/depends.log
          kill $HB 2>/dev/null || true
          trap - EXIT

      - name: Configure vkaxd/cli/tx (Android)
        env:
          HOST: ${{ env.HOST }}
        run: |
          set -eux
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$PKG_CONFIG_PATH"
          export PKG_CONFIG_SYSROOT_DIR="$PWD/depends/${HOST}"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib -fuse-ld=lld"
          [ -f "./depends/${HOST}/share/config.site" ] && export CONFIG_SITE="$PWD/depends/${HOST}/share/config.site" || true
          [ -x ./autogen.sh ] && ./autogen.sh || autoreconf -fi || true
          ./configure \
            --host="${HOST}" \
            --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui \
            --disable-bench \
            --disable-tests \
            CC="${CC}" CXX="${CXX}" AR=llvm-ar RANLIB=llvm-ranlib \
            CXXFLAGS="-O2 -fPIC"

      - name: Build + package daemons
        env:
          COIN_NAME: ${{ env.COIN_NAME }}
          BUILD_DIR: ${{ env.BUILD_DIR }}
          COMPRESS_DIR: ${{ env.COMPRESS_DIR }}
        run: |
          set -eux
          stdbuf -oL -eL make -j2 src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR" "$COMPRESS_DIR"
          llvm-strip -s src/vkaxd src/vkax-cli src/vkax-tx || true
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/"
          tar -czf "$COMPRESS_DIR/${COIN_NAME}-android-aarch64-daemons.tar.gz" -C "$BUILD_DIR" .

      - name: Diagnostics
        if: always()
        run: |
          set -x
          env | egrep 'ANDROID|^CC=|^CXX=|^AR=|^RANLIB|^JAVA_HOME|SOURCE_DATE_EPOCH|MAKEFLAGS|PKG_CONFIG' | sort || true
          javac -version || true
          python3 --version || true
          find . -maxdepth 3 -type f \( -name "*.so" -o -name "*.apk" \) -print0 | xargs -0r file || true
          if [ -d "$BUILD_DIR" ]; then
            for f in "$BUILD_DIR"/*; do
              [ -f "$f" ] || continue
              readelf -h "$f" || true
              readelf -d "$f" || true
            done
          fi
          echo "=== dmesg tail ==="
          dmesg | tail -n 100 || true
          echo "=== strace tail ==="
          tail -n 200 logs/make.strace 2>/dev/null || true
          echo "=== depends.log tail ==="
          tail -n 200 logs/depends.log 2>/dev/null || true

      - name: Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vkax-android-daemons-and-logs
          path: |
            ${{ env.COMPRESS_DIR }}/vkax-android-aarch64-daemons.tar.gz
            logs/depends.log
            logs/make.strace
# .github/workflows/build.yaml • Setvin • 2025-09-07
