# File: .github/workflows/build.yaml
name: VKAX Android Builds

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

permissions:
  contents: read

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: UTC
  LC_ALL: C
  LANG: C.UTF-8
  TAIL_N: "1000"
  VERBOSE_BUILD: "0"

jobs:
  android:
    name: Android ${{ matrix.arch }} (API ${{ matrix.api }}, NDK ${{ matrix.ndk_ver }})
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            host: aarch64-linux-android
            clang_triple: aarch64-linux-android
            api: "21"
            ndk_ver: "23.1.7779620"
          - arch: armv7
            host: arm-linux-androideabi
            clang_triple: armv7a-linux-androideabi
            api: "21"
            ndk_ver: "23.1.7779620"

    defaults:
      run:
        shell: bash

    steps:
      - name: "[VKAX] Checkout"
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          lfs: true
          fetch-depth: 0

      - name: "[VKAX] Set umask"
        run: |
          set -Eeuo pipefail
          umask 022
          umask

      - name: "[VKAX] Init build log"
        run: |
          set -Eeuo pipefail
          LOG="$RUNNER_TEMP/vkax-build.log"
          : > "$LOG"
          echo "BUILD_LOG=$LOG" >> "$GITHUB_ENV"
          

      - name: "[VKAX] Guards in workflows"
        run: |
          set -Eeuo pipefail
          files="$(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' | grep -v -F '.github/workflows/build.yaml' || true)"
          [ -z "$files" ] && exit 0

          matches="$(grep -nH -E '^[[:space:]]*yes[[:space:]]*\|[[:space:]]*sdkmanager[[:space:]]*--licenses([[:space:]]|$)' $files || true)"
          if [ -n "$matches" ]; then
            echo "## Forbidden pattern found" >> "$GITHUB_STEP_SUMMARY"
            { echo '```'; echo "$matches"; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
            echo "::error::Forbidden pattern 'yes | sdkmanager --licenses' in workflows"
            exit 1
          fi

          matches="$(grep -nH -e 'user-config\.jam' $files || true)"
          if [ -n "$matches" ]; then
            echo "## Illegal user-config.jam references" >> "$GITHUB_STEP_SUMMARY"
            { echo '```'; echo "$matches"; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
            echo "::error::Workflows must not reference user-config.jam (owned by depends/packages/boost.mk)"
            exit 1
          fi



      - name: "[VKAX] Workflow hygiene"
        run: |
          set -Eeuo pipefail
          files="$(git ls-files '.github/workflows/*.yml' '.github/workflows/*.yaml' || true)"
          [ -z "$files" ] && exit 0
          if grep -nIU $'\r' $files >/tmp/crlf_hits 2>/dev/null; then
            if [ -s /tmp/crlf_hits ]; then
              echo "## CRLF in workflows" >> "$GITHUB_STEP_SUMMARY"
              { echo '```'; cat /tmp/crlf_hits; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
              echo "::error::CRLF detected in workflow YAML"
              exit 1
            fi
          fi
          if grep -nP $'\t' $files >/tmp/tab_hits 2>/dev/null; then
            if [ -s /tmp/tab_hits ]; then
              echo "## Tabs in workflows" >> "$GITHUB_STEP_SUMMARY"
              { echo '```'; cat /tmp/tab_hits; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
              echo "::error::TAB characters detected in workflow YAML"
              exit 1
            fi
          fi
          if grep -nE '^- name: \[.*\]' $files >/tmp/brack_hits 2>/dev/null; then
            if [ -s /tmp/brack_hits ]; then
              echo "## Unquoted bracketed step names" >> "$GITHUB_STEP_SUMMARY"
              { echo '```'; cat /tmp/brack_hits; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
              echo "::error::Unquoted [brackets] in step names"
              exit 1
            fi
          fi

      - name: "[VKAX] Java 11"
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: temurin
          java-version: "11"

      - name: "[VKAX] System deps"
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD:-0}" = 1 ] && set -x || true
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake autoconf libtool pkg-config \
            python3 python3-venv unzip wget curl cmake ninja-build dos2unix \
            xz-utils file ccache git jq gpg binutils

      - name: "[VKAX] Cache ccache"
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-${{ hashFiles('**/configure.ac', '**/Makefile.am', 'depends/**', 'src/**') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.arch }}-api${{ matrix.api }}-

      - name: "[VKAX] Install Android SDK + verify cmdline-tools"
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          CLT_URL: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          FDROID_BASE: https://f-droid.github.io/android-sdk-transparency-log/signed
        run: |
          set -Eeuo pipefail; [ "${VERBOSE_BUILD:-0}" = 1 ] && set -x || true
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$ANDROID_SDK_ROOT/licenses" /tmp/fdroid
          curl -fsSL "$FDROID_BASE/checksums.json"     -o /tmp/fdroid/checksums.json
          curl -fsSL "$FDROID_BASE/checksums.json.asc" -o /tmp/fdroid/checksums.json.asc
          curl -fsSL "$FDROID_BASE/keyring.gpg"        -o /tmp/fdroid/keyring.gpg
          gpg --batch --no-default-keyring --keyring /tmp/fdroid/keyring.gpg --verify /tmp/fdroid/checksums.json.asc /tmp/fdroid/checksums.json
          tmpzip="$(mktemp /tmp/clt.XXXXXX.zip)"
          curl -fsSL "$CLT_URL" -o "$tmpzip"
          got_sha="$(sha256sum "$tmpzip" | awk '{print $1}')"
          exp_list="$(jq -r --arg u "$CLT_URL" '.[ $u ] | if type==\"array\" then map(.sha256)[] else .sha256 // empty end' /tmp/fdroid/checksums.json)"
          [ -n "$exp_list" ] || { echo "::error::F-Droid checksums.json has no entry for $CLT_URL"; exit 1; }
          printf '%s\n' "$exp_list" | grep -Fxq "$got_sha" || { echo "::error::Checksum mismatch for cmdline-tools: got=$got_sha expected_one_of=$(printf '%s' "$exp_list" | tr '\n' ' ')"; exit 1; }
          {
            echo "## Android cmdline-tools integrity"
            echo
            echo "- URL: $CLT_URL"
            echo "- Verified SHA256: \`$got_sha\`"
          } >> "$GITHUB_STEP_SUMMARY"
          unzip -q "$tmpzip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          {
            echo "8933bad161af4178b1185d1a37fbf41ea5269c55"
            echo "d56f5187479451eabf01fb78af6dfcb131a6481e"
          } > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-ndk-license"
          export ANDROID_SDK_ROOT="$ANDROID_SDK_ROOT"
          export ANDROID_SDK="$ANDROID_SDK_ROOT"
          export ANDROID_HOME="$ANDROID_SDK_ROOT"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --install \
            "platform-tools" \
            "platforms;android-${{ matrix.api }}" \
            "ndk;${{ matrix.ndk_ver }}"
          {
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_SDK=$ANDROID_SDK_ROOT"
            echo "ANDROID_HOME=$ANDROID_SDK_ROOT"
            echo "ANDROID_API=${{ matrix.api }}"
            echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
            echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
            echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
          } >> "$GITHUB_ENV"
          {
            echo "$ANDROID_SDK_ROOT/platform-tools"
            echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
            echo "$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          } >> "$GITHUB_PATH"




      - name: "[VKAX] ndk_install sanity"
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          make -C depends ndk_install V=1
          os="$(uname -s | tr '[:upper:]' '[:lower:]')"
          case "$os" in linux*) os=linux;; darwin*) os=darwin;; msys*|cygwin*|mingw*) os=windows;; *) os=linux;; esac
          arch="$(uname -m)"
          case "$arch" in aarch64|arm64) arch=arm64;; x86_64|amd64) arch=x86_64;; *) arch=x86_64;; esac
          host_tag="${os}-${arch}"
          toolchain_bin="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/${host_tag}/bin"
          {
            echo "## NDK toolchain audit"
            echo
            echo "- host_tag: \`$host_tag\`"
            echo "- toolchain_bin: \`$toolchain_bin\`"
          } >> "$GITHUB_STEP_SUMMARY"




      - name: "[VKAX] SDK package assertions"
        run: |
          set -Eeuo pipefail
          want_api="${{ matrix.api }}"
          want_ndk="${{ matrix.ndk_ver }}"
          sdkmanager --list >/dev/null 2>&1 || true
          sdkmanager --list | grep -q "platforms;android-${want_api}" || { echo "::error::Missing Android platform API ${want_api}"; exit 1; }
          sdkmanager --list | grep -q "ndk;${want_ndk}" || { echo "::error::Missing NDK ${want_ndk}"; exit 1; }
          {
            echo "## SDK packages audit"
            echo
            echo "- platforms;android-${want_api}: present"
            echo "- ndk;${want_ndk}: present"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: "[VKAX] Toolchain ping"
        run: |
          set -Eeuo pipefail
          api="${{ matrix.api }}"
          tpfx="${{ matrix.clang_triple }}${api}"
          "$tpfx-clang" --version | head -n 1 || { echo "::error::cannot run $tpfx-clang"; exit 1; }
          "$tpfx-clang++" --version | head -n 1 || { echo "::error::cannot run $tpfx-clang++"; exit 1; }

      - name: "[VKAX] Toolchain smoke test"
        run: |
          set -Eeuo pipefail
          api="${{ matrix.api }}"
          tpfx="${{ matrix.clang_triple }}${api}"
          cat > hello.c <<'C'
          #include <stdio.h>
          int main(){ puts("ok"); return 0; }
          C
          "$tpfx-clang" hello.c -o hello-android
          file hello-android | tee -a "$GITHUB_STEP_SUMMARY"
          if [ "${VERBOSE_BUILD:-0}" = "1" ]; then
            { echo "## C smoke ELF header"; echo; echo '```'; readelf -h hello-android; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: "[VKAX] C++ smoke test (-Werror)"
        run: |
          set -Eeuo pipefail
          api="${{ matrix.api }}"
          tpfx="${{ matrix.clang_triple }}${api}"
          cat > hello.cpp <<'CXX'
          #include <iostream>
          int main(){ std::cout << "ok\n"; return 0; }
          CXX
          "$tpfx-clang++" -std=c++17 -Werror -static-libstdc++ hello.cpp -o hello-android-cxx
          file hello-android-cxx | tee -a "$GITHUB_STEP_SUMMARY"
          if [ "${VERBOSE_BUILD:-0}" = "1" ]; then
            { echo "## C++ smoke ELF header"; echo; echo '```'; readelf -h hello-android-cxx; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: "[VKAX] Toolchain summary + env"
        run: |
          set -Eeuo pipefail
          api="${{ matrix.api }}"
          tpfx="${{ matrix.clang_triple }}${api}"
          want_cc="$tpfx-clang"; want_cxx="$tpfx-clang++"
          echo "## Toolchain summary (UTC)" >> "$GITHUB_STEP_SUMMARY"
          date -u '+%Y-%m-%d %H:%M:%S UTC' >> "$GITHUB_STEP_SUMMARY"
          {
            echo '```'
            echo "command -v $want_cc: $(command -v "$want_cc" || echo MISSING)"
            echo "command -v $want_cxx: $(command -v "$want_cxx" || echo MISSING)"
            echo "command -v llvm-ar: $(command -v llvm-ar || echo MISSING)"
            echo "command -v llvm-ranlib: $(command -v llvm-ranlib || echo MISSING)"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
          echo "CC=ccache $want_cc" >> "$GITHUB_ENV"
          echo "CXX=ccache $want_cxx" >> "$GITHUB_ENV"
          echo "AR=$(command -v llvm-ar)" >> "$GITHUB_ENV"
          echo "RANLIB=$(command -v llvm-ranlib)" >> "$GITHUB_ENV"
          echo "MAKEFLAGS=--output-sync=target -j$(( $(nproc)>8 ? 8 : $(nproc) ))" >> "$GITHUB_ENV"

      - name: "[VKAX] Lint Android makefiles"
        run: |
          set -Eeuo pipefail
          files=(depends/hosts/android.mk depends/packages/ndk.mk)
          bad=0
          for f in "${files[@]}"; do
            if grep -nP '[^\x00-\x7F]' "$f"; then echo "::error file=$f::Non-ASCII byte detected"; bad=1; fi
            awk 'length($0)>400{printf "::error file=%s,line=%d::%d chars\n",FILENAME,NR,length($0);b=1}END{exit b}' "$f" || bad=1
            awk '
              BEGIN{in_rule=0;in_def=0;err=0}
              /^\s*#/ {next} /^\s*$/ {in_rule=0;next}
              /^\s*define(\s|$)/ {in_def=1;next}
              in_def && /^\s*endef(\s|$)/ {in_def=0;next}
              in_def {next}
              /^[^\t #][^:]*:[^=]*/ {in_rule=1;next}
              /^[^\t #].*::/ {in_rule=1;next}
              /^\t/ { if(!in_rule){printf "::error file=%s,line=%d::TAB line without rule header\n",FILENAME,NR;err=1}; next }
              {in_rule=0}
              END{exit err}
            ' "$f" || bad=1
          done
          exit $bad

      - name: "[VKAX] Prep depends"
        run: |
          set -Eeuo pipefail
          find depends -type f \( -name "*.mk" -o -name "*.sh" \) -print0 | xargs -0 dos2unix || true
          [ -x depends/config.guess ] || { cp -f /usr/share/misc/config.guess depends/config.guess; }
          [ -x depends/config.sub ]   || { cp -f /usr/share/misc/config.sub   depends/config.sub; }

      - name: "[VKAX] Start liveness probe"
        run: |
          set -Eeuo pipefail
          PROBE_LOG="$RUNNER_TEMP/probe.log"
          (
            while sleep 60; do
              echo "[probe $(date -u '+%Y-%m-%d %H:%M:%S UTC')] depends/work hottest files:" | tee -a "$PROBE_LOG"
              find depends src -type f -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 10 | awk '{print $2}' | sed 's|^|  |' | tee -a "$PROBE_LOG" || true
            done
          ) &
          echo "PROBE_PID=$!" >> "$GITHUB_ENV"

      - name: "[VKAX] Build depends (NO_QT)"
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || echo 0)"
          export BUILD_TRIPLET="$(./depends/config.guess)"
          echo "## depends build (UTC) $(date -u '+%Y-%m-%d %H:%M:%S UTC')" | tee -a "$BUILD_LOG"
          make -C depends --output-sync=target -j"$(nproc)" \
            build="$BUILD_TRIPLET" build_os=linux \
            HOST="$HOST" ANDROID_NDK="$ANDROID_NDK_HOME" ANDROID_API="${{ matrix.api }}" \
            NO_QT=1 V=1 2>&1 | tee -a "$BUILD_LOG"


      - name: "[VKAX] Boost provenance"
        run: |
          set -Eeuo pipefail
          echo "## Boost provenance" >> "$GITHUB_STEP_SUMMARY"
          {
            echo '```'
            echo "b2 path: $(command -v b2 || echo not-found)"
            if command -v b2 >/dev/null 2>&1; then b2 --version || true; fi
            echo
            echo "user-config.jam provenance (grep in depends/packages/boost.mk):"
            grep -n "user-config.jam" depends/packages/boost.mk || echo "(no workflow writes jam; owned by boost.mk)"
            echo
            echo "Discovered jam files:"
            find . -name 'user-config.jam' -printf '%p\n' | while read -r p; do
              sha256sum "$p" | awk '{print $1, "  ", FILENAME}' FILENAME="$p" || true
              /usr/bin/stat -c 'mtime=%y' "$p" 2>/dev/null || true
              head -n 1 "$p" 2>/dev/null || true
              echo
            done
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: "[VKAX] Configure"
        env:
          HOST: ${{ matrix.host }}
        run: |
          set -Eeuo pipefail
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || echo 0)"
          export PKG_CONFIG_PATH="$PWD/depends/${HOST}/lib/pkgconfig"
          export CPPFLAGS="-I$PWD/depends/${HOST}/include"
          export LDFLAGS="-L$PWD/depends/${HOST}/lib"
          [ -x ./autogen.sh ] && ./autogen.sh || true
          ./configure \
            --host="$HOST" --build="$(./depends/config.guess)" \
            --prefix="$PWD/depends/${HOST}" \
            --with-incompatible-bdb \
            --without-gui --disable-bench --disable-tests \
            CC="${CC}" CXX="${CXX}" AR="${AR}" RANLIB="${RANLIB}" \
            CXXFLAGS="-O2 -fPIC"

      - name: "[VKAX] Build"
        run: |
          set -Eeuo pipefail
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct || echo 0)"
          make --output-sync=target -j"$(nproc)" 2>&1 | tee -a "$BUILD_LOG"

      - name: "[VKAX] Package artifacts"
        run: |
          set -Eeuo pipefail
          mkdir -p artifacts
          shopt -s nullglob
          files=(src/vkaxd src/vkax-cli src/vkax-tx)
          have_any=false; for f in "${files[@]}"; do [ -f "$f" ] && have_any=true; done
          if ! $have_any; then
            echo "::error::Expected binaries not found; ls src/ follows"
            ls -l src/ || true
            exit 1
          fi
          if command -v llvm-strip >/dev/null 2>&1; then
            llvm-strip -s "${files[@]}" || true
          elif command -v strip >/dev/null 2>&1; then
            strip --strip-debug "${files[@]}" || true
          fi
          tpfx="${{ matrix.clang_triple }}${{ matrix.api }}"
          {
            echo "project=VKAX"
            echo "sha=${GITHUB_SHA}"
            echo "arch=${{ matrix.arch }}"
            echo "tuple=${tpfx}"
            echo "ndk=${{ matrix.ndk_ver }}"
            echo "sdk_api=${{ matrix.api }}"
            echo "build_time_utc=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          } > artifacts/VERSION.txt
          cp -v "${files[@]}" artifacts/
          tar -C artifacts -czf "vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}-${GITHUB_SHA::7}.tar.gz" .

      - name: "[VKAX] Artifact ABI summary"
        run: |
          set -Eeuo pipefail
          {
            echo "## Artifact ABI summary"
            echo
            echo '```'
            for f in artifacts/vkaxd artifacts/vkax-cli artifacts/vkax-tx; do
              if [ -f "$f" ]; then
                printf "%s: %s\n" "$(basename "$f")" "$(file -b "$f")"
              else
                printf "%s: %s\n" "$(basename "$f")" "MISSING"
              fi
            done
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: "[VKAX] Upload artifacts"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}
          path: vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}-*.tar.gz
          if-no-files-found: error
          retention-days: 30

      # - name: "[VKAX] Download artifacts (example, pinned)"
      #   if: always()
      #   uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      #   with:
      #     name: "vkax-android-${{ matrix.arch }}-ndk${{ matrix.ndk_ver }}"
      #     path: "retrieved-artifacts"

      - name: "[VKAX] Summarize last ${TAIL_N} build lines"
        if: always()
        run: |
          set -Eeuo pipefail
          echo "### Build log tail (last ${TAIL_N:-1000} lines)" >> "$GITHUB_STEP_SUMMARY"
          if [ -s "${BUILD_LOG:-}" ]; then
            { echo '```log'; tail -n "${TAIL_N:-1000}" "$BUILD_LOG"; echo '```'; } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No build log captured._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: "[VKAX] Stop liveness probe"
        if: always()
        run: |
          set +e
          [ -n "${PROBE_PID:-}" ] && kill "${PROBE_PID:-0}" 2>/dev/null || true
          true

      - name: "[VKAX] Upload full build log"
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: vkax-build-log-${{ matrix.arch }}
          path: ${{ env.BUILD_LOG }}
          if-no-files-found: warn
