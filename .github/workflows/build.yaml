name: Build VKAX (all platforms)

on:
  push:
    branches: ["main", "v100.*"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  FALLBACK_DOWNLOAD_PATH: https://explorer.yerbas.org/depends/

jobs:
  linux:
    name: Linux (${{ matrix.os }} • ${{ matrix.host }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            host: x86_64-pc-linux-gnu
          - os: ubuntu-22.04
            host: x86_64-pc-linux-gnu
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Prepare toolchain
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config autoconf automake libtool bison \
            curl git python3 rsync cmake ninja-build zip unzip gperf

      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Build depends (${{ matrix.host }})
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(nproc)"
          ANDROID_SDK= ANDROID_HOME= ANDROID_NDK= ANDROID_NDK_HOME= make -C depends HOST="${{ matrix.host }}" -j"${CORES}" V=1 2>&1 | tee depends.build.log
          test -f "depends/${{ matrix.host }}/share/config.site" || {
            echo "::error::depends config.site missing"
            tail -n 200 depends.build.log || true
            exit 1
          }

      - name: Configure (Autotools)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
          CONFIG_SITE=\"$PWD/depends/${{ matrix.host }}/share/config.site\"
          test -f \"$CONFIG_SITE\" || { echo \"Missing config.site for ${{ matrix.host }}\"; exit 1; }
          ANDROID_SDK= ANDROID_HOME= ANDROID_NDK= ANDROID_NDK_HOME= \
          ./configure --disable-tests --disable-bench --without-gui

      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(nproc)"
          stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

      - name: Stage artifacts
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${{ matrix.host }}"
          mkdir -p "$out"
          for f in src/vkaxd src/vkax-cli src/qt/vkax-qt; do
            [ -f "$f" ] && install -m 0755 "$f" "$out/"
          done
          ls -la "$out"
          (cd "$out" && sha256sum * > SHA256SUMS) || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-${{ matrix.os }}-${{ github.run_number }}
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

  windows-cross:
    name: Windows (cross via MinGW • ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install MinGW toolchain
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            g++-mingw-w64-x86-64 mingw-w64-tools make automake autoconf libtool pkg-config
      - name: Install build helpers
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends cmake ninja-build zip unzip patch rsync python3 gperf

      - name: Switch MinGW to POSIX thread model
        run: |
          set -euo pipefail
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix

      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Build depends (x86_64-w64-mingw32)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(nproc)"
          make -C depends HOST=x86_64-w64-mingw32 -j"${CORES}" V=1 2>&1 | tee depends.build.log
          test -f "depends/x86_64-w64-mingw32/share/config.site" || {
            echo "::error::depends config.site missing"
            tail -n 200 depends.build.log || true
            exit 1
          }

      - name: Configure (Autotools)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
          CONFIG_SITE="$PWD/depends/x86_64-w64-mingw32/share/config.site" \
          ./configure --host=x86_64-w64-mingw32 --disable-tests --disable-bench --without-gui --prefix=/

      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(nproc)"
          stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

      - name: Stage artifacts
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/x86_64-w64-mingw32"
          mkdir -p "$out"
          for f in src/vkaxd.exe src/vkax-cli.exe src/qt/vkax-qt.exe; do
            [ -f "$f" ] && install -m 0755 "$f" "$out/"
          done
          ls -la "$out"
          (cd "$out" && sha256sum * > SHA256SUMS) || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-x86_64-w64-mingw32-${{ matrix.os }}-${{ github.run_number }}
          path: dist/x86_64-w64-mingw32/**
          if-no-files-found: error

  windows-msys2:
    name: Windows (MSYS2 native • ${{ matrix.host }})
    runs-on: windows-2022
    timeout-minutes: 150
    continue-on-error: ${{ matrix.experimental == true }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - msystem: MINGW64
            host: x86_64-w64-mingw32
            prefix: /mingw64
            experimental: false
            pkgs: >-
              mingw-w64-x86_64-toolchain
              mingw-w64-x86_64-pkgconf
              mingw-w64-x86_64-cmake
              mingw-w64-x86_64-ninja
          - msystem: MINGW32
            host: i686-w64-mingw32
            prefix: /mingw32
            experimental: true
            pkgs: >-
              mingw-w64-i686-toolchain
              mingw-w64-i686-pkgconf
              mingw-w64-i686-cmake
              mingw-w64-i686-ninja
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            base-devel
            git
            autoconf
            automake
            libtool
            zip
            unzip
            patch
            rsync
            python
            gperf
            ${{ matrix.pkgs }}

      - name: Build (MSYS2 ${{ matrix.msystem }}) ${{ matrix.msystem }})
        shell: msys2 {0}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export HOST="${{ matrix.host }}"
          export MINGW_PREFIX="${{ matrix.prefix }}"
          export PATH="$MINGW_PREFIX/bin:$PATH"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1
          CORES="$(nproc || echo 2)"
          FALLBACK_DOWNLOAD_PATH=${FALLBACK_DOWNLOAD_PATH:-https://explorer.yerbas.org/depends/} \
          NO_QT=1 \
          make -C depends HOST="$HOST" -j"$CORES" V=1 2>&1 | tee depends.build.log
          echo "::group::depends config.site probe"
          find depends -maxdepth 4 -type f -name config.site -print || true
          echo "::endgroup::
          test -f "depends/$HOST/share/config.site" || { echo "missing config.site for $HOST"; echo "::group::depends tail";tail -n 200 depends.build.log || true; exit 1; }
          ./autogen.sh
          CONFIG_SITE="$PWD/depends/$HOST/share/config.site" \
          ./configure --host="$HOST" --disable-tests --disable-bench --without-gui --prefix=/ 2>&1 | tee -a configure.log
          make -j"$CORES" 2>&1 | tee build.log
          out="dist/${HOST}"
          mkdir -p "$out"
          for f in src/vkaxd.exe src/vkax-cli.exe src/qt/vkax-qt.exe; do
            [ -f "$f" ] && install -m 0755 "$f" "$out/"
          done
          (cd "$out" && sha256sum * > SHA256SUMS) || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-win-msys2-${{ github.run_number }}
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

  macos:
    name: macOS (${{ matrix.os }} • ${{ matrix.host }})
    runs-on: ${{ matrix.os }}
    env:
      HOST: ${{ matrix.host }}
      ANDROID_SDK:
      ANDROID_HOME:
      ANDROID_NDK:
      ANDROID_NDK_HOME:
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            host: x86_64-apple-darwin19
            deploy_target: "10.15"
          - os: macos-14
            host: aarch64-apple-darwin
            deploy_target: "11.0"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Prepare toolchain
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          brew update || true
          brew install automake libtool pkg-config coreutils cmake ninja || true

      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Build depends (${{ matrix.host }})
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deploy_target }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(sysctl -n hw.ncpu || echo 2)"
          make -C depends HOST="${{ matrix.host }}" -j"${CORES}" V=1 2>&1 | tee depends.build.log
          test -f "depends/${{ matrix.host }}/share/config.site" || {
            echo "::error::depends config.site missing"
            tail -n 200 depends.build.log || true
            exit 1
          }

      - name: Configure (Autotools)
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deploy_target }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          ./autogen.sh
          CONFIG_SITE="$PWD/depends/${{ matrix.host }}/share/config.site" \
          ./configure --disable-tests --disable-bench --without-gui

      - name: Build
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(sysctl -n hw.ncpu || echo 2)"
          stdbuf -oL -eL make -j"${CORES}" 2>&1 | tee build.log

      - name: Stage artifacts
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${{ matrix.host }}"
          mkdir -p "$out"
          for f in src/vkaxd src/vkax-cli src/qt/vkax-qt; do
            [ -f "$f" ] && install -m 0755 "$f" "$out/"
          done
          ls -la "$out"
          (cd "$out" && shasum -a256 * > SHA256SUMS) || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-${{ matrix.os }}-${{ github.run_number }}
          path: dist/${{ matrix.host }}/**
          if-no-files-found: error

  android:
    name: Android (${{ matrix.abi }} • ${{ matrix.host }} • API ${{ matrix.api }})
    runs-on: ubuntu-24.04
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - abi: arm64-v8a
            host: aarch64-linux-android
            api: 28
          - abi: armeabi-v7a
            host: arm-linux-androideabi
            api: 28
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_VERSION: "23.1.7779620"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Install host build tools
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential autoconf automake libtool pkg-config cmake ninja-build \
            curl git python3 rsync zip unzip gperf

      - name: Get Android cmdline-tools
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o cmdline-tools.zip
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"

      - name: Accept Android licenses (seed)
        uses: ./.github/actions/android-accept-licenses

      - name: Install SDK/NDK (guarded)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          if [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
            "$SDKMANAGER" --sdk_root="$ANDROID_SDK_ROOT" --install \
              "platform-tools" "platforms;android-${{ matrix.api }}" "ndk;${ANDROID_NDK_VERSION}"
          else
            echo "::warning::sdkmanager not found; skipping install"
          fi

      - name: Sync submodules
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          git submodule sync --recursive
          git submodule update --init --recursive --force --depth 1

      - name: Build depends (${{ matrix.host }})
        env:
          ANDROID_NDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export ANDROID_TOOLCHAIN_BIN="$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CORES="$(nproc)"
          make -C depends HOST="${{ matrix.host }}" -j"${CORES}" V=1 ANDROID_SDK="$ANDROID_SDK_ROOT" ANDROID_NDK="$ANDROID_NDK" 2>&1 | tee depends.build.log
          test -f "depends/${{ matrix.host }}/share/config.site" || {
            echo "::error::depends config.site missing"
            tail -n 200 depends.build.log || true
            exit 1
          }

      - name: Build core (daemon/cli)
        env:
          ANDROID_API_LEVEL: ${{ matrix.api }}
          ANDROID_NDK: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          export ANDROID_TOOLCHAIN_BIN="$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin"
          CORES="$(nproc)"
          make -j"${CORES}" HOST="${{ matrix.host }}" \
            ANDROID_API_LEVEL="$ANDROID_API_LEVEL" ANDROID_TOOLCHAIN_BIN="$ANDROID_TOOLCHAIN_BIN" \
            vkax-d vkax-cli 2>&1 | tee build.log

      - name: Stage artifacts
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          out="dist/${{ matrix.host }}-${{ matrix.abi }}"
          mkdir -p "$out"
          for f in src/vkaxd src/vkax-cli build/**/vkaxd build/**/vkax-cli; do
            if [ -f "$f" ]; then
              base="$(basename "$f")"
              install -m 0755 "$f" "$out/$base"
            fi
          done
          if [ -x "${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip" ]; then
            "${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip" "$out"/vkax* || true
          fi
          ls -la "$out"
          (cd "$out" && sha256sum * > SHA256SUMS) || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vkax-${{ matrix.host }}-${{ matrix.abi }}-android-${{ github.run_number }}
          path: dist/${{ matrix.host }}-${{ matrix.abi }}/**
          if-no-files-found: error

  netbsd:
    name: NetBSD (experimental cross)
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Attempt depends (x86_64-unknown-netbsd)
        run: |
          set -euo pipefail
          cd "${GITHUB_WORKSPACE:-.}"
          CORES="$(nproc)"
          make -C depends HOST=x86_64-unknown-netbsd -j"${CORES}" V=1 || echo "NetBSD depends may be unsupported here."
