# .github/workflows/build.yaml
name: CI • Smoke-first + OS builds (Android on Ubuntu AMD64)

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Android vars (used only in Android jobs)
env:
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.android-sdk
  ANDROID_HOME: ${{ github.workspace }}/.android-sdk
  ANDROID_CLT_LINUX: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip

jobs:
  # =====================================
  # SMOKE: native toolchains — Ubuntu (AMD/ARM)
  # =====================================
  smoke_native_ubuntu:
    name: smoke • native • ubuntu • ${{ matrix.name }}
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          # Add/remove Ubuntu variants here
          - name: ubuntu-22-amd64
            runs_on: '"ubuntu-22.04"'
          - name: ubuntu-24-amd64
            runs_on: '"ubuntu-24.04"'
          - name: ubuntu-22-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-22.04"]'
          - name: ubuntu-24-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-24.04"]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize shebangs (curly quotes)
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r -d '' f; do
            head -n1 "$f" | grep -q '^#!' || continue
            if head -n1 "$f" | grep -qE "[‘’“”]"; then
              awk 'NR==1{gsub(/‘|’/, "'\''"); gsub(/“|”/, "\"")} {print}' "$f" > "$f.tmp" && mv "$f.tmp" "$f"
              echo "::warning file=$f,line=1::Fixed curly quotes in shebang (use ASCII quotes)."
            fi
          done < <(git ls-files -z)

      - name: Toolchain smoke
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t
          ./t || true
          echo ok > .smoke_pass

      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-native-${{ matrix.name }}
          path: |
            .smoke_pass
            t
          if-no-files-found: warn

  # =====================================
  # SMOKE: native toolchains — macOS (Intel)
  # =====================================
  smoke_native_$1  - name: Build vendored depends (macOS Intel)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d depends ]; then
            brew update
            brew install automake libtool pkg-config cmake ninja
            if ! compgen -G "depends/x86_64-apple-darwin*" > /dev/null; then
              make -C depends -j"$(sysctl -n hw.ncpu || echo 2)" HOST=x86_64-apple-darwin
            fi
          else
            echo "::error::depends/ directory missing; required for macOS build."
            exit 2
          fi

      $2
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f CMakeLists.txt ]; then
            echo "::notice::No CMakeLists.txt; skipping."
            exit 0
          fi
          if compgen -G "depends/x86_64-apple-darwin*" > /dev/null; then
            export CMAKE_PREFIX_PATH="$(echo depends/x86_64-apple-darwin*)"
          elif [ -d /usr/local/include/boost ] || [ -d /opt/homebrew/include/boost ]; then
            :
          else
            echo "::warning::Boost headers not found and no depends output; skipping macOS build."
            exit 0
          fi
          cmake -S . -B build
          cmake --build build -j"$(sysctl -n hw.ncpu || echo 2)" || {
            echo "::error::CMake build failed; ensure vendored deps or system boost."; exit 2; }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-macos-${{ matrix.macos }}
          path: build/**/*
          if-no-files-found: warn

  # =====================================
  # Ubuntu (22/24 AMD64 + self-hosted ARM64) — native only (after smoke_native_ubuntu)
  # =====================================
  ubuntu:
    name: native • ubuntu • ${{ matrix.name }}
    needs: smoke_native_ubuntu
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-22-amd64
            runs_on: '"ubuntu-22.04"'
            triple: x86_64-pc-linux-gnu
          - name: ubuntu-24-amd64
            runs_on: '"ubuntu-24.04"'
            triple: x86_64-pc-linux-gnu
          - name: ubuntu-22-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-22.04"]'
            triple: aarch64-linux-gnu
          - name: ubuntu-24-arm64
            runs_on: '["self-hosted","Linux","ARM64","ubuntu-24.04"]'
            triple: aarch64-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Toolchain sanity
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > t.cpp
          c++ -O2 t.cpp -o t && ./t || true

      - name: Optional depends build (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -d depends ]; then
            sudo apt-get update -qq
            sudo apt-get install -y -qq build-essential pkg-config automake libtool autoconf bison cmake ninja-build python3
            make -C depends -j"$(nproc || echo 2)" HOST=${{ matrix.triple }} || {
              echo "::error::depends build failed; missing tool or dependency."; exit 2; }
          else
            echo "::notice::No depends/ dir; skipping vendored deps."
          fi

      - name: CMake build (if present)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f CMakeLists.txt ]; then
            echo "::notice::No CMakeLists.txt; skipping."
            exit 0
          fi
          if compgen -G "depends/x86_64-apple-darwin*" > /dev/null; then
            export CMAKE_PREFIX_PATH="$(echo depends/x86_64-apple-darwin*)"
          else
            echo "::error::Vendored depends prefix not found after build."
            ls -la depends || true
            exit 2
          fi
          cmake -S . -B build
          cmake --build build -j"$(sysctl -n hw.ncpu || echo 2)" || {
            echo "::error::CMake build failed on macOS with vendored depends."; exit 2; }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-ubuntu-${{ matrix.name }}
          path: build/**/*
          if-no-files-found: warn

  # =====================================
  # Windows (PowerShell) — native only (after smoke_native_windows)
  # =====================================
  windows:
    name: native • windows • ${{ matrix.windows }}
    needs: smoke_native_windows
    runs-on: ${{ matrix.windows }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        windows: [windows-2022]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC env
        uses: ilammy/msvc-dev-cmd@v1

      - name: Toolchain sanity
        shell: pwsh
        run: |
          'int main(){return 0;}' | Set-Content -NoNewline -Path .\t.cpp
          cl /nologo .\t.cpp /Fe:t.exe
          .\t.exe

      - name: CMake build (if present)
        shell: pwsh
        run: |
          if (Test-Path .\CMakeLists.txt) {
            cmake -S . -B build
            if ($LASTEXITCODE -ne 0) { echo "::error::CMake configure failed."; exit 2 }
            cmake --build build -- -j 2
            if ($LASTEXITCODE -ne 0) { echo "::error::CMake build failed; check missing deps."; exit 2 }
          } else {
            echo "::notice::No CMakeLists.txt; skipping."
          }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: native-windows-${{ matrix.windows }}
          path: build/**/*
          if-no-files-found: warn
