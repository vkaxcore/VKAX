# .github/workflows/build.yaml
# VKAX Android APK Build â€” aarch64; deterministic NDK r23c wiring; depends-only (no Qt); strict sysroot/API; CI diagnostics.
# This workflow assumes depends/hosts/android.mk from VKAX repo (absolute clang paths + API handling).
# Signed: Setvin

name: VKAX Android APK Build

on:
  workflow_dispatch:
  push:
    branches: [ main, v100.11.5-android, dev ]

env:
  COIN_NAME: vkax
  BUILD_DIR: vkax-build
  COMPRESS_DIR: vkax-compress
  LC_ALL: C
  LANG: C

jobs:
  android-apk:
    name: Android aarch64 build
    runs-on: ubuntu-22.04
    env:
      HOST: aarch64-linux-android
      ANDROID_API: "21"   # exported as ANDROID_API_LEVEL for depends/hosts/android.mk
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Host tooling
        run: |
          set -eux
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config \
            python3 unzip wget cmake ninja-build zip curl perl

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Gradle 8.7
        run: |
          set -eux
          curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o /tmp/gradle.zip
          sudo mkdir -p /opt/gradle
          sudo unzip -q /tmp/gradle.zip -d /opt/gradle
          echo "/opt/gradle/gradle-8.7/bin" >> "$GITHUB_PATH"

      - name: Install Android SDK and NDK r23c
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
        run: |
          set -eux
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/clt.zip
          unzip -q /tmp/clt.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}"
          wget -q https://dl.google.com/android/repository/android-ndk-r23c-linux.zip -o /dev/null -O /tmp/ndk.zip
          unzip -q /tmp/ndk.zip -d "$ANDROID_SDK_ROOT/ndk"

          # Canonical exports for the rest of the job and for depends/hosts/android.mk
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"                                  >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/android-ndk-r23c"             >> "$GITHUB_ENV"
          echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/android-ndk-r23c"                  >> "$GITHUB_ENV"
          echo "ANDROID_API_LEVEL=${{ env.ANDROID_API }}"                            >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/ndk/android-ndk-r23c/toolchains/llvm/prebuilt/linux-x86_64/bin" >> "$GITHUB_PATH"

      - name: Sanitize Makefiles (strip CRLF + BOM)
        run: |
          set -eux
          python3 - <<'PY'
          import os
          roots=['depends']
          files=[]
          for root in roots:
            for r,_,fs in os.walk(root):
              for f in fs:
                if f.endswith('.mk') or f in ('funcs.mk','sources.mk','rules.mk'):
                  files.append(os.path.join(r,f))
          for p in files:
            with open(p,'rb') as fh: data=fh.read()
            if data.startswith(b'\xef\xbb\xbf'): data=data[3:]          # remove UTF-8 BOM
            data=data.replace(b'\r\n',b'\n').replace(b'\r',b'\n')       # normalize newlines
            with open(p,'wb') as fh: fh.write(data)
          print("Sanitized", len(files), "makefiles")
          PY

      - name: Verify NDK toolchain
        run: |
          set -eux
          TOOLBIN="${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          test -x "${TOOLBIN}/clang++"
          "${TOOLBIN}/clang++" --target=${HOST}${ANDROID_API_LEVEL} -v || true

      - name: Build depends (full set; ensure miniupnpc is staged)
        env:
          HOST: ${{ env.HOST }}
        run: |
          set -eux
          # Full depends build without Qt; android.mk provides absolute CC/CXX/AR/RANLIB and sysroot/API flags
          make -C depends -j"$(nproc)" \
            HOST="$HOST" \
            ANDROID_NDK="$ANDROID_NDK" \
            ANDROID_API="${ANDROID_API_LEVEL}" \
            NO_QT=1 V=1
          # Ensure miniupnpc exists even if not default-picked by packages set (idempotent if already built)
          make -C depends -j"$(nproc)" \
            HOST="$HOST" \
            ANDROID_NDK="$ANDROID_NDK" \
            ANDROID_API="${ANDROID_API_LEVEL}" \
            miniupnpc V=1

          # Sanity: verify staged libs exist so configure can't claim empty paths
          DEPENDS_PREFIX="${PWD}/depends/${HOST}"
          test -d "${DEPENDS_PREFIX}/lib"
          ls -l "${DEPENDS_PREFIX}/lib" || true
          # Hard checks for typical artifacts we require (Boost, BDB 4.8, miniupnpc)
          test -n "$(echo ${DEPENDS_PREFIX}/lib/libboost_* 2>/dev/null | tr -d ' ')" || (echo "Missing Boost in depends prefix" && exit 1)
          test -e "${DEPENDS_PREFIX}/lib/libdb_cxx-4.8.a" || test -e "${DEPENDS_PREFIX}/lib/libdb_cxx.a" || (echo "Missing BDB 4.8 in depends prefix" && exit 1)
          test -e "${DEPENDS_PREFIX}/lib/libminiupnpc.a" || (echo "Missing miniupnpc in depends prefix" && exit 1)

      - name: Configure core (use depends config.site; no fragile Boost flags)
        env:
          HOST: ${{ env.HOST }}
          CONFIG_SITE: ${{ github.workspace }}/depends/${{ env.HOST }}/share/config.site
        run: |
          set -eux
          DEPENDS_PREFIX="${PWD}/depends/${HOST}"
          export PKG_CONFIG_PATH="${DEPENDS_PREFIX}/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="${PKG_CONFIG_PATH}"
          export CPPFLAGS="-I${DEPENDS_PREFIX}/include -I${DEPENDS_PREFIX}/include/db4.8"
          export CFLAGS="-O2 -fPIC ${CPPFLAGS}"
          export CXXFLAGS="${CFLAGS}"
          export LDFLAGS="-L${DEPENDS_PREFIX}/lib"
          export BDB_CFLAGS="-I${DEPENDS_PREFIX}/include/db4.8"
          export BDB_LIBS="-L${DEPENDS_PREFIX}/lib -ldb_cxx-4.8"

          ./autogen.sh || true
          ./configure \
            --host="${HOST}" --build="$(gcc -dumpmachine)" \
            --prefix="${DEPENDS_PREFIX}" \
            --with-incompatible-bdb \
            --with-miniupnpc --enable-upnp-default \
            --without-gui --disable-bench --disable-tests

          # Emit what configure actually sees to aid future debugging
          echo "=== includes ==="; ls -la "${DEPENDS_PREFIX}/include" || true
          echo "=== include/db4.8 ==="; ls -la "${DEPENDS_PREFIX}/include/db4.8" || true
          echo "=== libs ==="; ls -la "${DEPENDS_PREFIX}/lib" || true

      - name: Build core
        run: |
          set -eux
          make -j"$(nproc)" src/vkaxd src/vkax-cli src/vkax-tx
          mkdir -p "$BUILD_DIR"
          cp -f src/vkaxd src/vkax-cli src/vkax-tx "$BUILD_DIR/"

      - name: Create APK
        run: |
          set -eux
          mkdir -p android-app/app/src/main/{jniLibs/arm64-v8a,java/org/vkax/android}
          cp "$BUILD_DIR/vkaxd" "$BUILD_DIR/vkax-cli" "$BUILD_DIR/vkax-tx" android-app/app/src/main/jniLibs/arm64-v8a/

          cat > android-app/settings.gradle << 'GRADLE'
          rootProject.name = "VKAXAndroid"
          include(":app")
          GRADLE

          cat > android-app/build.gradle << 'GRADLE'
          buildscript {
            repositories { google(); mavenCentral() }
            dependencies { classpath "com.android.tools.build:gradle:8.3.2" }
          }
          allprojects { repositories { google(); mavenCentral() } }
          GRADLE

          cat > android-app/app/build.gradle << 'GRADLE'
          plugins { id "com.android.application" }
          android {
            namespace "org.vkax.android"
            compileSdkVersion 34
            defaultConfig {
              applicationId "org.vkax.android"
              minSdkVersion 21
              targetSdkVersion 34
              versionCode 1
              versionName "1.0"
              ndk { abiFilters "arm64-v8a" }
            }
            buildTypes { release { minifyEnabled false } }
          }
          GRADLE

          cat > android-app/app/src/main/AndroidManifest.xml << 'XML'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="org.vkax.android">
            <application android:label="VKAX Daemon" android:allowBackup="false">
              <activity android:name=".MainActivity">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          XML

          mkdir -p android-app/app/src/main/java/org/vkax/android
          cat > android-app/app/src/main/java/org/vkax/android/MainActivity.java << 'JAVA'
          package org.vkax.android;
          import android.app.Activity;
          import android.os.Bundle;
          public class MainActivity extends Activity {
            @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); }
          }
          JAVA

          cd android-app
          /opt/gradle/gradle-8.7/bin/gradle --no-daemon --warning-mode all assembleRelease
          cd ..
          mkdir -p "$COMPRESS_DIR"
          cp android-app/app/build/outputs/apk/release/app-release.apk "$COMPRESS_DIR/${COIN_NAME}-android-aarch64.apk"

      - name: Diagnostics
        if: always()
        run: |
          set -eux
          DEPENDS_PREFIX="${PWD}/depends/${HOST}"
          echo "=== depends lib summary ==="
          ls -l "${DEPENDS_PREFIX}/lib" | grep -E 'boost|db|miniupnpc' || true
          echo "=== toolchain ==="
          "${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++" --version || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.COIN_NAME }}-android-aarch64-apk
          path: ${{ env.COMPRESS_DIR }}/${{ env.COIN_NAME }}-android-aarch64.apk
