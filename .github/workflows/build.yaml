# .github/workflows/build.yaml
name: Build (Ubuntu-first, Android legacy+normal, Qt-toggle-ready)

on:
  push:
    branches: [ v100.11.5-android ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -e -o pipefail {0}

env:
  TZ: UTC
  LC_ALL: C
  LANG: C.UTF-8
  FORCE_COLOR: "1"
  ALLOW_TTY_LICENSE_ACCEPT: "0"
  FDROID_CHECKSUMS_URL: https://gitlab.com/fdroid/android-sdk-transparency-log/-/raw/master/checksums.json
  ANDROID_CLT_URL: https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  ANDROID_SDK_ROOT: ${{ github.workspace }}/.sdk
  ANDROID_HOME: ${{ github.workspace }}/.sdk
  JAVA_DIST: temurin
  JAVA_VERSION: "11"
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 2G
  NO_QT: "1"

jobs:
  guard:
    name: Guard workflows
    runs-on: ubuntu-22.04
    timeout-minutes: 8
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Detect CRLF, TABs, unquoted brackets
        run: |
          set -euo pipefail
          files=$(git ls-files ".github/workflows/*.yml" ".github/workflows/*.yaml" || true)
          [ -n "$files" ] || exit 0
          awk 'BEGIN{bad=0}
            { if ($0 ~ /\r/) {bad=1; printf "::error file=%s,line=%d::CRLF detected\n", FILENAME, NR}
              if ($0 ~ /\t/) {bad=1; printf "::error file=%s,line=%d::TAB characters detected\n", FILENAME, NR}
              if ($0 ~ /^[[:space:]]*- name:[[:space:]]*\[[^]]+\][[:space:]]*$/) {bad=1; printf "::error file=%s,line=%d::Unquoted [brackets] in step name\n", FILENAME, NR}
            }
            END{exit(bad)}' $files
      - name: Forbid unsafe patterns
        run: |
          set -euo pipefail
          files=$(git ls-files ".github/workflows/*.yml" ".github/workflows/*.yaml" || true)
          [ -n "$files" ] || exit 0
          if grep -nE 'yes[[:space:]]*\|[[:space:]]*sdkmanager[[:space:]]*--licenses' $files; then
            echo "::error::Forbidden pattern 'yes | sdkmanager --licenses' in workflows"
            exit 1
          fi
          if grep -nH -e 'user-config\.jam' $files; then
            echo "::error::Workflows must not reference user-config.jam"
            exit 1
          fi
      - name: Require pinned actions by commit SHA
        run: |
          set -euo pipefail
          files=$(git ls-files ".github/workflows/*.yml" ".github/workflows/*.yaml" || true)
          [ -n "$files" ] || exit 0
          bad=0
          while IFS= read -r line; do
            uses=$(echo "$line" | sed -n 's/^[[:space:]]*uses:[[:space:]]*\(.*\)$/\1/p')
            [ -z "$uses" ] && continue
            case "$uses" in
              ./*) continue;;
              docker://*) continue;;
              *@*)
                sha="${uses##*@}"
                if ! printf '%s' "$sha" | grep -Eq '^[0-9a-f]{40}$'; then
                  echo "::error::Unpinned action: $uses"
                  bad=1
                fi
                ;;
              *)
                echo "::error::Unpinned action: $uses"
                bad=1
                ;;
            esac
          done < <(grep -nE '^[[:space:]]*uses:' $files)
          exit $bad

  ubuntu:
    name: Ubuntu (qt=${{ matrix.qt }})
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    needs: guard
    strategy:
      fail-fast: false
      matrix:
        qt: [false]
    env:
      ENABLE_QT: ${{ matrix.qt && '1' || '0' }}
      NO_QT: ${{ matrix.qt && '0' || '1' }}
      BUILD_DIR: build/linux/_cmake
      SOURCE_DATE_EPOCH: ""
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Compute SOURCE_DATE_EPOCH
        run: |
          set -euo pipefail
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> "$GITHUB_ENV"

      - name: Tooling
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential ninja-build cmake pkg-config ccache jq dos2unix binutils

      - name: Install Qt deps (only if qt=1)
        if: ${{ matrix.qt }}
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq qtbase5-dev qttools5-dev qttools5-dev-tools libqt5svg5-dev

      - name: Configure ccache
        run: |
          set -euo pipefail
          mkdir -p "$CCACHE_DIR"
          ccache --max-size="$CCACHE_MAXSIZE"
          ccache --set-config=sloppiness=pch_defines,time_macros
          ccache --set-config=hash_dir=false
          ccache -p
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
          echo "CCACHE_NOHASHDIR=1" >> "$GITHUB_ENV"
          echo "CCACHE_DEPEND=1" >> "$GITHUB_ENV"

      - name: Cache ccache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ubuntu-ccache-${{ matrix.qt }}-${{ github.ref }}-${{ hashFiles('**/*.[ch]', '**/*.[ch]pp', '**/CMakeLists.txt', 'cmake/**') }}
          restore-keys: |
            ubuntu-ccache-${{ matrix.qt }}-${{ github.ref }}-
            ubuntu-ccache-${{ matrix.qt }}-

      - name: Cache CMake/Ninja
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: |
            ${{ env.BUILD_DIR }}
            ~/.cache/cmake
          key: cmake-${{ matrix.qt }}-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          restore-keys: |
            cmake-${{ matrix.qt }}-${{ runner.os }}-

      - name: Disk check
        run: |
          set -euo pipefail
          kb=$(df -Pk . | awk 'NR==2{print $4}')
          [ "$kb" -ge 8000000 ] || { echo "::error::Insufficient disk space"; exit 1; }

      - name: Reproducible flags and PATH
        run: |
          set -euo pipefail
          export PATH=$(printf "%s" "$PATH" | awk -v RS=: '!a[$1]++{if(out)printf ":"; printf "%s",$1} END{print ""}')
          pfx=$(pwd)
          echo "CFLAGS=-fdebug-prefix-map=$pfx=/usr/src -g" >> "$GITHUB_ENV"
          echo "CXXFLAGS=-fdebug-prefix-map=$pfx=/usr/src -g" >> "$GITHUB_ENV"

      - name: Configure (CMake)
        run: |
          set -euo pipefail
          cmake -S . -B "$BUILD_DIR" -G Ninja \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_FLAGS="$CFLAGS" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
            -DNO_QT=$NO_QT

      - name: Build vkax-d and vkax-cli
        run: |
          set -euo pipefail
          cmake --build "$BUILD_DIR" --target vkax-d -- -k 0 -j"$(nproc)" || true
          cmake --build "$BUILD_DIR" --target vkax-cli -- -k 0 -j"$(nproc)" || true

      - name: Build vkax-qt (only if qt=1)
        if: ${{ matrix.qt }}
        run: |
          set -euo pipefail
          cmake --build "$BUILD_DIR" --target vkax-qt -- -k 0 -j"$(nproc)" || true

      - name: Collect Linux artifacts
        if: always()
        run: |
          set -euo pipefail
          mkdir -p out/linux
          find "$BUILD_DIR" -maxdepth 4 -type f -perm -u+x \( -name 'vkax-*' -o -name 'vkax' \) -print -exec cp -f '{}' out/linux/ \; || true
          find out/linux -type f -exec strip --strip-unneeded {} \; || true
          printf "%s\n" "version=$(git describe --tags --always --dirty=+)" > out/linux/VERSION.txt
          if compgen -G "out/linux/*" > /dev/null; then
            fail=0
            for f in out/linux/*; do
              if command -v readelf >/dev/null 2>&1; then
                if readelf -d "$f" 2>/dev/null | grep -E 'RPATH|RUNPATH' -q; then
                  echo "::error::RPATH/RUNPATH found in $f"
                  fail=1
                fi
              fi
              if strings "$f" | grep -F "$GITHUB_WORKSPACE" -q; then
                echo "::error::Workspace path leak in $f"
                fail=1
              fi
            done
            [ $fail -eq 0 ] || exit 1
          fi

      - name: Upload Linux artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: linux-qt${{ matrix.qt }}
          path: out/linux
          if-no-files-found: warn

      - name: Upload debug on failure
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: linux-debug-qt${{ matrix.qt }}
          path: |
            ${{ env.BUILD_DIR }}/CMakeCache.txt
            ${{ env.BUILD_DIR }}/compile_commands.json
            ${{ env.BUILD_DIR }}/CMakeFiles/**/*.log
          if-no-files-found: warn

      - name: ccache stats
        if: always()
        run: |
          set -euo pipefail
          ccache -s
          if ! ccache -s | grep -q 'cache hit'; then
            echo "::error::ccache recorded 0 hits/misses after build (bypassed)."
            exit 1
          fi

  android:
    name: Android (${{ matrix.flavor }}; api=${{ matrix.api }}, ndk=${{ matrix.ndk_ver }})
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs: [guard, ubuntu]
    strategy:
      fail-fast: false
      matrix:
        flavor: [normal, legacy]
        api: [21]
        ndk_ver: [23.1.7779620]
    env:
      SOURCE_DATE_EPOCH: ""
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Compute SOURCE_DATE_EPOCH
        run: |
          set -euo pipefail
          echo "SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)" >> "$GITHUB_ENV"

      - name: Setup Java (with Gradle cache)
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Cache Maven
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Tooling
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y -qq unzip curl jq dos2unix ccache build-essential

      - name: Configure ccache
        run: |
          set -euo pipefail
          mkdir -p "$CCACHE_DIR"
          ccache --max-size="$CCACHE_MAXSIZE"
          ccache --set-config=sloppiness=pch_defines,time_macros
          ccache --set-config=hash_dir=false
          ccache -p
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"
          echo "CCACHE_NOHASHDIR=1" >> "$GITHUB_ENV"
          echo "CCACHE_DEPEND=1" >> "$GITHUB_ENV"

      - name: Cache ccache
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.CCACHE_DIR }}
          key: android-ccache-${{ matrix.flavor }}-${{ github.ref }}-${{ hashFiles('**/*.[ch]', '**/*.[ch]pp', '**/Android.mk', '**/*.bp', '**/build.gradle*') }}
          restore-keys: |
            android-ccache-${{ matrix.flavor }}-${{ github.ref }}-
            android-ccache-${{ matrix.flavor }}-

      - name: Prepare Android cmdline-tools (verified)
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT" "$HOME/.android" "$ANDROID_SDK_ROOT/cmdline-tools"
          touch "$HOME/.android/repositories.cfg"
          tmpdir=$(mktemp -d)
          trap 'rm -rf "$tmpdir"' EXIT
          curl -fsSL --retry 5 --retry-delay 2 "$FDROID_CHECKSUMS_URL" -o "$tmpdir/checksums.json"
          exp_list=$(jq -r --arg u "$ANDROID_CLT_URL" '.[ $u ] | (if type=="array" then .[] else . end) | .sha256' "$tmpdir/checksums.json")
          [ -n "$exp_list" ] || { echo "::error::No checksum entry for $ANDROID_CLT_URL"; exit 1; }
          curl -fsSL --retry 5 --retry-delay 2 "$ANDROID_CLT_URL" -o "$tmpdir/cmdline.zip"
          got_sha=$(sha256sum "$tmpdir/cmdline.zip" | awk '{print $1}')
          ok=0; for s in $exp_list; do [ "$got_sha" = "$s" ] && ok=1 && break; done
          [ "$ok" -eq 1 ] || { echo "::error::SHA256 mismatch for commandlinetools"; exit 1; }
          unzip -q "$tmpdir/cmdline.zip" -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"

      - name: Seed Android SDK/NDK licenses
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          printf '%s\n' "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          printf '%s\n' "d56f5187479451eabf01fb78af6dfcb131a6481e" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          printf '%s\n' "8933bad161af4178eabf01fb78af6dfcb131a6481e" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-license" || true
          printf '%s\n' "8933bad161af4178b1185d1a37fbf41ea5269c55" >> "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          printf '%s\n' "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"
          printf '%s\n' "d975f751698a77b662f1254ddbeed3901e976f5a" > "$ANDROID_SDK_ROOT/licenses/android-sdk-module-license"
          printf '%s\n' "601085b94cd77f0b54ff86406957099ebe79c4d6" > "$ANDROID_SDK_ROOT/licenses/android-ndk-license"
          find "$ANDROID_SDK_ROOT/licenses" -type f -print0 | xargs -0 dos2unix >/dev/null 2>&1 || true

      - name: Install Android packages
        env:
          PATH: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:${{ env.PATH }}
        run: |
          set -euo pipefail
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --install "platform-tools" "platforms;android-${{ matrix.api }}" "ndk;${{ matrix.ndk_ver }}"

      - name: Verify Android packages
        run: |
          set -euo pipefail
          test -x "$ANDROID_SDK_ROOT/platform-tools/adb"
          test -d "$ANDROID_SDK_ROOT/platforms/android-${{ matrix.api }}"
          test -d "$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"

      - name: Derive NDK host_tag and smoke test
        id: hosttag
        run: |
          set -euo pipefail
          os=$(uname -s | tr '[:upper:]' '[:lower:]')
          arch=$(uname -m)
          case "$arch" in x86_64|amd64) arch=x86_64;; aarch64|arm64) arch=arm64;; *) echo "::error::Unsupported arch $arch"; exit 1;; esac
          echo "HOST_TAG=$os-$arch" >> "$GITHUB_OUTPUT"
          ndk_root="$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk_ver }}"
          clang_a32="$ndk_root/toolchains/llvm/prebuilt/${os}-${arch}/bin/armv7a-linux-androideabi21-clang++"
          clang_a64="$ndk_root/toolchains/llvm/prebuilt/${os}-${arch}/bin/aarch64-linux-android21-clang++"
          mkdir -p smoke && cd smoke
          printf '%s\n' '#include <atomic>\nint main(){ std::atomic<int> v{0}; v++; return (int)v.load(); }' > t.cpp
          "$clang_a32" -latomic -fdebug-prefix-map=$PWD=/usr/src t.cpp -o a32
          "$clang_a64" -fdebug-prefix-map=$PWD=/usr/src t.cpp -o a64

      - name: Build Android
        run: |
          set -euo pipefail
          mkdir -p artifacts
          if [ -x "./gradlew" ]; then
            bash ./gradlew --no-daemon -Dorg.gradle.caching=true -Dorg.gradle.jvmargs="-Xmx3g" clean assembleRelease
          elif [ -x "./contrib/scripts/build-android.sh" ]; then
            ./contrib/scripts/build-android.sh "${{ matrix.flavor }}" "${{ matrix.api }}" "${{ matrix.ndk_ver }}"
          else
            echo "No known Android build entrypoint found" | tee artifacts/build-skipped.txt
          fi
          find . -type f \( -name '*.apk' -o -name '*.aab' -o -name 'VKAX*.zip' \) -print -exec cp -f '{}' artifacts/ \; || true
          printf "%s\n" "version=$(git describe --tags --always --dirty=+)" > artifacts/VERSION.txt

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: android-${{ matrix.flavor }}-api${{ matrix.api }}-ndk${{ matrix.ndk_ver }}
          path: artifacts
          if-no-files-found: warn

      - name: Upload debug on failure
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: android-debug-${{ matrix.flavor }}
          path: |
            smoke/a32
            smoke/a64
            **/build/*.log
            **/build/**/outputs/**/*.log
          if-no-files-found: warn
